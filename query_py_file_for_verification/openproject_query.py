# Q 0 : # @changeset.file_changes.limit(1000).order("path").map { |change|
#   
#   case change.action
#   when "A"
#     
#     if !change.from_path.blank?
#       
#       action = @changeset.file_changes.detect { |c|
#         
#         c.action == "D" && c.path == change.from_path
#       }
#       changeaction = action ? "R" : "C"
#     end
#     change when "D"
#     
#     @changeset.file_changes.detect { |c|
#       
#       c.from_path == change.path
#     } ? nil : change
#   else
#     
#     change
#   end
# }.compact
Query(Change)
.where("changeset_id = ?")
.return_limit('')
.order('path')
.where("id != 0")
# Q 1 : # @cost_objects.map(&:project).compact.uniq
Query(CostObject)
.where("id != 0")
.distinct('')
# Q 2 : # @cost_type.rates.build(valid_from: Date.today)
Query(CostRate)
.where("cost_type_id = ?")
# Q 3 : # @cost_type.rates.build(valid_from: Date.today)
Query(CostRate)
.where("cost_type_id = ?")
# Q 4 : # @document.attachments.order("created_at DESC")
Query(Document)
.order('created_at')
# Q 5 : # @document.attachments.select(&:new_record?)
Query(Document)
.select('new_record?')
# Q 6 : # @enumeration.class.find_by(id: params[:reassign_to_id])
Query(Enumeration)
.where("id = ?")
# Q 7 : # @forum.messages.order(["Message.sticked_on ASC", sort_clause].compact.join(", ")).includes(:author, :forum).limit(Setting.feeds_limit.to_i)
Query(Message)
.where("forum_id = ?")
.order('sticked_on')
.includes('author')
.includes('forum')
.return_limit('')
# Q 8 : # @forum.topics.order(["Message.sticked_on ASC", sort_clause].compact.join(", ")).includes(:author, last_reply: :author).page(page_param).per_page(per_page_param)
Query(Message)
.where("forum_id = ?")
.order('sticked_on')
.includes('author')
.includes('author')
# Q 9 : # @group.users
Query(User)
.where("id = ?")
# Q 10 : # @group.users.delete(User.includes(:memberships).find(params[:user_id]))
Query(User)
.where("id = ?")
# Q 11 : # @ifc_models.defaults.pluck(:id).uniq
Query(IfcModel)
.select('id')
.distinct('')
# Q 12 : # @ifc_models.includes(:project, :uploader)
Query(IfcModel)
.includes('project')
.includes('uploader')
# Q 13 : # @ifc_models.where(is_default: true)
Query(IfcModel)
.where("is_default = ?")
# Q 14 : # @issue.self_and_descendants.pluck(:id)
Query(Issue)
.select('id')
# Q 15 : # @menu_items.find
Query(MenuItem)
.where("id = ?")
# Q 16 : # @project.categories.find_by(id: params[:reassign_to_id])
Query(Category)
.where("project_id = ?")
.where("id = ?")
# Q 17 : # @project.done_statuses.select(:id).map(&:id)
Query(Project)
.select('id')
# Q 18 : # @project.forums.find(params[:id])
Query(Forum)
.where("project_id = ?")
.where("id = ?")
# Q 19 : # @project.ifc_models.includes(:attachments).order("#{
# IfcModels::IfcModel.table_name}.created_at ASC")
Query(Project)
.order('')
# Q 20 : # @project.ifc_models.includes(:attachments).order("created_at ASC")
Query(Project)
.order('created_at')
# Q 21 : # @project.types.default.first
Query(Project)
.where("id = ?")
.return_limit('1')
# Q 22 : # @project.types.order("position")
Query(Project)
.where("id = ?")
.order('position')
# Q 23 : # @project.wiki.pages.includes(:parent).reject
Query(WikiPage)
.where("id = ?")
.where("wiki_id = ?")
# Q 24 : # @query.order(lft: :asc)
Query(Query)
.order('lft')
# Q 25 : # @query.ordered_work_packages.where(work_package_id: wp_id).delete_all
Query(Query)
.where("work_package_id = ?")
# Q 26 : # @query.where("active", "=", OpenProject::Database::DB_VALUE_TRUE)
Query(Query)

# Q 27 : # @repository.changesets.includes(:user, :repository).page(page_param).per_page(per_page_param)
Query(Changeset)
.where("repository_id = ?")
.includes('user')
.includes('repository')
# Q 28 : # @subject.filters.select(&:display?)
Query(Subject)
.select('display?')
# Q 29 : # @user.memberships.find(params[:id])
Query(User)
.where("id = ?")
# Q 30 : # @wiki.pages.find_by(id: params[:reassign_to_id].presence)
Query(WikiPage)
.where("wiki_id = ?")
.where("id = ?")
# Q 31 : # @wiki.pages.first
Query(WikiPage)
.where("wiki_id = ?")
.return_limit('1')
# Q 32 : # @wiki.pages.includes(:parent)
Query(WikiPage)
.where("wiki_id = ?")
# Q 33 : # @wiki.pages.includes(:parent)
Query(WikiPage)
.where("wiki_id = ?")
# Q 34 : # @wiki.pages.order("title")
Query(WikiPage)
.where("wiki_id = ?")
.order('title')
# Q 35 : # @wiki.pages.with_updated_on.order("title").includes(wiki: :project)
Query(WikiPage)
.where("wiki_id = ?")
.order('title')
.includes('project')
# Q 36 : # @work_package.journals.includes(:user).order("Journal.created_at ASC")
Query(WorkPackage)
.order('created_at')
# Q 37 : # @work_package.self_and_descendants.pluck(:id)
Query(WorkPackage)
.select('id')
# Q 38 : # @work_package.watchers.find_by_user_id(@user.id)
Query(WorkPackage)
.where("user_id = ?")
# Q 39 : # @work_packages.map(&:project).compact.uniq
Query(WorkPackage)
.where("id != 0")
.distinct('')
# Q 40 : # @work_packages.pluck(:id)
Query(WorkPackage)
.select('id')
# Q 41 : # Attachment.find(attachment_hash["id"])
Query(Attachment)
.where("id = ?")
# Q 42 : # Attachment.find_by(container_id: user_id, container_type: "Principal", description: "avatar")
Query(Attachment)
.where("container_id = ?")
.where("container_type = ?")
.where("description = ?")
# Q 43 : # Attachment.find_by(id: key.to_i)
Query(Attachment)
.where("id = ?")
# Q 44 : # Attachment.pluck(:id).each
Query(Attachment)
.select('id')
# Q 45 : # Attachment.select(:container_type).distinct.pluck(:container_type).compact.select
Query(Attachment)
.select('container_type')
.distinct('')
.select('container_type')
.where("id != 0")
# Q 46 : # Attachment.where(container_type: "Project", container_id: project.id)
Query(Attachment)
.where("container_type = ?")
.where("container_id = ?")
# Q 47 : # Attachment.where(container_type: "Version", container_id: version.id)
Query(Attachment)
.where("container_type = ?")
.where("container_id = ?")
# Q 48 : # Attachment.where(container_type: ["Version", "Project"]).destroy_all
Query(Attachment)
.where("container_type = ?")
# Q 49 : # Attachment.where(container_type: model.name).group(:container_id).pluck(:container_id).map
Query(Attachment)
.where("container_type = ?")
.group('container_id')
.select('container_id')
# Q 50 : # Attachment.where(fulltext: nil).where(container_type: tsv_extracted_containers).pluck(:id).each
Query(Attachment)
.where("fulltext = ?")
.where("container_type = ?")
.select('id')
# Q 51 : # Attachment.where(id: attachments_claimed.map(&:id)).update_all(container_id: id, container_type: attachable_class.name)
Query(Attachment)
.where("id = ?")
# Q 52 : # AttributeHelpText.available_types.find
Query(AttributeHelpText)
.where("id = ?")
# Q 53 : # AttributeHelpText.find(params[:id])
Query(AttributeHelpText)
.where("id = ?")
# Q 54 : # AuthSource.find(params[:id])
Query(AuthSource)
.where("id = ?")
# Q 55 : # AuthSource.find(params[:id])
Query(AuthSource)
.where("id = ?")
# Q 56 : # AuthSource.find(params[:id])
Query(AuthSource)
.where("id = ?")
# Q 57 : # AuthSource.find(params[:id])
Query(AuthSource)
.where("id = ?")
# Q 58 : # Category.where(project_id: Project.visible.map(&:id))
Query(Category)
.where("project_id = ?")
# Q 59 : # Category.where(project_id: project_id, assigned_to_id: user_id).update_all(assigned_to_id: nil)
Query(Category)
.where("project_id = ?")
.where("assigned_to_id = ?")
# Q 60 : # Change.includes(:changeset).where(["Changeset.repository_id = ? " "AND Changeset.commit_date BETWEEN ? AND ?", repository.id, @date_from, @date_to]).references(:changesets).group(:commit_date).size
Query(Change)
.includes('changeset')
.group('commit_date')
# Q 61 : # Change.includes(:changeset).where(["Changeset.repository_id = ?", repository.id]).references(:changesets).group(:committer).size
Query(Change)
.includes('changeset')
.group('committer')
# Q 62 : # Change.where(changeset_id: changesets).joins(:changeset)
Query(Change)
.where("changeset_id = ?")
.joins('changeset')
# Q 63 : # Changeset.where(["id < ? AND repository_id = ?", id, repository_id]).order("id DESC").first
Query(Changeset)
.order('')
.return_limit('1')
# Q 64 : # Changeset.where(["id > ? AND repository_id = ?", id, repository_id]).order("id ASC").first
Query(Changeset)
.order('')
.return_limit('1')
# Q 65 : # Changeset.where(["repository_id = ? AND commit_date BETWEEN ? AND ?", repository.id, @date_from, @date_to]).group(:commit_date).size
Query(Changeset)
.group('commit_date')
# Q 66 : # Changeset.where(["repository_id = ? AND committer = ?", id, committer]).update_all("user_id = #{
# new_user_id.nil? ? "NULL" : new_user_id}")
Query(Changeset)

# Q 67 : # Changeset.where(["repository_id = ?", repository.id]).group(:committer).size
Query(Changeset)
.group('committer')
# Q 68 : # Changeset.where(repository_id: id).distinct.pluck(:committer, :user_id)
Query(Changeset)
.where("repository_id = ?")
.distinct('')
.select('committer')
.select('user_id')
# Q 69 : # Color.find(params[:id])
Query(Color)
.where("id = ?")
# Q 70 : # Color.find(params[:id])
Query(Color)
.where("id = ?")
# Q 71 : # Color.find(params[:id])
Query(Color)
.where("id = ?")
# Q 72 : # Color.find(params[:id])
Query(Color)
.where("id = ?")
# Q 73 : # Color.find(params[:id])
Query(Color)
.where("id = ?")
# Q 74 : # CostEntry.find(params[:id])
Query(CostEntry)
.where("id = ?")
# Q 75 : # CostEntry.where(work_package_id: id).update_all(project_id: project_id)
Query(CostEntry)
.where("work_package_id = ?")
# Q 76 : # CostEntry.where(work_package_id: work_packages).update_all(action)
Query(CostEntry)
.where("work_package_id = ?")
# Q 77 : # CostObject.find(context[:params][:cost_object_id])
Query(CostObject)
.where("id = ?")
# Q 78 : # CostObject.find(cost_object_id)
Query(CostObject)
.where("id = ?")
# Q 79 : # CostObject.find(id)
Query(CostObject)
.where("id = ?")
# Q 80 : # CostObject.find(params[:id].to_i)
Query(CostObject)
.where("id = ?")
# Q 81 : # CostObject.find_by_id(context[:detail].old_value)
Query(CostObject)
.where("id = ?")
# Q 82 : # CostObject.find_by_id(context[:detail].value)
Query(CostObject)
.where("id = ?")
# Q 83 : # CostObject.includes(:project, :author).find_by(id: params[:id])
Query(CostObject)
.includes('project')
.includes('author')
.where("id = ?")
# Q 84 : # CostObject.order("name").pluck(:name, :id)
Query(CostObject)
.order('name')
.select('name')
.select('id')
# Q 85 : # CostObject.visible(user).order(sort_clause).includes(:author).where(project_id: @project.id).page(page_param).per_page(per_page_param)
Query(CostObject)
.order('')
.includes('author')
.where("project_id = ?")
# Q 86 : # CostObject.where(id: params[:id] || params[:ids])
Query(CostObject)
.where("id = ?")
# Q 87 : # CostObject.where(project_id: project).order("subject ASC")
Query(CostObject)
.where("project_id = ?")
.order('subject')
# Q 88 : # CostQuery.where("serialized LIKE '%CustomField#{
# id}%'")
Query(CostQuery)

# Q 89 : # CostQuery.where(["is_public = ? AND (project_id IS NULL OR project_id = ?)", true, @project]).order("name ASC")
Query(CostQuery)
.order('name')
# Q 90 : # CostQuery.where(["is_public = ? AND project_id IS NULL", true]).order("name ASC")
Query(CostQuery)
.order('name')
# Q 91 : # CostQuery.where(["user_id = ? AND is_public = ? AND (project_id IS NULL OR project_id = ?)", user, false, @project]).order("name ASC")
Query(CostQuery)
.order('name')
# Q 92 : # CostQuery.where(["user_id = ? AND is_public = ? AND project_id IS NULL", user, false]).order("name ASC")
Query(CostQuery)
.order('name')
# Q 93 : # CostRate.where(["cost_type_id = ? and valid_from <= ?", id, date]).order("valid_from DESC").first
Query(CostRate)
.order('valid_from')
.return_limit('1')
# Q 94 : # CostRate.where(["cost_type_id = ? and valid_from > ?", cost_type_id, reference_date]).order("valid_from ASC").first
Query(CostRate)
.order('valid_from')
.return_limit('1')
# Q 95 : # CostType.find(@unit_id)
Query(CostType)
.where("id = ?")
# Q 96 : # CostType.find(params[:cost_type_id])
Query(CostType)
.where("id = ?")
# Q 97 : # CostType.find(params[:cost_type_id])
Query(CostType)
.where("id = ?")
# Q 98 : # CostType.find(params[:cost_type_id])
Query(CostType)
.where("id = ?")
# Q 99 : # CostType.find(params[:id])
Query(CostType)
.where("id = ?")
# Q 100 : # CostType.find(unit_id)
Query(CostType)
.where("id = ?")
# Q 101 : # CostType.find(unit_id)
Query(CostType)
.where("id = ?")
# Q 102 : # CostType.find_by(default: true)
Query(CostType)
.where("default = ?")
# Q 103 : # CostType.find_by_id(cost_type_id)
Query(CostType)
.where("id = ?")
# Q 104 : # CostType.order("name").pluck(:name, :id)
Query(CostType)
.order('name')
.select('name')
.select('id')
# Q 105 : # CostType.order(sort_clause)
Query(CostType)
.order('')
# Q 106 : # CostType.select(:id).order("id ASC").select do |t|
#   
#   t.cost_entries.count > 0
#   
# end.collect(&:id)
Query(CostType)
.select('id')
.order('')
# Q 107 : # CostType.where(id: params[:cost_type_id]).first
Query(CostType)
.where("id = ?")
.return_limit('1')
# Q 108 : # CustomAction.find(params[:id])
Query(CustomAction)
.where("id = ?")
# Q 109 : # CustomField.find(params[:id])
Query(CustomField)
.where("id = ?")
# Q 110 : # CustomField.find_by(id: match[:id]).name
Query(CustomField)
.where("id = ?")
# Q 111 : # CustomField.where(field_format: "text").pluck(:id)
Query(CustomField)
.where("field_format = ?")
.select('id')
# Q 112 : # CustomField.where(type: "#{
# name}CustomField").order(:position)
Query(CustomField)
.where("type = ?")
.order('position')
# Q 113 : # CustomField.where(type: "#{
# name}CustomField", searchable: true).pluck(:id)
Query(CustomField)
.where("type = ?")
.where("searchable = ?")
.select('id')
# Q 114 : # CustomField.where(type: type)
Query(CustomField)
.where("type = ?")
# Q 115 : # CustomOption.find_by(id: value).value
Query(CustomOption)
.where("id = ?")
# Q 116 : # CustomOption.find_by(id: value.to_s)
Query(CustomOption)
.where("id = ?")
# Q 117 : # CustomOption.where(custom_field_id: custom_field_id).where.not(id: id).count
Query(CustomOption)
.where("custom_field_id = ?")
.where("id = ?")
# Q 118 : # CustomStyle.order("created_at DESC").first
Query(CustomStyle)
.order('created_at')
.return_limit('1')
# Q 119 : # CustomValue.where(custom_field_id: custom_option.custom_field_id, value: custom_option.id).delete_all
Query(CustomValue)
.where("custom_field_id = ?")
.where("value = ?")
# Q 120 : # CustomValue.where(custom_field_id: formattable_cfs)
Query(CustomValue)
.where("custom_field_id = ?")
# Q 121 : # CustomValue.where(customized: work_packages, custom_field: @cf).where.not(value: nil).where.not(value: "").pluck("SUM(value::#{
# cast})").first
Query(CustomValue)
.where("customized = ?")
.where("custom_field = ?")
.where("value = ?")
.where("value = ?")
.select('SUM(value::? )')
.return_limit('1')
# Q 122 : # CustomValue.where(id: cv_id).update_all(value: convert_textile_to_markdown(value))
Query(CustomValue)
.where("id = ?")
# Q 123 : # DefaultHourlyRate.pluck(:id)
Query(DefaultHourlyRate)
.select('id')
# Q 124 : # DefaultHourlyRate.pluck(:id)
Query(DefaultHourlyRate)
.select('id')
# Q 125 : # DefaultHourlyRate.where(["user_id = ? and valid_from > ?", user_id, reference_date]).order("valid_from ASC").first
Query(DefaultHourlyRate)
.order('valid_from')
.return_limit('1')
# Q 126 : # DefaultHourlyRate.where(user_id: @user).order("DefaultHourlyRate.valid_from desc").to_a
Query(DefaultHourlyRate)
.where("user_id = ?")
.order('valid_from')
# Q 127 : # DefaultHourlyRate.where(user_id: usr).order("DefaultHourlyRate.valid_from desc")
Query(DefaultHourlyRate)
.where("user_id = ?")
.order('valid_from')
# Q 128 : # DesignColor.find_by(variable: param_variable)
Query(DesignColor)
.where("variable = ?")
# Q 129 : # Document.visible.find(params[:id])
Query(Document)
.where("id = ?")
# Q 130 : # Document.visible.find_by_id(oid)
Query(Document)
.where("id = ?")
# Q 131 : # EnabledModule.where(name: "activity").map(&:project_id)
Query(EnabledModule)
.where("name = ?")
# Q 132 : # EnterpriseToken.allows_to?(:ldap_groups)
Query(EnterpriseToken)

# Q 133 : # EnterpriseToken.allows_to?(:multiselect_custom_fields)
Query(EnterpriseToken)

# Q 134 : # EnterpriseToken.allows_to?(:readonly_work_packages)
Query(EnterpriseToken)

# Q 135 : # EnterpriseToken.order("created_at DESC").first
Query(EnterpriseToken)
.order('created_at')
.return_limit('1')
# Q 136 : # Enumeration.find(params[:id])
Query(Enumeration)
.where("id = ?")
# Q 137 : # Enumeration.where(type: type).update_all(is_default: false)
Query(Enumeration)
.where("type = ?")
# Q 138 : # ExportCardConfiguration.find(params[:id])
Query(ExportCardConfiguration)
.where("id = ?")
# Q 139 : # ExportCardConfiguration.find(params[:id])
Query(ExportCardConfiguration)
.where("id = ?")
# Q 140 : # Grids::Widget.includes(:grid).where(grids: { type: "Grids::Overview" }).where(identifier: "custom_text")
Query(Grids::Widget)
.includes('grid')
.where("type = ?")
.where("identifier = ?")
# Q 141 : # Group.find(params[:id])
Query(Group)
.where("id = ?")
# Q 142 : # Group.find_by(id: oid)
Query(Group)
.where("id = ?")
# Q 143 : # Group.includes(:members, :users).find(params[:id])
Query(Group)
.includes('members')
.includes('users')
.where("id = ?")
# Q 144 : # Group.includes(:users).find(params[:id])
Query(Group)
.includes('users')
.where("id = ?")
# Q 145 : # Group.includes(:users).find(params[:id])
Query(Group)
.includes('users')
.where("id = ?")
# Q 146 : # Group.includes(:users).find(params[:id])
Query(Group)
.includes('users')
.where("id = ?")
# Q 147 : # Group.joins(:users).where(users_users: { id: vals }).pluck(:id).map(&:to_s)
Query(Group)
.joins('users')
.where("id = ?")
.select('id')
# Q 148 : # Group.order("lastname ASC")
Query(Group)
.order('lastname')
# Q 149 : # Group.where("lastname = ? AND id <> ?", groupname, id ? id : 0).count
Query(Group)

# Q 150 : # HourlyRate.where(["user_id = ? and project_id = ? and valid_from > ?", user_id, project_id, reference_date]).order("valid_from ASC").first
Query(HourlyRate)
.order('valid_from')
.return_limit('1')
# Q 151 : # HourlyRate.where(user_id: @user, project_id: @project).order("HourlyRate.valid_from desc")
Query(HourlyRate)
.where("user_id = ?")
.where("project_id = ?")
.order('valid_from')
# Q 152 : # HourlyRate.where(user_id: usr, project_id: permitted_projects).includes(:project).order("HourlyRate.valid_from desc").group_by(&:project)
Query(HourlyRate)
.where("user_id = ?")
.where("project_id = ?")
.includes('project')
.order('valid_from')
# Q 153 : # Impediment.default_scope.where(version_id: self, project_id: project)
Query(Impediment)
.where("version_id = ?")
.where("project_id = ?")
# Q 154 : # Impediment.find(params[:id])
Query(Impediment)
.where("id = ?")
# Q 155 : # IssuePriority.order("position DESC").pluck(:name, :id)
Query(IssuePriority)
.order('position')
.select('name')
.select('id')
# Q 156 : # IssuePriority.select(:id, :name).order(:name).map
Query(IssuePriority)
.select('id')
.select('name')
.order('name')
# Q 157 : # Journal.find(params[:id])
Query(Journal)
.where("id = ?")
# Q 158 : # Journal.find_by(id: journal_id)
Query(Journal)
.where("id = ?")
# Q 159 : # Journal.from("(#{
# sql_rough_group(journable, until_version, journal_id)}) #{
# table_name}").joins(Arel.sql("LEFT OUTER JOIN (#{
# sql_rough_group(journable, until_version, journal_id)}) addition
#                               ON #{
# sql_on_groups_belong_condition(table_name, "addition")}")).joins(Arel.sql("LEFT OUTER JOIN (#{
# sql_rough_group(journable, until_version, journal_id)}) predecessor
#                          ON #{
# sql_on_groups_belong_condition("predecessor", table_name)}")).where("predecessor.id IS NULL").order("COALESCE(addition.created_at, #{
# table_name}.created_at) ASC").order("#{
# version_projection} ASC").select(Arel.sql("#{
# table_name}.journable_id,
#                #{
# table_name}.journable_type,
#                #{
# table_name}.user_id,
#                #{
# table_name}.notes,
#                #{
# table_name}.id \"notes_id\",
#                #{
# table_name}.version \"notes_version\",
#                #{
# table_name}.activity_type,
#                COALESCE(addition.created_at, #{
# table_name}.created_at) \"created_at\",
#                COALESCE(addition.id, #{
# table_name}.id) \"id\",
#                #{
# version_projection} \"version\""))
Query(Journal)
.order('created_at')
.order('')
# Q 160 : # Journal.includes(:user).where(journable_type: WorkPackage.to_s).joins("INNER JOIN work_packages ON work_packages.id = journals.journable_id").joins("INNER JOIN projects ON work_packages.project_id = projects.id").joins("INNER JOIN users AS authors ON work_packages.author_id = authors.id").joins("INNER JOIN types ON work_packages.type_id = types.id").joins("INNER JOIN statuses ON work_packages.status_id = statuses.id").order(options[:order]).limit(options[:limit]).offset(options[:offset]).references(:users).merge(WorkPackage.visible)
Query(Journal)
.includes('user')
.where("journable_type = ?")
.order('')
.return_limit('')
# Q 161 : # Journal::AttachableJournal.where(journal_id: journal_ids).all.group_by(&:journal_id)
Query(Journal::AttachableJournal)
.where("journal_id = ?")
# Q 162 : # Journal::CustomizableJournal.where(journal_id: journal_ids).all.group_by(&:journal_id)
Query(Journal::CustomizableJournal)
.where("journal_id = ?")
# Q 163 : # Meeting.includes(:project, :author, :participants, :agenda, :minutes).find(params[:meeting_id])
Query(Meeting)
.includes('project')
.includes('author')
.includes('participants')
.includes('agenda')
.includes('minutes')
.where("id = ?")
# Q 164 : # Meeting.includes([:project, :author, { participants: :user }, :agenda, :minutes]).find(params[:id])
Query(Meeting)
.where("id = ?")
# Q 165 : # Member.find(membership_id)
Query(Member)
.where("id = ?")
# Q 166 : # Member.find(membership_params[:membership_id]).destroy
Query(Member)
.where("id = ?")
# Q 167 : # Member.find(params[:id])
Query(Member)
.where("id = ?")
# Q 168 : # Member.find_by(project_id: member.project_id, user_id: user.id)
Query(Member)
.where("project_id = ?")
.where("user_id = ?")
# Q 169 : # Member.find_by(project_id: member.project_id, user_id: user.id)
Query(Member)
.where("project_id = ?")
.where("user_id = ?")
# Q 170 : # Member.joins("INNER JOIN #{
# member_roles} umr
#                                     ON #{
# members}.id = umr.member_id
#                                   INNER JOIN #{
# member_roles} gmr
#                                     ON umr.inherited_from = gmr.id
#                                   INNER JOIN #{
# members} gm
#                                     ON gm.id = gmr.member_id AND gm.user_id = #{
# id}").distinct.pluck(:user_id, :project_id)
Query(Member)
.distinct('')
.select('user_id')
.select('project_id')
# Q 171 : # Member.where(id: Members::UserFilterCell.filter(filters)).includes(:roles, :principal, :member_roles)
Query(Member)
.where("id = ?")
.includes('roles')
.includes('principal')
.includes('member_roles')
# Q 172 : # Member.where(user_id: id).update_all(mail_notification: false)
Query(Member)
.where("user_id = ?")
# Q 173 : # Member.where(user_id: id, project_id: ids).update_all(mail_notification: true)
Query(Member)
.where("user_id = ?")
.where("project_id = ?")
# Q 174 : # Member.where(user_id: self.id).destroy_all
Query(Member)
.where("user_id = ?")
# Q 175 : # MemberRole.includes(member: :member_roles).where(inherited_from: members.joins(:member_roles).select("member_roles.id")).where(members: { user_id: user.id })
Query(MemberRole)
.where("inherited_from = ?")
.where("user_id = ?")
# Q 176 : # MemberRole.where(inherited_from: id).includes(member: %i{principal member_roles}).group_by(&:member)
Query(MemberRole)
.where("inherited_from = ?")
# Q 177 : # MenuItems::WikiMenuItem.find_by(name: slug, navigatable_id: wiki_id)
Query(MenuItems::WikiMenuItem)
.where("name = ?")
.where("navigatable_id = ?")
# Q 178 : # MenuItems::WikiMenuItem.find_by(navigatable_id: wiki.id, name: previous_slug)
Query(MenuItems::WikiMenuItem)
.where("navigatable_id = ?")
.where("name = ?")
# Q 179 : # MenuItems::WikiMenuItem.where(navigatable_id: wiki.id, name: @page.slug).first_or_initialize(title: @page_title)
Query(MenuItems::WikiMenuItem)
.where("navigatable_id = ?")
.where("name = ?")
# Q 180 : # Message.find_by(id: message_id)
Query(Message)
.where("id = ?")
# Q 181 : # Message.includes(:parent).find_by(id: oid)
Query(Message)
.where("id = ?")
# Q 182 : # Message.visible(user).find(params[:id])
Query(Message)
.where("id = ?")
# Q 183 : # Message.where(id: root.id)
Query(Message)
.where("id = ?")
# Q 184 : # Message.where(parent_id: root.id)
Query(Message)
.where("parent_id = ?")
# Q 185 : # News.find(params[:id].to_i)
Query(News)
.where("id = ?")
# Q 186 : # Principal.active_or_registered.like(criteria).not_in_project(self).limit(limit)
Query(Principal)
.return_limit('')
# Q 187 : # Principal.active_or_registered.select(:id, :firstname, :lastname, :type).order_by_name
Query(Principal)
.select('id')
.select('firstname')
.select('lastname')
.select('type')
# Q 188 : # Principal.find(@principal_role.principal_id)
Query(Principal)
.where("id = ?")
# Q 189 : # Principal.find(principle_role_params[:principal_id])
Query(Principal)
.where("id = ?")
# Q 190 : # Principal.find_by(lastname: name).try(:id)
Query(Principal)
.where("lastname = ?")
.select('id')
# Q 191 : # Principal.includes(:members)
Query(Principal)
.includes('members')
# Q 192 : # Principal.where(id: no_me_values).to_a
Query(Principal)
.where("id = ?")
# Q 193 : # Principal.where(type: values)
Query(Principal)
.where("type = ?")
# Q 194 : # PrincipalRole.find(params[:id])
Query(PrincipalRole)
.where("id = ?")
# Q 195 : # Project.active.has_module(:repository).find_by!(identifier: params[:id])
Query(Project)
.where("identifier = ?")
# Q 196 : # Project.active.has_module(:repository).includes(:repository).each
Query(Project)
.includes('repository')
# Q 197 : # Project.active.has_module(:repository).includes(:repository).references(:repositories)
Query(Project)
.includes('repository')
# Q 198 : # Project.active.has_module(:repository).includes(:repository).references(:repositories).order("identifier")
Query(Project)
.includes('repository')
.order('identifier')
# Q 199 : # Project.allowed_to(User.current, :view_time_entries).select(:id).arel
Query(Project)
.select('id')
# Q 200 : # Project.allowed_to(User.current, :view_work_package_watchers).select("Project.id")
Query(Project)
.select('Project.id')
# Q 201 : # Project.allowed_to(user, :view_work_packages).joins(:work_package_custom_fields).where(custom_fields: { id: custom_option.custom_field_id }).exists?
Query(Project)
.joins('work_package_custom_fields')
.where("id = ?")
.return_limit('1')
# Q 202 : # Project.allowed_to(user, :view_hourly_rates).select(:id)
Query(Project)
.select('id')
# Q 203 : # Project.allowed_to(user, :view_hourly_rates).select(:id)
Query(Project)
.select('id')
# Q 204 : # Project.allowed_to(user, :view_own_hourly_rate).select(:id)
Query(Project)
.select('id')
# Q 205 : # Project.allowed_to(user, :view_own_hourly_rate).select(:id)
Query(Project)
.select('id')
# Q 206 : # Project.allowed_to(user, action).pluck(:id)
Query(Project)
.select('id')
# Q 207 : # Project.allowed_to(user, view_allowed_entries_permission).select(:id)
Query(Project)
.select('id')
# Q 208 : # Project.allowed_to(user, view_allowed_own_entries_permission).select(:id)
Query(Project)
.select('id')
# Q 209 : # Project.allowed_to(user, view_rates_permissions).select(:id)
Query(Project)
.select('id')
# Q 210 : # Project.allowed_to(user, watchable_class.acts_as_watchable_permission).pluck(:id)
Query(Project)
.select('id')
# Q 211 : # Project.find(@project.id)
Query(Project)
.where("id = ?")
# Q 212 : # Project.find(e.map(&:project_id).compact)
Query(Project)
.where("id = ?")
# Q 213 : # Project.find(id)
Query(Project)
.where("id = ?")
# Q 214 : # Project.find(params[:id])
Query(Project)
.where("id = ?")
# Q 215 : # Project.find(params[:id])
Query(Project)
.where("id = ?")
# Q 216 : # Project.find(params[:id])
Query(Project)
.where("id = ?")
# Q 217 : # Project.find(params[:id])
Query(Project)
.where("id = ?")
# Q 218 : # Project.find(params[:id])
Query(Project)
.where("id = ?")
# Q 219 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 220 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 221 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 222 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 223 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 224 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 225 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 226 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 227 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 228 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 229 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 230 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 231 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 232 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 233 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 234 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 235 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 236 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 237 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 238 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 239 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 240 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 241 : # Project.find(project)
Query(Project)
.where("id = ?")
# Q 242 : # Project.find(project)
Query(Project)
.where("id = ?")
# Q 243 : # Project.find(project_id_from_params)
Query(Project)
.where("id = ?")
# Q 244 : # Project.find(project_id_was)
Query(Project)
.where("id = ?")
# Q 245 : # Project.find(value).descendants.map
Query(Project)
.where("id = ?")
# Q 246 : # Project.find(value).descendants.map
Query(Project)
.where("id = ?")
# Q 247 : # Project.find(value.to_i)
Query(Project)
.where("id = ?")
# Q 248 : # Project.find_by(id: oid)
Query(Project)
.where("id = ?")
# Q 249 : # Project.find_by(id: project_id.to_i)
Query(Project)
.where("id = ?")
# Q 250 : # Project.find_by(identifier: get_keyword(:project))
Query(Project)
.where("identifier = ?")
# Q 251 : # Project.find_by(identifier: params[:repository])
Query(Project)
.where("identifier = ?")
# Q 252 : # Project.find_by(identifier: project_identifier)
Query(Project)
.where("identifier = ?")
# Q 253 : # Project.find_by(name: project_identifier)
Query(Project)
.where("name = ?")
# Q 254 : # Project.from("Project projects").joins("LEFT JOIN (#{
# wiki_storage_sql}) wiki ON projects.id = wiki.project_id").joins("LEFT JOIN (#{
# work_package_sql}) wp ON projects.id = wp.project_id").joins("LEFT JOIN Repository repos ON repos.project_id = projects.id").select("projects.*").select("wiki.filesize AS wiki_required_space").select("wp.filesize AS work_package_required_space").select("repos.required_storage_bytes AS repositories_required_space").select("#{
# required_disk_space_sum} AS required_disk_space")
Query(Project)
.select('projects.*')
.select('wiki.filesize AS wiki_required_space')
.select('wp.filesize AS work_package_required_space')
.select('repos.required_storage_bytes AS repositories_required_space')
.select('?  AS required_disk_space')
# Q 255 : # Project.from("(#{
# Project.with_required_storage.to_sql}) sub").sum(:required_disk_space)
Query(Project)

# Q 256 : # Project.has_module(:costs_module).active.visible.order(:name)
Query(Project)
.order('name')
# Q 257 : # Project.newest.first
Query(Project)
.return_limit('1')
# Q 258 : # Project.select("projects.*").select("activity.latest_activity_at").joins("LEFT JOIN (#{
# latest_activity_sql}) activity ON projects.id = activity.project_id")
Query(Project)
.select('projects.*')
.select('activity.latest_activity_at')
# Q 259 : # Project.visible.find_by(identifier: project_identifier)
Query(Project)
.where("identifier = ?")
# Q 260 : # Project.visible.newest.take(3)
Query(Project)
.return_limit('1')
# Q 261 : # Project.visible.pluck(:name, :identifier)
Query(Project)
.select('name')
.select('identifier')
# Q 262 : # Project.visible.select { |p|
#   
#   User.currentmember_of? p
# }.sort_by(&:to_s)
Query(Project)

# Q 263 : # Project.where(id: Project.allowed_to(User.current, :view_time_entries).select(:id)).or(Project.where(id: Project.allowed_to(User.current, :view_own_time_entries).select(:id)))
Query(Project)
.where("id = ?")
# Q 264 : # Project.where(id: Project.allowed_to(user, :manage_members))
Query(Project)
.where("id = ?")
# Q 265 : # Project.where(id: Project.allowed_to(user, :view_members))
Query(Project)
.where("id = ?")
# Q 266 : # Project.where(id: manage_allowed)
Query(Project)
.where("id = ?")
# Q 267 : # Project.where(id: project_id)
Query(Project)
.where("id = ?")
# Q 268 : # Project.where(id: view_allowed)
Query(Project)
.where("id = ?")
# Q 269 : # Project.where(id: view_allowed).or(Project.where(id: manage_allowed))
Query(Project)
.where("id = ?")
# Q 270 : # ProjectCustomField.visible.find_by_id(id)
Query(ProjectCustomField)
.where("id = ?")
# Q 271 : # Query.find_by(id: Type::QueryGroup.query_attribute_id(first_attribute))
Query(Query)
.where("id = ?")
# Q 272 : # Query.where(project: @project).find(params[:query_id])
Query(Query)
.where("project = ?")
.where("id = ?")
# Q 273 : # Relation.blocks.joins(:to).where(work_packages: { type_id: all_types }).select(:to_id).to_sql
Query(Relation)
.where("type_id = ?")
.select('to_id')
# Q 274 : # Relation.direct.send(relation_type).where(from_id: values).select(:to_id)
Query(Relation)
.where("from_id = ?")
.select('to_id')
# Q 275 : # Relation.direct.send(relation_type).where(to_id: values).select(:from_id)
Query(Relation)
.where("to_id = ?")
.select('from_id')
# Q 276 : # Relation.from(sql).map(&:successor_soonest_start).compact.max
Query(Relation)
.where("id != 0")
# Q 277 : # Relation.hierarchy.group(:to_id).select(:to_id, "MAX(hierarchy) AS depth")
Query(Relation)
.group('to_id')
.select('MAX(hierarchy) AS depth')
# Q 278 : # Relation.hierarchy.select(:to_id).to_sql
Query(Relation)
.select('to_id')
# Q 279 : # Relation.hierarchy.where(from_id: following.select(:from_id)).select("to_id common_id")
Query(Relation)
.where("from_id = ?")
.select('to_id common_id')
# Q 280 : # Relation.hierarchy.where(to: to, from: from).where.not(id: id)
Query(Relation)
.where("to = ?")
.where("from = ?")
.where("id = ?")
# Q 281 : # Relation.of_work_package(self).find(id)
Query(Relation)
.where("id = ?")
# Q 282 : # Relation.where(from: self).where(to: WorkPackage.visible(user))
Query(Relation)
.where("from = ?")
.where("to = ?")
# Q 283 : # Relation.where(from_id: self.ancestors_relations.select(:from_id)).follows
Query(Relation)
.where("from_id = ?")
# Q 284 : # Relation.where(from_id: self.id).follows
Query(Relation)
.where("from_id = ?")
# Q 285 : # Relation.where(to: self).where(from: WorkPackage.visible(user))
Query(Relation)
.where("to = ?")
.where("from = ?")
# Q 286 : # Relation.where(to: work_packages).hierarchy_or_follows
Query(Relation)
.where("to = ?")
# Q 287 : # Relation.with_type_columns_not(hierarchy: 0).select(:to_id).where(from_id: work_package.id)
Query(Relation)
.select('to_id')
.where("from_id = ?")
# Q 288 : # Role.find(params[:id])
Query(Role)
.where("id = ?")
# Q 289 : # Role.find(params[:id])
Query(Role)
.where("id = ?")
# Q 290 : # Role.find(params[:id])
Query(Role)
.where("id = ?")
# Q 291 : # Role.find(params[:role_id])
Query(Role)
.where("id = ?")
# Q 292 : # Role.find_by(id: params[:role_id])
Query(Role)
.where("id = ?")
# Q 293 : # Role.find_by(id: params[:source_role_id].to_i)
Query(Role)
.where("id = ?")
# Q 294 : # Role.order("builtin, position")
Query(Role)
.order('builtin, position')
# Q 295 : # Role.order("builtin, position")
Query(Role)
.order('builtin, position')
# Q 296 : # Role.order("builtin, position")
Query(Role)
.order('builtin, position')
# Q 297 : # Role.order("builtin, position")
Query(Role)
.order('builtin, position')
# Q 298 : # Role.pluck(:name, :id).map
Query(Role)
.select('name')
.select('id')
# Q 299 : # Role.where(id: params[:target_role_ids])
Query(Role)
.where("id = ?")
# Q 300 : # Role.where(id: possibly_seperated_ids_for_entity(params[:member], :role))
Query(Role)
.where("id = ?")
# Q 301 : # Setting.find_by(name: "available_languages").value
Query(Setting)
.where("name = ?")
# Q 302 : # Setting.mail_handler_body_delimiters.to_s.split(/[\r\n]+/).reject(&:blank?).map
Query(Setting)

# Q 303 : # Setting.pluck(:name, :value)
Query(Setting)
.select('name')
.select('value')
# Q 304 : # Sprint.apply_to(project).with_status_open.displayed_left(project).order_by_date
Query(Sprint)

# Q 305 : # Sprint.apply_to(project).with_status_open.displayed_right(project).order_by_name
Query(Sprint)

# Q 306 : # Sprint.find(@sprint_id)
Query(Sprint)
.where("id = ?")
# Q 307 : # Sprint.find(@sprint_id)
Query(Sprint)
.where("id = ?")
# Q 308 : # Sprint.find(params[:id])
Query(Sprint)
.where("id = ?")
# Q 309 : # Status.find(id).is_closed?
Query(Status)
.where("id = ?")
# Q 310 : # Status.find(params[:id])
Query(Status)
.where("id = ?")
# Q 311 : # Status.find(params[:id])
Query(Status)
.where("id = ?")
# Q 312 : # Status.find(params[:id])
Query(Status)
.where("id = ?")
# Q 313 : # Status.find(params[:id])
Query(Status)
.where("id = ?")
# Q 314 : # Status.find_by(id: Setting.commit_fix_status_id.to_i)
Query(Status)
.where("id = ?")
# Q 315 : # Status.find_by(id: o.status_id)
Query(Status)
.where("id = ?")
# Q 316 : # Status.find_by(id: status_id)
Query(Status)
.where("id = ?")
# Q 317 : # Status.find_by(id: status_id)
Query(Status)
.where("id = ?")
# Q 318 : # Status.find_by(id: status_id_was)
Query(Status)
.where("id = ?")
# Q 319 : # Status.find_by(id: status_id_was)
Query(Status)
.where("id = ?")
# Q 320 : # Status.order("name").pluck(:name, :id)
Query(Status)
.order('name')
.select('name')
.select('id')
# Q 321 : # Status.order("position ASC")
Query(Status)
.order('position')
# Q 322 : # Status.select(:id, :name).order(:name).map
Query(Status)
.select('id')
.select('name')
.order('name')
# Q 323 : # Status.where(["default_done_ratio >= 0"]).each
Query(Status)

# Q 324 : # Status.where(is_closed: false).select(:id).map(&:id)
Query(Status)
.where("is_closed = ?")
.select('id')
# Q 325 : # Status.where(name: status_names).to_a
Query(Status)
.where("name = ?")
# Q 326 : # Story.find(Integer(id))
Query(Story)
.where("id = ?")
# Q 327 : # Story.find(id)
Query(Story)
.where("id = ?")
# Q 328 : # Story.find(id)
Query(Story)
.where("id = ?")
# Q 329 : # Story.find(params[:id])
Query(Story)
.where("id = ?")
# Q 330 : # Story.find(story_work_package.id)
Query(Story)
.where("id = ?")
# Q 331 : # Story.where(Story.condition(project_id, sprint_id)).joins(:status).order(Arel.sql(Story::ORDER)).offset(rank - 1).first
Query(Story)
.joins('status')
.order('')
.return_limit('1')
# Q 332 : # SynchronizedGroup.find(params[:ldap_group_id])
Query(SynchronizedGroup)
.where("id = ?")
# Q 333 : # SynchronizedGroup.includes(:auth_source, :group)
Query(SynchronizedGroup)
.includes('auth_source')
.includes('group')
# Q 334 : # Task.children_of(@story_ids).order("updated_at DESC").first
Query(Task)
.order('updated_at')
.return_limit('1')
# Q 335 : # Task.children_of(story_id).order(:position).each_with_index
Query(Task)
.order('position')
# Q 336 : # Task.find(id)
Query(Task)
.where("id = ?")
# Q 337 : # Task.find(task_params[:id])
Query(Task)
.where("id = ?")
# Q 338 : # TimeEntry.find(params[:id])
Query(TimeEntry)
.where("id = ?")
# Q 339 : # TimeEntry.includes(:work_package).where(work_packages: { version_id: id }).sum(:hours).to_f
Query(TimeEntry)
.includes('work_package')
.where("version_id = ?")
# Q 340 : # TimeEntry.visible.includes(:project).where(cond).sum(:hours).to_f
Query(TimeEntry)
.includes('project')
# Q 341 : # TimeEntry.visible.includes(:project, :activity, :user, work_package: %i{type assigned_to priority}).references(:projects).where(cond.conditions).distinct(false).order(sort_clause)
Query(TimeEntry)
.includes('project')
.includes('activity')
.includes('user')
.distinct('')
.order('')
# Q 342 : # TimeEntry.where(spent_on: date, user: user)
Query(TimeEntry)
.where("spent_on = ?")
.where("user = ?")
# Q 343 : # TimeEntryActivitiesProject.where(project_id: project.id).select(:activity_id)
Query(TimeEntryActivitiesProject)
.where("project_id = ?")
.select('activity_id')
# Q 344 : # TimeEntryActivity.order("name").pluck(:name, :id)
Query(TimeEntryActivity)
.order('name')
.select('name')
.select('id')
# Q 345 : # TimeEntryActivity.shared.where(id: values)
Query(TimeEntryActivity)
.where("id = ?")
# Q 346 : # TimeEntryActivity.where(active: true).where.not(id: of_project(project).where(active: false))
Query(TimeEntryActivity)
.where("active = ?")
.where("id = ?")
# Q 347 : # TimeEntryActivity.where(id: of_project(project).where(active: true))
Query(TimeEntryActivity)
.where("id = ?")
# Q 348 : # TimeEntryActivity.where(parent_id: values)
Query(TimeEntryActivity)
.where("parent_id = ?")
# Q 349 : # Type.order("name").pluck(:name, :id)
Query(Type)
.order('name')
.select('name')
.select('id')
# Q 350 : # Type.pluck(:name, :id)
Query(Type)
.select('name')
.select('id')
# Q 351 : # Type.where(id: backlogs_ids).order("position ASC")
Query(Type)
.where("id = ?")
.order('position')
# Q 352 : # User.active.find(params[:user_id])
Query(User)
.where("id = ?")
# Q 353 : # User.active.find_by(id: session[:user_id])
Query(User)
.where("id = ?")
# Q 354 : # User.active.find_by_login("admin").try(:current_password).try(:matches_plaintext?, "admin")
Query(User)
.where("login = ?")
.select('current_password')
.select('admin')
# Q 355 : # User.active.newest.take(3)
Query(User)
.return_limit('1')
# Q 356 : # User.active_or_registered.select(:id, :firstname, :lastname, :type).order_by_name.map
Query(User)
.select('id')
.select('firstname')
.select('lastname')
.select('type')
# Q 357 : # User.admin.first
Query(User)
.return_limit('1')
# Q 358 : # User.allowed(watchable_class.acts_as_watchable_permission, project).pluck(:id)
Query(User)
.select('id')
# Q 359 : # User.find(params[:id])
Query(User)
.where("id = ?")
# Q 360 : # User.find(params[:id])
Query(User)
.where("id = ?")
# Q 361 : # User.find(params[:id])
Query(User)
.where("id = ?")
# Q 362 : # User.find(params[:id])
Query(User)
.where("id = ?")
# Q 363 : # User.find(params[:password_change_user_id])
Query(User)
.where("id = ?")
# Q 364 : # User.find(params[:user_id])
Query(User)
.where("id = ?")
# Q 365 : # User.find(session[:authenticated_user_id])
Query(User)
.where("id = ?")
# Q 366 : # User.find(session[:authenticated_user_id])
Query(User)
.where("id = ?")
# Q 367 : # User.find(session[:authenticated_user_id])
Query(User)
.where("id = ?")
# Q 368 : # User.find(session[:authenticated_user_id])
Query(User)
.where("id = ?")
# Q 369 : # User.find(user_id)
Query(User)
.where("id = ?")
# Q 370 : # User.find(user_id)
Query(User)
.where("id = ?")
# Q 371 : # User.find(user_id)
Query(User)
.where("id = ?")
# Q 372 : # User.find(user_ids)
Query(User)
.where("id = ?")
# Q 373 : # User.find_by(id: id)
Query(User)
.where("id = ?")
# Q 374 : # User.find_by(id: oid)
Query(User)
.where("id = ?")
# Q 375 : # User.find_by(id: user_id.to_i)
Query(User)
.where("id = ?")
# Q 376 : # User.find_by(id: value)
Query(User)
.where("id = ?")
# Q 377 : # User.find_by(identity_url: user_attributes[:identity_url])
Query(User)
.where("identity_url = ?")
# Q 378 : # User.find_by(login: login).attributes.slice("firstname", "lastname", "mail").merge(auth_source_id: id)
Query(User)
.where("login = ?")
# Q 379 : # User.find_by(login: oid)
Query(User)
.where("login = ?")
# Q 380 : # User.find_by(login: user_attributes[:login], identity_url: nil, auth_source_id: nil)
Query(User)
.where("login = ?")
.where("identity_url = ?")
.where("auth_source_id = ?")
# Q 381 : # User.find_by_api_key(key)
Query(User)
.where("api_key = ?")
# Q 382 : # User.find_by_id(payload["open_project_user_id"])
Query(User)
.where("id = ?")
# Q 383 : # User.find_by_id(user_id)
Query(User)
.where("id = ?")
# Q 384 : # User.find_by_login(login)
Query(User)
.where("login = ?")
# Q 385 : # User.find_by_login(username)
Query(User)
.where("login = ?")
# Q 386 : # User.find_by_login(username)
Query(User)
.where("login = ?")
# Q 387 : # User.find_by_login(value)
Query(User)
.where("login = ?")
# Q 388 : # User.find_by_mail(email)
Query(User)
.where("mail = ?")
# Q 389 : # User.find_by_mail(mail)
Query(User)
.where("mail = ?")
# Q 390 : # User.find_by_mail(sender_email)
Query(User)
.where("mail = ?")
# Q 391 : # User.find_by_rss_key(params[:key])
Query(User)
.where("rss_key = ?")
# Q 392 : # User.in_group(values).select(:id).to_sql
Query(User)
.select('id')
# Q 393 : # User.includes(:memberships).where(id: params[:user_ids])
Query(User)
.where("id = ?")
# Q 394 : # User.joins(:groups).where(groups_users: { id: vals }).pluck(:id).map(&:to_s)
Query(User)
.where("id = ?")
.select('id')
# Q 395 : # User.not_builtin.group(:status).count.to_hash
Query(User)
.group('status')
# Q 396 : # User.where(id: additional_user_ids)
Query(User)
.where("id = ?")
# Q 397 : # User.where(id: e.map(&:author_id).compact).to_a
Query(User)
.where("id = ?")
# Q 398 : # User.where(id: new_members)
Query(User)
.where("id = ?")
# Q 399 : # User.where(id: params[:user_id]).first
Query(User)
.where("id = ?")
.return_limit('1')
# Q 400 : # User.where(login: login).where.not(auth_source_id: nil).first
Query(User)
.where("login = ?")
.where("auth_source_id = ?")
.return_limit('1')
# Q 401 : # User.where(login: members)
Query(User)
.where("login = ?")
# Q 402 : # User.where(mail: all_mails).includes(:memberships)
Query(User)
.where("mail = ?")
# Q 403 : # User.within_group([]).select(:id).to_sql
Query(User)
.select('id')
# Q 404 : # Version.find(params[:id])
Query(Version)
.where("id = ?")
# Q 405 : # Version.find_by(id: oid)
Query(Version)
.where("id = ?")
# Q 406 : # Version.find_by(id: value)
Query(Version)
.where("id = ?")
# Q 407 : # Version.find_by(id: version_id_was)
Query(Version)
.where("id = ?")
# Q 408 : # Version.find_by_id(version_id)
Query(Version)
.where("id = ?")
# Q 409 : # Version.includes(:project).references(:projects)
Query(Version)
.includes('project')
# Q 410 : # Version.order_by_name
Query(Version)

# Q 411 : # Version.where(project_id: Project.visible.map(&:id))
Query(Version)
.where("project_id = ?")
# Q 412 : # WikiPage.find_by(id: params[:wiki_page][:id])
Query(WikiPage)
.where("id = ?")
# Q 413 : # WikiPage.find_by(wiki_id: @wiki.id, slug: slug)
Query(WikiPage)
.where("wiki_id = ?")
.where("slug = ?")
# Q 414 : # WikiPage.visible(user).find(params[:id])
Query(WikiPage)
.where("id = ?")
# Q 415 : # WorkPackage.find(@parent_id)
Query(WorkPackage)
.where("id = ?")
# Q 416 : # WorkPackage.find(@work_package.parent_id).in_backlogs_type?
Query(WorkPackage)
.where("id = ?")
# Q 417 : # WorkPackage.find(params[:issue_id])
Query(WorkPackage)
.where("id = ?")
# Q 418 : # WorkPackage.find(params[:work_package_id])
Query(WorkPackage)
.where("id = ?")
# Q 419 : # WorkPackage.find(params[:work_package_id])
Query(WorkPackage)
.where("id = ?")
# Q 420 : # WorkPackage.find(params[:work_package_id])
Query(WorkPackage)
.where("id = ?")
# Q 421 : # WorkPackage.find(params[:work_package_id])
Query(WorkPackage)
.where("id = ?")
# Q 422 : # WorkPackage.find(params[:work_package_id])
Query(WorkPackage)
.where("id = ?")
# Q 423 : # WorkPackage.find(params[:work_package_id])
Query(WorkPackage)
.where("id = ?")
# Q 424 : # WorkPackage.find(value.to_i)
Query(WorkPackage)
.where("id = ?")
# Q 425 : # WorkPackage.find(values.first)
Query(WorkPackage)
.where("id = ?")
# Q 426 : # WorkPackage.find_by(id: parent_id)
Query(WorkPackage)
.where("id = ?")
# Q 427 : # WorkPackage.find_by(id: work_package_id)
Query(WorkPackage)
.where("id = ?")
# Q 428 : # WorkPackage.find_by(subject: attributes[:parent])
Query(WorkPackage)
.where("subject = ?")
# Q 429 : # WorkPackage.find_by_id(work_package_id)
Query(WorkPackage)
.where("id = ?")
# Q 430 : # WorkPackage.includes(:project).find_by(id: id.to_i)
Query(WorkPackage)
.where("id = ?")
# Q 431 : # WorkPackage.includes(:project).where(id: params[:work_package_id] || params[:ids]).order("id ASC")
Query(WorkPackage)
.where("id = ?")
.order('')
# Q 432 : # WorkPackage.includes(:status, :assigned_to, :project, :type).where("Status.is_closed = false AND WorkPackage.due_date <= ?", due_date).where("WorkPackage.assigned_to_id IS NOT NULL").where("Project.active = #{
# true}")
Query(WorkPackage)

# Q 433 : # WorkPackage.joins(:parent_relation).where(relations: { from_id: work_packages.map(&:id) }).select(:id, :subject, :project_id, :from_id).group_by(&:from_id).to_h
Query(WorkPackage)
.where("from_id = ?")
.select('id')
.select('subject')
.select('project_id')
.select('from_id')
# Q 434 : # WorkPackage.joins(:project).merge(Project.allowed_to(user, :edit_time_entries)).find_by(id: ids)
Query(WorkPackage)
.where("id = ?")
# Q 435 : # WorkPackage.joins(query.join_sources).group(:id)
Query(WorkPackage)
.group('id')
# Q 436 : # WorkPackage.visible(User.current).select(:id).to_sql
Query(WorkPackage)
.select('id')
# Q 437 : # WorkPackage.visible(user).find_by(id: params[:id])
Query(WorkPackage)
.where("id = ?")
# Q 438 : # WorkPackage.where("category_id = #{
# id}").update_all("category_id = #{
# reassign_to.id}")
Query(WorkPackage)

# Q 439 : # WorkPackage.where(assigned_to_id: id).update_all(assigned_to_id: deleted_user.id)
Query(WorkPackage)
.where("assigned_to_id = ?")
# Q 440 : # WorkPackage.where(id: @ids).includes(:ancestors).where(ancestors_work_packages: { project_id: Project.allowed_to(user, :view_work_packages) }).order("relations.hierarchy DESC")
Query(WorkPackage)
.where("id = ?")
.where("project_id = ?")
.order('hierarchy')
# Q 441 : # WorkPackage.where(id: blocks_ids).pluck(:version_id).uniq
Query(WorkPackage)
.where("id = ?")
.select('version_id')
.distinct('')
# Q 442 : # WorkPackage.where(id: work_packages.map(&:id).uniq).left_joins(:status, :author, :responsible, :assigned_to, :version, :priority, :category, :type).pluck("work_packages.id", Arel.sql(md5_concat.squish)).to_h
Query(WorkPackage)
.where("id = ?")
.select('work_packages.id')
# Q 443 : # WorkPackage.where(project_id: Project.allowed_to(User.current, :edit_own_time_entries))
Query(WorkPackage)
.where("project_id = ?")
# Q 444 : # WorkPackage.where(project_id: Project.allowed_to(User.current, :edit_time_entries))
Query(WorkPackage)
.where("project_id = ?")
# Q 445 : # WorkPackage.where(project_id: Project.allowed_to(User.current, :log_time))
Query(WorkPackage)
.where("project_id = ?")
# Q 446 : # WorkPackage.where(project_id: Project.allowed_to(User.current, :view_work_packages)).order(:id).pluck(:id, :subject)
Query(WorkPackage)
.where("project_id = ?")
.order('')
.select('id')
.select('subject')
# Q 447 : # WorkPackage.where(status_id: id).exists?
Query(WorkPackage)
.where("status_id = ?")
.return_limit('1')
# Q 448 : # WorkPackage.where(type_id: id).any?
Query(WorkPackage)
.where("type_id = ?")
# Q 449 : # WorkPackage::SpentTime.new(user, self).scope.where(id: id).pluck("SUM(hours)").first
Query(WorkPackage::SpentTime)
.where("id = ?")
.select('SUM(hours)')
.return_limit('1')
# Q 450 : # WorkPackageCustomField.find_by(id: match_result[1])
Query(WorkPackageCustomField)
.where("id = ?")
# Q 451 : # WorkPackageCustomField.includes(:custom_options).all.each
Query(WorkPackageCustomField)
.includes('custom_options')
# Q 452 : # WorkPackageCustomField.includes(:types).all
Query(WorkPackageCustomField)
.includes('types')
# Q 453 : # WorkPackageCustomField.left_joins(:projects, :types).where(projects: { id: work_packages.map(&:project_id).uniq }, types: { id: work_packages.map(&:type_id).uniq }).or(WorkPackageCustomField.left_joins(:projects, :types).references(:projects, :types).where(is_for_all: true)).select("projects.id project_id", "types.id type_id", "custom_fields.id custom_field_id").to_sql
Query(WorkPackageCustomField)
.where("id = ?")
.where("id = ?")
.select('projects.id project_idtypes.id type_idcustom_fields.id custom_field_id')
# Q 454 : # WorkPackageCustomField.order("CustomField.position")
Query(WorkPackageCustomField)
.order('position')
# Q 455 : # WorkPackageCustomField.order("CustomField.position")
Query(WorkPackageCustomField)
.order('position')
# Q 456 : # WorkPackageCustomField.order(:name).map
Query(WorkPackageCustomField)
.order('name')
# Q 457 : # WorkPackageCustomField.pluck("max(updated_at), count(id)").flatten
Query(WorkPackageCustomField)
.select('max(updated_at), count(id)')
# Q 458 : # WorkPackageCustomField.visible_by_user(user).pluck(:id).map
Query(WorkPackageCustomField)
.select('id')
# Q 459 : # WorkPackageCustomField.where(field_format: "user").pluck(:id)
Query(WorkPackageCustomField)
.where("field_format = ?")
.select('id')
# Q 460 : # WorkPackageCustomField.where(field_format: SQL_TYPES.keys).map
Query(WorkPackageCustomField)
.where("field_format = ?")
# Q 461 : # WorkPackageCustomField.where(id: usages.map { |u|
#   
#   u["custom_field_id"]
# }.uniq).map { |cf|
#   
#   [cf.id, cf]
# }.to_h
Query(WorkPackageCustomField)
.where("id = ?")
# Q 462 : # Workflow.includes(:new_status).where(role_id: user.roles_for_project(project).map(&:id)).map(&:new_status).compact.uniq.sort
Query(Workflow)
.includes('new_status')
.where("role_id = ?")
.where("id != 0")
.distinct('')
# Q 463 : # Workflow.includes([:new_status, :old_status]).where(role_id: User.current.roles_for_project(@project).map(&:id), type_id: story_types.map(&:id))
Query(Workflow)
.where("role_id = ?")
.where("type_id = ?")
# Q 464 : # Workflow.where(old_status_id: id).or(Workflow.where(new_status_id: id)).delete_all
Query(Workflow)
.where("old_status_id = ?")
# Q 465 : # Workflow.where(old_status_id: old_status_id, type_id: type_id, role_id: role_ids)
Query(Workflow)
.where("old_status_id = ?")
.where("type_id = ?")
.where("role_id = ?")
# Q 466 : # Workflow.where(role_id: @role.id, type_id: @type.id)
Query(Workflow)
.where("role_id = ?")
.where("type_id = ?")
# Q 467 : # all.find
Query(All)
.where("id = ?")
# Q 468 : # attachments.find_by_description("avatar")
Query(Attachment)
.where("description = ?")
# Q 469 : # attachments.find_by_description("snapshot")
Query(Attachment)
.where("description = ?")
# Q 470 : # attachments.find_by_description(key.to_s)
Query(Attachment)
.where("description = ?")
# Q 471 : # attachments.reorder("created_at DESC").first
Query(Attachment)
.order('created_at')
.return_limit('1')
# Q 472 : # attachments.select(&:persisted?)
Query(Attachment)
.select('persisted?')
# Q 473 : # available_values(reverse_search: true).find
Query(Base)
.where("id = ?")
# Q 474 : # base.where(["LOWER(name) LIKE :s", { s: s }]).order("name")
Query(Base)
.order('name')
# Q 475 : # burndown.series(:all).map { |s|
#   
#   s.first.to_s
# }.sort.each
Query(Burndown)

# Q 476 : # capture_svn(cmd).lines.map(&:strip).select { |line|
#   
#   line =~ /\Ar\d+ \|/
# }.map { |line|
#   
#   line.split(" ").first.sub(/\Ar/, "")
# }.first
Query(Subversion)
.return_limit('1')
# Q 477 : # changesets.includes(:user).order("Changeset.committed_on DESC, Changeset.id DESC").limit(limit)
Query(Changeset)
.includes('user')
.order('committed_on')
.return_limit('')
# Q 478 : # changesets.includes(:user).references(:users).find_by(committer: committer)
Query(Changeset)
.includes('user')
.where("committer = ?")
# Q 479 : # changesets.includes(changeset: :user).where(["path = ?", path.with_leading_slash]).order("Changeset.committed_on DESC, Changeset.id DESC").limit(limit).map(&:changeset)
Query(Changeset)
.includes('user')
.order('committed_on')
.return_limit('')
# Q 480 : # changesets.order("committed_on DESC").first
Query(Changeset)
.order('committed_on')
.return_limit('1')
# Q 481 : # changesets.where(["scmid IN (?)", revisions.map!(&:scmid)]).order("committed_on DESC")
Query(Changeset)
.order('committed_on')
# Q 482 : # changesets.where(revision: revisions.map(&:identifier)).order("committed_on DESC").includes(:user)
Query(Changeset)
.where("revision = ?")
.order('committed_on')
.includes('user')
# Q 483 : # cost_entries.group(:cost_type).calculate(:sum, :units)
Query(CostEntry)
.group('cost_type')
# Q 484 : # cost_objects.pluck(:subject, :id)
Query(CostObject)
.select('subject')
.select('id')
# Q 485 : # cost_objects.where(id: values)
Query(CostObject)
.where("id = ?")
# Q 486 : # custom_field.custom_options.find { |co|
#   
#   co.value == str
# }.try(:id)
Query(CustomOption)
.where("custom_field_id = ?")
.where("id = ?")
.select('id')
# Q 487 : # custom_field.custom_options.find(keys.flatten.uniq).group_by
Query(CustomOption)
.where("custom_field_id = ?")
.where("id = ?")
# Q 488 : # custom_field.custom_options.find_by(id: id).try(:value)
Query(CustomOption)
.where("custom_field_id = ?")
.where("id = ?")
.select('value')
# Q 489 : # custom_field.custom_options.pluck(:id).include?(value.to_i)
Query(CustomOption)
.where("custom_field_id = ?")
.select('id')
# Q 490 : # custom_field.custom_options.where(id: id.split(",")).pluck(:value).select(&:present?)
Query(CustomOption)
.where("custom_field_id = ?")
.where("id = ?")
.select('value')
.select('present?')
# Q 491 : # custom_field.custom_options.where(id: values)
Query(CustomOption)
.where("custom_field_id = ?")
.where("id = ?")
# Q 492 : # custom_options.select(&:default_value).map(&:id)
Query(CustomOption)
.select('default_value')
# Q 493 : # custom_options.where("position > ?", max_position).destroy_all
Query(CustomOption)

# Q 494 : # custom_options.where(value: value).pluck(:id).first
Query(CustomOption)
.where("value = ?")
.select('id')
.return_limit('1')
# Q 495 : # distinct(:watchable_type)
Query(Watcher)
.distinct('')
# Q 496 : # documents.includes(:category).group_by(&:category)
Query(Document)
.includes('category')
# Q 497 : # documents.with_attachments.group_by
Query(Document)

# Q 498 : # enabled_modules.pluck(:name)
Query(EnabledModule)
.select('name')
# Q 499 : # events.pluck(:name)
Query(Event)
.select('name')
# Q 500 : # find_by(default: true, active: true)
Query(Device)
.where("default = ?")
.where("active = ?")
# Q 501 : # find_by(login: login)
Query(User)
.where("login = ?")
# Q 502 : # find_by(value: hash_function(input))
Query(HashedToken)
.where("value = ?")
# Q 503 : # find_by(value: input)
Query(Base)
.where("value = ?")
# Q 504 : # forum.attributes.dup.except("id", "project_id", "topics_count", "messages_count", "last_message_id")
Query(Forum)

# Q 505 : # from_work_package_or_ancestors(work_package.parent).where(to_id: work_package.self_and_descendants.select(:id))
Query(Relation)
.where("to_id = ?")
# Q 506 : # group.type
Query(Group)
.select('type')
# Q 507 : # group.users
Query(User)
.where("id = ?")
# Q 508 : # group.users.delete(id)
Query(User)
.where("id = ?")
# Q 509 : # ifc_models.select(&:converted?)
Query(IfcModel)
.select('converted?')
# Q 510 : # includes(:attachments).where("attachments.container_id is not NULL").references(:attachments)
Query(Document)

# Q 511 : # includes(:project).references(:project).merge(Project.allowed_to(user, :view_wiki_pages))
Query(WikiPage)
.includes('project')
# Q 512 : # includes(:project).references(:projects).merge(Project.allowed_to(args.first || User.current, :view_news))
Query(News)
.includes('project')
# Q 513 : # includes(:project).references(:projects).merge(Project.allowed_to(user, :view_documents))
Query(Document)
.includes('project')
# Q 514 : # includes(:status).where(statuses: { is_closed: false })
Query(WorkPackage)
.where("is_closed = ?")
# Q 515 : # includes(:status).where(statuses: { is_closed: true })
Query(WorkPackage)
.where("is_closed = ?")
# Q 516 : # includes(:status, :project, :type).where(projects: { active: true })
Query(WorkPackage)
.where("active = ?")
# Q 517 : # includes(forum: :project).references(:projects).merge(Project.allowed_to(args.first || User.current, :view_messages))
Query(Message)
.includes('project')
# Q 518 : # includes(repository: :project).references(:projects).merge(Project.allowed_to(args.first || User.current, :view_changesets))
Query(Changeset)

# Q 519 : # issue.journals.select(&:notes?)
Query(Issue)
.select('notes?')
# Q 520 : # issue.viewpoints.find
Query(Bim::Bcf::Viewpoint)
.where("issue_id = ?")
.where("id = ?")
# Q 521 : # joins("LEFT OUTER JOIN (#{
# max_relation_depth.to_sql}) AS max_depth ON max_depth.to_id = work_packages.id").reorder("COALESCE(max_depth.depth, 0) #{
# direction}").select("#{
# table_name}.*, COALESCE(max_depth.depth, 0)")
Query(WorkPackage)
.order('depth')
.select('WorkPackage.*, COALESCE(max_depth.depth, 0)')
# Q 522 : # joins(:project).merge(Project.allowed_to(args.first || User.current, :view_work_packages))
Query(Version)
.joins('project')
# Q 523 : # joins(sanitize_sql_array(["LEFT OUTER JOIN (SELECT * from VersionSetting" + " WHERE project_id = ? ) version_settings" + " ON version_settings.version_id = versions.id", project.id])).where(["(version_settings.project_id = ? AND version_settings.display = ?)" + " OR (version_settings.project_id is NULL)", project.id, VersionSetting::DISPLAY_LEFT]).joins("
#         LEFT OUTER JOIN (SELECT * FROM VersionSetting) AS vs
#         ON vs.version_id = Version.id AND vs.project_id = Version.project_id
#       ").where("(version_settings.display = ? OR vs.display = ? OR vs.display IS NULL)", VersionSetting::DISPLAY_LEFT, VersionSetting::DISPLAY_LEFT)
Query(Sprint)

# Q 524 : # journals.between(from_number, to_number).reject(&:initial?)
Query(Journal)

# Q 525 : # journals.find_by(version: 1)
Query(Journal)
.where("version = ?")
# Q 526 : # journals.find_by_version(version_from)
Query(Journal)
.where("version = ?")
# Q 527 : # journals.find_by_version(version_to)
Query(Journal)
.where("version = ?")
# Q 528 : # journals.joins("JOIN meeting_contents ON meeting_contents.id = journals.journable_id AND meeting_contents.type='#{
# self.class}'").where(version: version).first.data
Query(Journal)
.where("version = ?")
.return_limit('1')
# Q 529 : # journals.sort_by(&:version).last
Query(Journal)
.return_limit('1')
# Q 530 : # meetings.group_by(&:start_year).each
Query(Meeting)

# Q 531 : # member.roles.sort.first
Query(Role)
.where("member_id = ?")
.return_limit('1')
# Q 532 : # member_role.member.remove_member_role_and_destroy_member_if_last(member_role, prune_watchers: false)
Query(Member)
.where("id = ?")
# Q 533 : # member_roles.detect(&:inherited_from).nil?
Query(MemberRole)

# Q 534 : # member_roles.reject { |mr|
#   
#   mr.inherited_from.nil?
# }.map(&:role_id)
Query(MemberRole)

# Q 535 : # members.includes(:principal, :roles).inject({ })
Query(Member)
.includes('principal')
.includes('roles')
# Q 536 : # memberships.pluck(:user_id)
Query(Membership)
.select('user_id')
# Q 537 : # not_builtin.order(created_on: :desc)
Query(User)
.order('created_on')
# Q 538 : # not_builtin.where(status: [STATUSES[:active], STATUSES[:registered], STATUSES[:invited]])
Query(Principal)
.where("status = ?")
# Q 539 : # order("Meeting.title ASC").includes({ participants: :user }, :author)
Query(Meeting)
.order('title')
.includes('author')
# Q 540 : # order(:name)
Query(CustomAction)
.order('name')
# Q 541 : # order(:position)
Query(Status)
.order('position')
# Q 542 : # order(:position)
Query(CustomAction)
.order('position')
# Q 543 : # order("LOWER(Version.name)")
Query(Version)
.order('name')
# Q 544 : # order(User::USER_FORMATS_STRUCTURE[Setting.user_format].map(&:to_s))
Query(Principal)
.order('')
# Q 545 : # order(created_at: :desc)
Query(Project)
.order('created_at')
# Q 546 : # order(updated_at: :desc)
Query(WorkPackage)
.order('updated_at')
# Q 547 : # order(updated_at: :desc).limit(limit)
Query(Log)
.order('updated_at')
.return_limit('')
# Q 548 : # project.all_work_package_custom_fields.pluck(:id).map
Query(Project)
.select('id')
# Q 549 : # project.ancestors.pluck(:id).presence
Query(Project)
.select('id')
# Q 550 : # project.documents.visible.find_by_title(name)
Query(Project)
.where("title = ?")
# Q 551 : # project.done_statuses.select(:id).map(&:id)
Query(Project)
.select('id')
# Q 552 : # project.memberships.find_by(user_id: new_member.user_id)
Query(Member)
.where("project_id = ?")
.where("user_id = ?")
# Q 553 : # project.memberships.select
Query(Member)
.where("project_id = ?")
# Q 554 : # project.queries.non_hidden.includes(:query_menu_item).each
Query(Query)
.where("project_id = ?")
.includes('query_menu_item')
# Q 555 : # project.repository.find_changeset_by_name(matcher.identifier)
Query(Repository)
.where("id = ?")
# Q 556 : # project.types.find_by(name: type_name)
Query(Project)
.where("id = ?")
.where("name = ?")
# Q 557 : # project.users.find_by(mail: mail)
Query(User)
.where("project_id = ?")
.where("mail = ?")
# Q 558 : # project.versions.find_by(name: oid)
Query(Version)
.where("project_id = ?")
.where("name = ?")
# Q 559 : # project.wiki.find_page(Setting.plugin_openproject_backlogs["wiki_template"])
Query(Wiki)
.where("id = ?")
# Q 560 : # project.wiki.find_page(Setting.plugin_openproject_backlogs["wiki_template"])
Query(Wiki)
.where("id = ?")
# Q 561 : # project.wiki.find_page(page)
Query(Wiki)
.where("id = ?")
# Q 562 : # project.wiki.find_page(title)
Query(Wiki)
.where("id = ?")
# Q 563 : # project.wiki.find_page(wiki_page_title)
Query(Wiki)
.where("id = ?")
# Q 564 : # project.wiki.find_page(wiki_page_title)
Query(Wiki)
.where("id = ?")
# Q 565 : # project.wiki.find_page(wiki_page_title)
Query(Wiki)
.where("id = ?")
# Q 566 : # project.work_packages.includes(:custom_values, :version, :assigned_to, :responsible).order_by_ancestors("asc").order("id ASC")
Query(WorkPackage)
.where("project_id = ?")
.order('')
# Q 567 : # projects.select(:id).to_sql
Query(Project)
.select('id')
# Q 568 : # providers.find
Query(Provider)
.where("id = ?")
# Q 569 : # providers.find
Query(Provider)
.where("id = ?")
# Q 570 : # query.available_filters.select { |f|
#   
#   whitelisted_project_filter?(f)
# }.sort_by(&:human_name)
Query(Query)

# Q 571 : # query.chain.map { |c|
#   
#   c.group_fields.map(&:to_s) if c.group_by?
# }.compact.flatten
Query(Query)
.where("id != 0")
# Q 572 : # query.filters.map(&:includes)
Query(Query)

# Q 573 : # query.filters.map(&:joins).flatten.compact
Query(Query)
.where("id != 0")
# Q 574 : # query.joins(:principal).references(:principal)
Query(Query)

# Q 575 : # query.order(journals_table[:id].desc)
Query(Query)
.order('')
# Q 576 : # query.orders.select(&:valid?).map
Query(Query)
.select('valid?')
# Q 577 : # relation.pluck(:id, *attributes)
Query(Relation)
.select('id')
# Q 578 : # relation.pluck(:id, :value).each
Query(Relation)
.select('id')
.select('value')
# Q 579 : # reorder("start_date ASC NULLS LAST, effective_date ASC NULLS LAST")
Query(Sprint)
.order('start_date, effective_date')
# Q 580 : # select("WikiPage.*, WikiContent.updated_on").joins("LEFT JOIN WikiContent ON WikiContent.page_id = WikiPage.id")
Query(WikiPage)
.select('WikiPage.*, WikiContent.updated_on')
# Q 581 : # self.class.find(arg)
Query(VariableCostObject)
.where("id = ?")
# Q 582 : # self.class.query_aggregated_journals(journable: journable).where("#{
# self.class.version_projection} < ?", version).except(:order).order("#{
# self.class.version_projection} DESC").first
Query(Journal::AggregatedJournal)
.order('')
.return_limit('1')
# Q 583 : # self.class.query_aggregated_journals(journable: journable).where("#{
# self.class.version_projection} > ?", version).except(:order).order("#{
# self.class.version_projection} ASC").first
Query(Journal::AggregatedJournal)
.order('')
.return_limit('1')
# Q 584 : # self.class.where(journable_type: journable_type, journable_id: journable_id).where("#{
# self.class.table_name}.version < ?", version).order("#{
# self.class.table_name}.version DESC").first
Query(Journal)
.where("journable_type = ?")
.where("journable_id = ?")
.order('')
.return_limit('1')
# Q 585 : # self.class.where(user_id: user.id, type: type).delete_all
Query(Base)
.where("user_id = ?")
.where("type = ?")
# Q 586 : # sprint.impediments(project).group_by(&:status_id)
Query(Sprint)

# Q 587 : # story.assigned_to.firstname
Query(Principal)
.where("id = ?")
# Q 588 : # story.assigned_to.lastname
Query(Principal)
.where("id = ?")
# Q 589 : # time_entry_activities_projects.where(project_id: project.id).pluck(:active).first
Query(TimeEntryActivitiesProject)
.where("project_id = ?")
.select('active')
.return_limit('1')
# Q 590 : # to_root(work_package).select(:from_id)
Query(Relation)
.select('from_id')
# Q 591 : # type.find(result.fields["id"].to_i)
Query(Type)
.where("id = ?")
# Q 592 : # user.allowed_to?(:manage_versions, Project.find_by(id: version_setting.project_id))
Query(User)

# Q 593 : # user.otp_devices.find(session[:two_factor_authentication_device_id])
Query(User)
.where("id = ?")
# Q 594 : # user.otp_tokens.find_by_plaintext_value(input_token)
Query(User)
.where("plaintext_value = ?")
# Q 595 : # user.update_attribute(:first_login, false)
Query(User)

# Q 596 : # users.pluck(:id)
Query(User)
.select('id')
# Q 597 : # users.where(login: login).empty?
Query(User)
.where("login = ?")
# Q 598 : # versions.pluck(:id).map
Query(Version)
.select('id')
# Q 599 : # versions.visible.order_by_semver_name.except(:distinct).uniq
Query(Version)
.distinct('')
# Q 600 : # versions.where(status: %w{open locked}).each
Query(Version)
.where("status = ?")
# Q 601 : # watchers.includes({ watchable: :project }, :user).group_by(&:watchable_type)
Query(Watcher)
.includes('user')
# Q 602 : # watchers.select { |c|
#   
#   !allowed_user_ids.include?(c.user_id)
# }.each(&:destroy)
Query(Watcher)

# Q 603 : # watchers.select { |w|
#   
#   !allowed_project_ids.include?(w.watchable.project.id)
# }.each(&:destroy)
Query(Watcher)

# Q 604 : # webhook.events.pluck(:name).map(&method(:lookup_event_name)).compact.uniq
Query(::Webhooks::Event)
.where("webhook_id = ?")
.select('name')
.where("id != 0")
.distinct('')
# Q 605 : # where("Version.project_id = #{
# project.id}" + " OR (Project.active = #{
# true} AND (" + " Version.sharing = 'system'" + " OR (Project.lft >= #{
# project.root.lft} AND Project.rgt <= #{
# project.root.rgt} AND Version.sharing = 'tree')" + " OR (Project.lft < #{
# project.lft} AND Project.rgt > #{
# project.rgt} AND Version.sharing IN ('hierarchy', 'descendants'))" + " OR (Project.lft > #{
# project.lft} AND Project.rgt < #{
# project.rgt} AND Version.sharing = 'hierarchy')" + "))").includes(:project).references(:projects)
Query(Sprint)
.includes('project')
# Q 606 : # where("WorkPackage.version_id IS NOT NULL" + " AND WorkPackage.project_id <> Version.project_id" + " AND Version.sharing <> 'system'")
Query(WorkPackage)

# Q 607 : # where("LOWER(mail) = ?", mail)
Query(User)

# Q 608 : # where("LOWER(mail) ~* ?", regexp)
Query(User)

# Q 609 : # where("from_id = ? OR to_id = ?", work_package, work_package)
Query(Relation)

# Q 610 : # where("show_until >= ?", Date.today)
Query(Announcement)

# Q 611 : # where(["LOWER(login) LIKE :s OR " + "LOWER(#{
# firstnamelastname}) LIKE :s OR " + "LOWER(#{
# lastnamefirstname}) LIKE :s OR " + "LOWER(mail) LIKE :s", { s: s }]).order(:type, :login, :lastname, :firstname, :mail)
Query(Principal)
.order('type, login, lastname, firstname, mail')
# Q 612 : # where(["user_id = ? and project_id = ? and valid_from <= ?", user_id, project, date]).order("valid_from DESC").first
Query(HourlyRate)
.order('valid_from')
.return_limit('1')
# Q 613 : # where(["user_id = ? and project_id in (?) and valid_from <= ?", user_id, project.ancestors.to_a, date]).includes(:project).order("projects.lft DESC, valid_from DESC").first
Query(HourlyRate)
.includes('project')
.order('lft, valid_from')
.return_limit('1')
# Q 614 : # where(["user_id = ? and valid_from <= ?", user_id, date]).order("valid_from DESC").first
Query(DefaultHourlyRate)
.order('valid_from')
.return_limit('1')
# Q 615 : # where(["version > 1"])
Query(LegacyJournal)

# Q 616 : # where(["version > 1"])
Query(Journal)

# Q 617 : # where(active: true)
Query(Enumeration)
.where("active = ?")
# Q 618 : # where(active: true)
Query(Device)
.where("active = ?")
# Q 619 : # where(active: true)
Query(RowsYamlValidator)
.where("active = ?")
# Q 620 : # where(active: true)
Query(Announcement)
.where("active = ?")
# Q 621 : # where(active: true)
Query(Project)
.where("active = ?")
# Q 622 : # where(admin: true)
Query(User)
.where("admin = ?")
# Q 623 : # where(attended: true)
Query(MeetingParticipant)
.where("attended = ?")
# Q 624 : # where(author_id: author.id)
Query(WorkPackage)
.where("author_id = ?")
# Q 625 : # where(builtin: BUILTIN_ANONYMOUS).first
Query(Role)
.where("builtin = ?")
.return_limit('1')
# Q 626 : # where(builtin: BUILTIN_NON_MEMBER).first
Query(Role)
.where("builtin = ?")
.return_limit('1')
# Q 627 : # where(builtin: NON_BUILTIN).where(type: "Role").order("position")
Query(Role)
.where("builtin = ?")
.where("type = ?")
.order('position')
# Q 628 : # where(deleted_at: nil)
Query(CostType)
.where("deleted_at = ?")
# Q 629 : # where(enabled: true)
Query(Webhook)
.where("enabled = ?")
# Q 630 : # where(from_id: ancestor_or_self_ids)
Query(Relation)
.where("from_id = ?")
# Q 631 : # where(from_id: work_package.self_and_descendants.select(:id)).where(to_id: work_package.parent.self_and_ancestors.select(:id))
Query(Relation)
.where("from_id = ?")
.where("to_id = ?")
# Q 632 : # where(id: Member.of(project).select(:user_id))
Query(Principal)
.where("id = ?")
# Q 633 : # where(id: User.current.id)
Query(Principal)
.where("id = ?")
# Q 634 : # where(id: id_subquery)
Query(Watcher)
.where("id = ?")
# Q 635 : # where(id: ids)
Query(WorkPackageCustomField)
.where("id = ?")
# Q 636 : # where(invited: true)
Query(MeetingParticipant)
.where("invited = ?")
# Q 637 : # where(is_default: true)
Query(Status)
.where("is_default = ?")
# Q 638 : # where(is_default: true)
Query(IfcModel)
.where("is_default = ?")
# Q 639 : # where(is_default: true).first
Query(Enumeration)
.where("is_default = ?")
.return_limit('1')
# Q 640 : # where(is_default: true, type: "Enumeration").first
Query(Enumeration)
.where("is_default = ?")
.where("type = ?")
.return_limit('1')
# Q 641 : # where(is_filter: true)
Query(CustomField)
.where("is_filter = ?")
# Q 642 : # where(is_for_all: true).includes(options[:include]).order("#{
# table_name}.position")
Query(CustomField)
.where("is_for_all = ?")
.order('position')
# Q 643 : # where(is_standard: false).order(:position)
Query(::Type)
.where("is_standard = ?")
.order('position')
# Q 644 : # where(navigatable_id: wiki_id, parent_id: nil).includes(:children).order("id ASC")
Query(MenuItems::WikiMenuItem)
.where("navigatable_id = ?")
.where("parent_id = ?")
.includes('children')
.order('')
# Q 645 : # where(project_id: Project.allowed_to(args.first || User.current, :view_work_packages))
Query(WorkPackage)
.where("project_id = ?")
# Q 646 : # where(project_id: nil)
Query(Enumeration)
.where("project_id = ?")
# Q 647 : # where(project_id: project)
Query(Member)
.where("project_id = ?")
# Q 648 : # where(project_id: project_scope.select(:id))
Query(Member)
.where("project_id = ?")
# Q 649 : # where(project_id: projects)
Query(WorkPackage)
.where("project_id = ?")
# Q 650 : # where(project_id: wp.project_id)
Query(WorkPackage)
.where("project_id = ?")
# Q 651 : # where(public: true)
Query(Project)
.where("public = ?")
# Q 652 : # where(sharing: "system")
Query(Version)
.where("sharing = ?")
# Q 653 : # where(status: "open")
Query(Version)
.where("status = ?")
# Q 654 : # where(status: STATUSES[:active])
Query(Principal)
.where("status = ?")
# Q 655 : # where(status_id: (
# args.first.respond_to?(:id) ? args.first.id : args.first))
Query(WorkPackage)
.where("status_id = ?")
# Q 656 : # where(type: type).select(:attribute_name).distinct.pluck(:attribute_name)
Query(AttributeHelpText)
.where("type = ?")
.select('attribute_name')
.distinct('')
.select('attribute_name')
# Q 657 : # where(version_id: nil)
Query(WorkPackage)
.where("version_id = ?")
# Q 658 : # where(visible: true)
Query(ProjectCustomField)
.where("visible = ?")
# Q 659 : # where(wiki_id: wiki_id, parent_id: nil)
Query(WikiPage)
.where("wiki_id = ?")
.where("parent_id = ?")
# Q 660 : # where(work_package_id: work_packages)
Query(CostEntry)
.where("work_package_id = ?")
# Q 661 : # where(work_package_id: work_packages)
Query(TimeEntry)
.where("work_package_id = ?")
# Q 662 : # where.not(id: Member.of(project).select(:user_id))
Query(Principal)
.where("id = ?")
# Q 663 : # where.not(type: [SystemUser.name, AnonymousUser.name, DeletedUser.name])
Query(Principal)
.where("type = ?")
# Q 664 : # wiki.pages.where(title: name).first
Query(WikiPage)
.where("wiki_id = ?")
.where("title = ?")
.return_limit('1')
# Q 665 : # wiki.redirects.where(redirects_to: previous_slug).each
Query(WikiRedirect)
.where("wiki_id = ?")
.where("redirects_to = ?")
# Q 666 : # wiki.redirects.where(redirects_to: slug).each(&:destroy)
Query(WikiRedirect)
.where("wiki_id = ?")
.where("redirects_to = ?")
# Q 667 : # wiki.redirects.where(title: slug).each(&:destroy)
Query(WikiRedirect)
.where("wiki_id = ?")
.where("title = ?")
# Q 668 : # within_group(group)
Query(User)

# Q 669 : # within_group(group, false)
Query(User)

# Q 670 : # work_package.ancestors_relations.or(where(from_id: work_package.id)).select(:from_id)
Query(WorkPackage)
.select('from_id')
# Q 671 : # work_package.children.where(id: other.id).exists?
Query(WorkPackage)
.where("id = ?")
.return_limit('1')
# Q 672 : # work_package.descendants.includes(:parent_relation, project: :enabled_modules).order("relations.hierarchy asc").select("work_packages.*, relations.hierarchy")
Query(WorkPackage)
.order('hierarchy')
.select('work_packages.*, relations.hierarchy')
# Q 673 : # work_package.journals.changing.includes(:user).order(order).to_a
Query(WorkPackage)
.order('')
# Q 674 : # work_package.journals.includes(:user).order("Journal.created_at ASC")
Query(WorkPackage)
.order('created_at')
# Q 675 : # work_package.journals.select(:id, :notes, :user_id, :created_at).map
Query(WorkPackage)
.select('id')
.select('notes')
.select('user_id')
.select('created_at')
# Q 676 : # work_package.journals.select(:user_id).last
Query(WorkPackage)
.select('user_id')
.return_limit('1')
# Q 677 : # work_packages.map do |work_package|
#   
#   [work_package.project_id, work_package.parent && work_package.parent.project_id] + work_package.children.map(&:project_id)
#   
# end.flatten.uniq.compact
Query(WorkPackage)
.distinct('')
.where("id != 0")
# Q 678 : # work_packages.map(&:project).uniq
Query(WorkPackage)
.distinct('')
# Q 679 : # work_packages.order(sort_criteria_array)
Query(WorkPackage)
.order('')
# Q 680 : # work_packages.pluck(:id)
Query(WorkPackage)
.select('id')
# Q 681 : # work_packages.respond_to?(:joins)
Query(WorkPackage)

# Q 682 : # work_packages.respond_to?(:pluck)
Query(WorkPackage)

# Q 683 : # work_packages.where(project_id: project, type_id: Story.types).where("position IS NOT NULL").order("COALESCE(position, 0), id")
Query(WorkPackage)
.where("project_id = ?")
.where("type_id = ?")
.order('position')
# Q 684 : # work_packages.where(project_id: project, type_id: Story.types, position: nil).order("id")
Query(WorkPackage)
.where("project_id = ?")
.where("type_id = ?")
.where("position = ?")
.order('')
# Q 685 : # work_packages.where(statuses: { is_closed: !open }).includes(:status).sum(sum_sql)
Query(WorkPackage)
.where("is_closed = ?")
# Q 686 : # workflows.select(&:assignee)
Query(Workflow)
.select('assignee')
# Q 687 : # workflows.select(&:author)
Query(Workflow)
.select('author')
# Q 688 : # workflows.where(author: author).where(assignee: assignee)
Query(Workflow)
.where("author = ?")
.where("assignee = ?")
