# Q 0 : # @abuse_reports.includes(:reporter, :user)
Query(AbuseReport)
.includes('reporter')
.includes('user')
.limit('40')
# Q 1 : # @builds.select(&:included?)
Query(Build)
.select('included?')
# Q 2 : # @commit.pipelines.order(id: :desc)
Query(CiPipeline)
.where('project_id = ?')
.order('id')
# Q 3 : # @commits.map(&:author_email).uniq.size
Query(MergeRequestDiffCommit)
.where("id IN (?, ?, ?)")
.select("author_email")
.distinct('')
# Q 7 : # @group.labels.find(params[:id])
Query(GroupLabel)
.where('group_id = ?')
.where("id = ?")
# Q 8 : # @group.notification_settings(hierarchy_order: :asc).where(user: user).where.not(level: NotificationSetting.levels[:global]).first
Query(NotificationSetting)
.where('source_id = ?')
.where("source_type = 'Group'")
.where("user_id = ?")
.where("level = ?")
.return_limit('1')
# Q 9 : # @group.projects.find(params[:project_id])
Query(Project)
.where('group_id = ?')
.where("id = ?")
# Q 10 : # @group.runners.find(params[:id])
Query(Group)
.where("id = ?")
# Q 11 : # @merge_request.merge_request_diffs.viewable.find_by(id: diff_id)
Query(MergeRequestDiff)
.where("merge_request_id = ?")
.where("id = ?")
# Q 12 : # @merge_request.merge_request_diffs.viewable.order_id_desc
Query(MergeRequestDiff)
.where("merge_request_id = ?")
.order('id')
# Q 13 : # @merge_request.notes.where(commit_id: @commit.id).inc_relations_for_view
Query(Note)
.where('noteable_id = ?')
.where("noteable_type = 'MergeRequest'")
.where("commit_id = ?")
# Q 14 : # @project.all_lfs_objects.where(oid: new_lfs_pointers.map(&:lfs_oid)).count
Query(LfsObjectsProject)
.joins('lfs_object')
.where('project_id = ?')
.where("lfs_object.oid = ?")
# Q 15 : # @project.ci_pipelines.where(sha: @sha).latest_status(@ref)
Query(CiPipeline)
.where("project_id = ?")
.where("sha = ?")
# Q 16 : # @project.deploy_tokens.find(params[:id])
Query(DeployToken)
.where("project_id = ?")
.where("id = ?")
# Q 17 : # @project.deployments.success.where("created_at >= ?", @from)
Query(Deployment)
.where("project_id = ?")
# Q 19 : # @project.forked_from_project
Query(Project)
.where("id = ?")
# Q 20 : # @project.group
Query(Group)
.where("id = ?")
# Q 21 : # @project.group
Query(Group)
.where("id = ?")
# Q 22 : # @project.group
Query(Group)
.where("id = ?")
# Q 23 : # @project.group
Query(Group)
.where("id = ?")
# Q 24 : # @project.group.ancestors.pluck(:id)
Query(Group)
.where("parent_id = ?")
.select('id')
# Q 25 : # @project.hooks.find(params[:hook_id])
Query(ProjectHook)
.where("project_id = ?")
.where("id = ?")
# Q 26 : # @project.hooks.find(params[:id])
Query(ProjectHook)
.where("project_id = ?")
.where("id = ?")
# Q 27 : # @project.hooks.select(&:persisted?)
Query(ProjectHook)
.where("project_id = ?")
# Q 28 : # @project.issues.includes(author: :status).where(iid: params[:id]).reorder(nil).take!
Query(Issue)
.where("project_id = ?")
.where("iid = ?")
# Q 29 : # @project.labels.find(params[:id])
Query(ProjectLabel)
.where("project_id = ?")
.where("id = ?")
# Q 30 : # @project.labels.pluck(:id, :name).each_with_object({ })
Query(ProjectLabel)
.where("project_id = ?")
.select('id')
.select('name')
# Q 31 : # @project.merge_requests.find_by(iid: parsed_relation_hash["iid"])
Query(MergeRequest)
.where("project_id = ?")
.where("iid = ?")
# Q 32 : # @project.merge_requests.with_state(:locked).where(in_progress_merge_commit_sha: @newrev, target_branch: @branch_name).exists?
Query(MergeRequest)
.where("project_id = ?")
.where("in_progress_merge_commit_sha = ?")
.where("target_branch = ?")
.return_limit('1')
# Q 33 : # @project.milestones.find_by!(iid: params[:id])
Query(Milestone)
.where("project_id = ?")
.where("iid = ?")
# Q 34 : # @project.milestones.pluck(:id, :iid).each_with_object({ })
Query(Milestone)
.where("project_id = ?")
.select('id')
.select('iid')
# Q 35 : # @project.notes.find(params[:id])
Query(Note)
.where("project_id = ?")
.where("id = ?")
# Q 36 : # @project.notes.where("noteable_type = ?", "Commit").group("notes.commit_id").select("notes.commit_id, count(notes.id) as note_count").each
Query(Note)
.where("project_id = ?")
.where("noteable_type = 'Commit'")
.group('commit_id')
.select('commit_id')
# Q 37 : # @project.pages_domains.find_by_domain!(params[:id].to_s)
Query(PagesDomain)
.where("project_id = ?")
.where("domain! = ?")
# Q 38 : # @project.pages_domains.order(:domain)
Query(PagesDomain)
.where("project_id = ?")
.order('domain')
# Q 39 : # @project.project_group_links
Query(ProjectGroupLink)
.where("project_id = ?")
# Q 40 : # @project.project_group_links.find(params[:id])
Query(ProjectGroupLink)
.where("project_id = ?")
.where("id = ?")
# Q 41 : # @project.project_members.where.not(user_id: nil).select(:user_id)
Query(ProjectMember)
.where("project_id = ?")
.where("user_id = ?")
.select('user_id')
# Q 42 : # @project.protected_branches.find(params[:id])
Query(ProtectedBranch)
.where("project_id = ?")
.where("id = ?")
# Q 43 : # @project.protected_branches.order(:name).page(params[:page])
Query(ProtectedBranch)
.where("project_id = ?")
.order('name')
# Q 44 : # @project.protected_tags.find(params[:id])
Query(ProtectedTag)
.where("project_id = ?")
.where("id = ?")
# Q 45 : # @project.protected_tags.order(:name).page(params[:page])
Query(ProtectedTag)
.where("project_id = ?")
.order('name')
# Q 46 : # @project.releases.find_or_initialize_by(tag: @tag.name)
Query(Release)
.where("project_id = ?")
# Q 47 : # @project.snippets.inc_relations_for_view.find(params[:id])
Query(ProjectSnippet)
.where("project_id = ?")
.where("id = ?")
# Q 50 : # @project_members.joins(:user).merge(User.search(params[:search]))
Query(ProjectMember)
.joins('user')
.where('user.id IN (?, ?)')
# Q 51 : # @project_wiki.find_page("home", params[:version_id])
Query(ProjectWiki)
.where('id = ?')
.where('page = ?')
# Q 53 : # Ability.allowed?(user, :read_group, extra_group)
Query(Ability)

# Q 54 : # Ability.allowed?(opts[:user], :admin_group, namespace)
Query(Ability)

# Q 55 : # AbuseReport.find(params[:id])
Query(AbuseReport)
.where("id = ?")
# Q 56 : # AbuseReport.order(id: :desc).page(params[:page])
Query(AbuseReport)
.order('id')
# Q 57 : # AuditEvent.where(entity_type: "User", entity_id: user.id).order("created_at DESC").page(params[:page])
Query(AuditEvent)
.where("entity_type = ?")
.where("entity_id = ?")
.order('created_at')
# Q 58 : # Board.find(params[:board_id])
Query(Board)
.where("id = ?")
# Q 59 : # BroadcastMessage.find(params[:id])
Query(BroadcastMessage)
.where("id = ?")
# Q 60 : # BroadcastMessage.find(params[:id])
Query(BroadcastMessage)
.where("id = ?")
# Q 61 : # BroadcastMessage.order(ends_at: :desc).page(params[:page])
Query(BroadcastMessage)
.order('ends_at')
# Q 62 : # Ci::RunnerNamespace.where(namespace_id: owned_or_maintainers_groups.select(:id)).joins(:runner).select("ci_runners.*")
Query(CRunnerNamespace)
.where("namespace_id = ?")
.joins('runner')
# Q 63 : # Ci::RunnerProject.where(project: authorized_projects(Gitlab::Access::MAINTAINER)).joins(:runner).select("ci_runners.*")
Query(CiRunnerProject)
.where("project = ?")
.joins('runner')
# Q 64 : # Clusters::Cluster.joins(:groups).where(cluster_groups: { group_id: ancestors_upto })
Query(ClustersCluster)
.joins('groups')
.where("groups.id = ?")
# Q 65 : # CommitStatus.from(stages_query, :sg).pluck("sg.stage", status_sql, "(#{
# warnings_sql})")
# Q 66 : # CommitStatus.where(id: @jobs).legacy_status
Query(CommitStatus)
.where("id = ?")
# Q 68 : # ConversationalDevelopmentIndex::Metric.order(:created_at).last.present
Query(ConversationalDevelopmentIndexMetric)
.order('created_at')
.return_limit('1')
# Q 69 : # DeployKey.find(deploy_key_matches[1])
Query(DeployKey)
.where("id = ?")
# Q 70 : # DeployKey.find(params[:id])
Query(DeployKey)
.where("id = ?")
# Q 71 : # DeployKey.in_projects(authorized_projects.select(:id)).distinct(:id)
Query(DeployKey)
.joins('projects')
.where('projects.id = ?')
.distinct('')
# Q 72 : # DeployToken.active.find_by_token(password)
Query(DeployToken)
.where("token = ?")
# Q 73 : # Deployment.find_by(id: deployment_id).try
Query(Deployment)
.where("id = ?")
# Q 74 : # Deployment.find_by(id: deployment_id).try
Query(Deployment)
.where("id = ?")
# Q 75 : # Deployment.joins(:project).merge(Project.inside_path(group.full_path))
Query(Deployment)
.joins('project')
# Q 76 : # Deployment.where(environment: environment).find_by_sha(sha)
Query(Deployment)
.where("environment = ?")
.where("sha = ?")
# Q 77 : # Environment.find_by(name: expanded_environment_name, project: project)
Query(Environment)
.where("name = ?")
.where("project = ?")
# Q 78 : # Event.contributions.where(author_id: contributor.id).where(created_at: date.beginning_of_day..date.end_of_day).where(project_id: projects).with_associations
Query(Event)
.where("((action = 1) || ((target_type = 2) AND (action = 2))) || ((target_type = 3) AND (action = 3))")
.where("author_id = ?")
.where("created_at > ?")
.where("project_id IN (?, ?)")
# Q 81 : # Event.reorder(nil).select(t[:project_id], t[:target_type], t[:action], "date(created_at + #{
# date_interval}) AS date", "count(id) as total_amount").group(t[:project_id], t[:target_type], t[:action], "date(created_at + #{
# date_interval})").where(conditions).where("events.project_id in (#{
# authed_projects.to_sql})")
# Q 82 : # Event.select(:project_id).contributions.where(author_id: self).where("created_at > ?", Time.now - 1.year).distinct.reorder(nil)
Query(Event)
.select('project_id')
.where("((action = 1) || ((target_type = 2) AND (action = 2))) || ((target_type = 3) AND (action = 3))")
.where("author_id = ?")
.where('created_at > ?')
.distinct('')
# Q 85 : # GpgKey.find_by_fingerprint(fingerprint)
Query(GpgKey)
.where("fingerprint = ?")
# Q 86 : # GpgKey.find_by_primary_keyid(fingerprint)
Query(GpgKey)
.where("primary_keyid = ?")
# Q 87 : # GpgKeySubkey.find_by_fingerprint(fingerprint)
Query(GpgKeySubkey)
.where("fingerprint = ?")
# Q 88 : # GpgKeySubkey.find_by_keyid(fingerprint)
Query(GpgKeySubkey)
.where("key = ?")
# Q 89 : # GpgSignature.select(:id, :commit_sha, :project_id).where("gpg_key_id IS NULL OR verification_status <> ?", GpgSignature.verification_statuses[:verified]).where(gpg_key_primary_keyid: @gpg_key.keyids).find_each
Query(GpgSignature)
.select('id')
.select('commit_sha')
.select('project_id')
.where("gpg_key_primary_keyid = ?")
# Q 90 : # GpgSignature.where(commit_sha: commit_shas).pluck(:commit_sha)
Query(GpgSignature)
.where("commit_sha IN (?, ?)")
.select('commit_sha')
# Q 91 : # Group.find(extra_group)
Query(Group)
.where("id = ?")
# Q 92 : # Group.find(group_id)
Query(Group)
.where("id = ?")
# Q 93 : # Group.find(params[:group_id])
Query(Group)
.where("id = ?")
# Q 94 : # Group.find(params[:link_group_id])
Query(Group)
.where("id = ?")
# Q 95 : # Group.find(params[:namespace_id])
Query(Group)
.where("id = ?")
# Q 96 : # Group.find(params[:shared_with_group_id])
Query(Group)
.where("id = ?")
# Q 97 : # Group.find_by(id: id)
Query(Group)
.where("id = ?")
# Q 98 : # Group.find_by(id: params[:new_parent_group_id])
Query(Group)
.where("id = ?")
# Q 99 : # Group.find_by(id: params[:parent_id])
Query(Group)
.where("id = ?")
# Q 100 : # Group.find_by(id: parent_id_before_last_save)
Query(Group)
.where("id = ?")
# Q 101 : # Group.find_by(id: session[:manifest_import_group_id])
Query(Group)
.where("id = ?")
# Q 102 : # Group.find_by(path: extra_group.path)
Query(Group)
.where("path = ?")
# Q 103 : # Group.find_by_full_path(full_path, follow_redirects: request.get?).present?
Query(Group)
.where("full_path = ?")
# Q 104 : # Group.find_by_full_path(group)
Query(Group)
.where("full_path = ?")
# Q 105 : # Group.find_by_full_path(group_id)
Query(Group)
.where("full_path = ?")
# Q 106 : # Group.find_by_full_path(id)
Query(Group)
.where("full_path = ?")
# Q 107 : # Group.find_by_full_path(params[:group])
Query(Group)
.where("full_path = ?")
# Q 108 : # Group.find_by_full_path(params[:id])
Query(Group)
.where("full_path = ?")
# Q 109 : # Group.find_by_id(allowed_group_id)
Query(Group)
.where("id = ?")
# Q 110 : # Group.find_by_id(performance_bar_allowed_group_id)
Query(Group)
.where("id = ?")
# Q 111 : # Group.joins(project_group_links: :project).where(projects: { namespace_id: id }).find_each(&:refresh_members_authorized_projects)
Query(Group)
.joins('project_group_links => project')
.where('project_group_links.project.namespace_id = ?')
# Q 113 : # Group.with_statistics.find(group.id)
Query(Group)
.where("id = ?")
# Q 114 : # GroupGroupLink.where(shared_group_id: self_and_ancestors_ids)
Query(GroupGroupLink)
.where("shared_group_id IN (?, ?)")
# Q 115 : # GroupMember.active_without_invites_and_requests.where(source_id: self_and_descendants.reorder(nil).select(:id))
Query(GroupMember)
.where("source_id = ?")
# Q 116 : # GroupMember.active_without_invites_and_requests.where(source_id: self_and_hierarchy.reorder(nil).select(:id))
Query(GroupMember)
.where("source_id = ?")
# Q 117 : # GroupMember.active_without_invites_and_requests.where(source_id: source_ids)
Query(GroupMember)
.where("source_id = ?")
# Q 118 : # GroupMember.where("user_id not in (select id from users)").exists?
Query(GroupMember)
.where("!(user_id IN (?, ?))")
.return_limit('1')
# Q 119 : # GroupMember.where(source: source.ancestors, user_id: user_id).order(:access_level).last
Query(GroupMember)
.where("source_id IN (?, ?)")
.where("source_type = ?")
.where("user_id = ?")
.order('access_level')
.return_limit('1')
# Q 120 : # GroupMember.where(source_id: self_and_ancestors_ids, user_id: user.id).order(:access_level).last
Query(GroupMember)
.where("source_id IN (?, ?)")
.where("source_type = ?")
.where("user_id = ?")
.order('access_level')
.return_limit('1')
# Q 122 : # Issue.find(params[:ids])
Query(Issue)
.where("id = ?")
# Q 123 : # Issue.find_by(project_id: project.id, iid: iid)
Query(Issue)
.where("project_id = ?")
.where("iid = ?")
# Q 124 : # Issue.of_milestones(milestone).includes(:project, :assignees, :labels)
Query(Issue)
.includes('project')
.includes('assignees')
# Q 125 : # Issue.select(:id, :author_id).where(confidential: true, project_id: project_id)
Query(Issue)
.select('id')
.select('author_id')
.where("confidential = ?")
.where("project_id = ?")
# Q 126 : # Issue.where(id: issue_ids).find_each
Query(Issue)
.where("id IN (?, ?)")
# Q 127 : # IssueAssignee.select(:user_id).where(issue_id: issue.id)
Query(IssueAssignee)
.select('user_id')
.where("issue_id = ?")
# Q 128 : # Key.where(id: ids_in_file)
Query(Key)
.where("id = ?")
# Q 129 : # Label.find(params[:id])
Query(Label)
.where("id = ?")
# Q 130 : # Label.joins("INNER JOIN label_links ON label_links.label_id = labels.id AND label_links.target_type = \'Issue\'
#                   INNER JOIN issues ON issues.id = label_links.target_id
#                   INNER JOIN projects ON projects.id = issues.project_id").where("issues.project_id in (?)", project_ids).where("(labels.project_id is not null and labels.project_id != issues.project_id) " "or (labels.group_id is not null and labels.group_id != projects.namespace_id)").select("distinct issues.id")
Query(Label)
.joins('label_links => target => project')
.where('label_links.target.project_id = param[pid]')
.where('project_id != param[pid]')
.select('label_links.target.id')
.distinct('')
# Q 131 : # Label.joins("INNER JOIN label_links ON label_links.label_id = labels.id AND label_links.target_type = \'MergeRequest\'
#                   INNER JOIN merge_requests ON merge_requests.id = label_links.target_id
#                   INNER JOIN projects ON projects.id = merge_requests.target_project_id").where("merge_requests.target_project_id in (?)", project_ids).where("(labels.project_id is not null and labels.project_id != merge_requests.target_project_id) " "or (labels.group_id is not null and labels.group_id != projects.namespace_id)").select("distinct merge_requests.id")
Query(Label)
.joins('label_links => target => project')
.where('label_links.target.project_id = param[pid]')
.where('project_id != param[pid]')
.select('label_links.target.id')
# Q 132 : # Label.joins(:label_links).where("label_links.target_id" => issues_visible_to_user(user).select(:id), "label_links.target_type" => "Issue").distinct
Query(Label)
.joins('label_links')
.where("target_id = ?")
.where("target_type = ?")
.distinct('')
# Q 133 : # Label.select(LabelPriority.arel_table[:priority].minimum).left_join_priorities.joins(:label_links).where("label_priorities.project_id = #{
# project_column}").where("label_links.target_id = #{
# target_column}").reorder(nil)
Query(Label)
.joins('label_links')
.where('label_links.target_id = ?')
.left_outer_joins('priorities')
.where('priorities.project_id = ?')
# Q 134 : # Label.where("(type = 'GroupLabel' and group_id in (?)) or (type = 'ProjectLabel' and id = ?)", project_group_ids(project_id), project_id)
Query(Label)
.where("(type = 'GroupLabel') AND (group_id IN (?, ?))")
.pred_or("(type = 'ProjectLabel') AND (group_id IN (?, ?))")
# Q 135 : # LabelLink.select("label_id, labels.title as title, labels.color as color, label_links.id as label_link_id").joins("INNER JOIN labels ON labels.id = label_links.label_id").where(target_type: resource.class.name.demodulize, target_id: resource.id).where("labels.id not in (?)", local_labels.select(:id))
Query(LabelLink)
.select('label_id, labels.title as title, labels.color as color, label_links.id as label_link_id')
.where("target_type = ?")
.where("target_id = ?")
# Q 136 : # LfsObject.find_by(oid: oid, size: size)
Query(LfsObject)
.where("oid = ?")
.where("size = ?")
# Q 137 : # LfsObject.find_by_oid(blob.lfs_oid)
Query(LfsObject)
.where("oid = ?")
# Q 138 : # LfsObject.find_by_oid(oid)
Query(LfsObject)
.where("oid = ?")
# Q 139 : # LfsObjectsProject.select("lfs_objects.oid, array_agg(distinct lfs_objects_projects.repository_type) as repository_types").joins(:lfs_object).where(project: project, lfs_object: lfs_objects_batch).group("lfs_objects.oid")
Query(LfsObjectsProject)
.joins('lfs_object')
.where("project = ?")
.where("lfs_object.id IN (?, ?)")
.select('lfs_objects.oid')
.group('oid, id')
# Q 140 : # List.find(issue_params[:list_id])
Query(List)
.where("id = ?")
# Q 141 : # ListUserPreference.where(list_id: list_ids.uniq, user_id: user_ids.uniq).find_each
Query(ListUserPreference)
.where("list_id IN (?, ?)")
.where("user_id IN (?, ?)")
# Q 142 : # Member.find_by_invite_token(@token)
Query(Member)
.where("invite_token = ?")
# Q 143 : # Member.on_project_and_ancestors(project).select(:user_id)
Query(Member)
.where("source_id IN (?, ?)")
.select('user_id')
# Q 144 : # Member.where(invite_email: verified_emails).invite
Query(Member)
.where("invite_email IN (?, ?)")
# Q 145 : # MergeRequest.except(:order, :where).select(1).where("merge_requests.source_project_id = events.project_id").where("merge_requests.source_branch = push_event_payloads.ref").with_state(:opened)
Query(MergeRequest)
.where('source_project_id = ?')
.where('source_branch = ?')
# Q 146 : # MergeRequest.find(closed_via[:id]).present
Query(MergeRequest)
.where("id = ?")
# Q 147 : # MergeRequest.find_by(target_project_id: project.id, iid: gh_issue.number)
Query(MergeRequest)
.where("target_project_id = ?")
.where("iid = ?")
# Q 148 : # MergeRequest.find_by(target_project_id: project.id, iid: iid)
Query(MergeRequest)
.where("target_project_id = ?")
.where("iid = ?")
# Q 149 : # MergeRequest.includes(:latest_merge_request_diff).where(source_branch: ref, source_project: pipeline.project).reorder(iid: :desc)
Query(MergeRequest)
.includes('latest_merge_request_diff')
.where("source_branch = ?")
.where("source_project = ?")
.order('iid')
# Q 150 : # MergeRequest.of_milestones(milestone).includes(:target_project, :assignee, :labels)
Query(MergeRequest)
.where('milestone_id = ?')
.includes('target_project')
# Q 151 : # MergeRequest.where("id = ? AND COALESCE(latest_merge_request_diff_id, 0) < ?", self.merge_request_id, self.id).update_all(latest_merge_request_diff_id: self.id)
Query(MergeRequest)
.where('id = ?')
# Q 152 : # MergeRequest.where(id: from_id..to_id, state: "opened", merge_status: "can_be_merged")
Query(MergeRequest)
.where("id IN (?, ?)")
.where("state = 'opened'")
.where("merge_status = 'can_be_merged'")
# Q 153 : # MergeRequest.where(id: merge_request_id)
Query(MergeRequest)
.where("id = ?")
# Q 154 : # MergeRequest.where(id: merge_request_id).limit(1).pluck(:latest_merge_request_diff_id).first
Query(MergeRequest)
.where("id = ?")
.select('latest_merge_request_diff_id')
.return_limit('1')
# Q 155 : # MergeRequest.where(id: mr_ids).find_each
Query(MergeRequest)
.where("id = ?")
# Q 156 : # MergeRequest.where(merge_request_assignees_not_exists_clause).where(id: from_id..to_id).where("assignee_id IS NOT NULL").select(:id, :assignee_id).to_sql
Query(MergeRequest)
.where("id > ?")
.where("id < ?")
.where('assignee_id = 0')
.select('id, assignee_id')
# Q 157 : # MergeRequest.where(source_project_id: project_id, source_branch: ref)
Query(MergeRequest)
.where("source_project_id = ?")
.where("source_branch = ?")
# Q 158 : # MergeRequest.where(target_project: projects)
Query(MergeRequest)
.where("target_project = ?")
# Q 159 : # MergeRequestDiff.where(id: start_id..stop_id).where(commits_count: nil).update_all(update)
Query(MergeRequestDiff)
.where("id > ?")
.where("id < ?")
.where("commits_count = 0")
# Q 160 : # MergeRequestDiffCommit.where(merge_request_diff: merge_request_diffs.recent).limit(10_000)
Query(MergeRequestDiffCommit)
.where("merge_request_diff = ?")
.return_limit('10')
# Q 161 : # MergeRequestDiffFile.where(merge_request_diff_id: id).delete_all
Query(MergeRequestDiffFile)
.where("merge_request_diff_id = ?")
# Q 162 : # Milestone.for_projects_and_groups([project_id], [project.group.id])
Query(Milestone)
.where("project_id IN (?, ?)")
.pred_or("group_id IN (?, ?)")
# Q 163 : # Milestone.for_projects_and_groups(group.projects.select(:id), [group.id])
Query(Milestone)
.where("project_id IN (?, ?)")
.pred_or("group_id IN (?, ?)")
# Q 164 : # Milestone.for_projects_and_groups(projects, groups).reorder(nil).group(:state).count
Query(Milestone)
.where("project_id IN (?, ?)")
.pred_or("group_id IN (?, ?)")
.group('state')
# Q 165 : # Milestone.of_groups(group).count_by_state
Query(Milestone)
.where("project_id IN (?, ?)")
.pred_or("group_id IN (?, ?)")
# Q 166 : # Milestone.of_groups(groups.select(:id)).reorder_by_due_date_asc.order_by_name_asc
Query(Milestone)
.where("project_id IN (?, ?)")
# Q 167 : # Milestone.of_projects(projects).reorder_by_due_date_asc.order_by_name_asc
Query(Milestone)
.where("project_id IN (?, ?)")
# Q 168 : # Milestone.of_projects(projects).where(title: title)
Query(Milestone)
.where("project_id IN (?, ?)")
.where("title = ?")
# Q 169 : # Milestone.of_projects(projects).where(title: title)
Query(Milestone)
.where("project_id IN (?, ?)")
.where("title = ?")
# Q 170 : # Milestone.of_projects(projects.reorder(nil)).count_by_state
Query(Milestone)
.where("project_id IN (?, ?)")
.group('state')
# Q 171 : # Namespace.eager_load(:owner, :route).where_full_path_in(usernames).index_by(&:full_path).transform_keys(&:downcase)
Query(Namespace)
.includes('owner')
.includes('route')
.where('path = ?')
# Q 172 : # Namespace.find(extra_group).kind
Query(Namespace)
.where("id = ?")
# Q 173 : # Namespace.find(ids.last)
Query(Namespace)
.where("id = ?")
# Q 174 : # Namespace.find(params[:namespace_key])
Query(Namespace)
.where("id = ?")
# Q 175 : # Namespace.find(parent_id_before_last_save)
Query(Namespace)
.where("id = ?")
# Q 176 : # Namespace.find(project_params[:namespace_id])
Query(Namespace)
.where("id = ?")
# Q 177 : # Namespace.find_by(id: id)
Query(Namespace)
.where("id = ?")
# Q 178 : # Namespace.find_by(id: params[:namespace_id])
Query(Namespace)
.where("id = ?")
# Q 179 : # Namespace.find_by(id: params[:new_namespace_id])
Query(Namespace)
.where("id = ?")
# Q 180 : # Namespace.find_by(id: params[:new_namespace_id])
Query(Namespace)
.where("id = ?")
# Q 181 : # Namespace.find_by_full_path(id)
Query(Namespace)
.where("full_path = ?")
# Q 182 : # Namespace.find_by_full_path(name)
Query(Namespace)
.where("full_path = ?")
# Q 183 : # Namespace.find_by_full_path(namespace_path)
Query(Namespace)
.where("full_path = ?")
# Q 184 : # Namespace.find_by_path_or_name(params[:username])
Query(Namespace)
.where("path = ?")
.pred_or("name = ?")
# Q 185 : # Namespace.find_by_path_or_name(s)
Query(Namespace)
.where("path = ?")
.pred_or("name = ?")
# Q 186 : # Namespace.for_user.find_by_full_path(path, follow_redirects: follow_redirects)
Query(Namespace)
.where("full_path = ?")
# Q 187 : # Namespace.unscoped.select([alias_as_column(projects[:id], "project_id"), cte_alias[:access_level]]).from(cte_alias).joins(:projects)
# Q 189 : # Namespace.where(id: descendants.select(:id)).update_all(share_with_group_lock: true)
Query(Namespace)
.where("id = ?")
# Q 190 : # Namespace.where(id: namespace_ids)
Query(Namespace)
.where("id = ?")
# Q 191 : # Namespace.where(parent: nil).all.pluck(:path)
Query(Namespace)
.where("parent = 0")
.select('path')
# Q 192 : # Namespace.where(type: "Group", id: Label.where(type: "GroupLabel").select("distinct group_id")).where(id: start_id..stop_id).pluck(:id)
Query(Namespace)
.where("type = ?")
.where("id < ?")
.where("id > ?")
.select('id')
# Q 193 : # Namespace.where(type: "Group", parent_id: ids).pluck(:id)
Query(Namespace)
.where("type = ?")
.where("parent_id = ?")
.select('id')
# Q 194 : # Note.find_by(id: upload.model_id)
Query(Note)
.where("id = ?")
# Q 195 : # Note.from_union([notes, commit_notes], remove_duplicates: false).includes(:noteable)
Query(Note)
.includes('noteable')
# Q 196 : # Note.user.where(project_id: [source_project_id, target_project_id]).for_commit_id(commit_ids)
Query(Note)
.where("project_id IN (?, ?)")
.where("commit_id IN (?, ?)")
# Q 197 : # Note.where(discussion_id: discussion_ids).fresh.to_a.group_by(&:discussion_id)
Query(Note)
.where("discussion_id = ?")
# Q 198 : # Note.where(id: notes.map(&:id))
Query(Note)
.where("id = ?")
# Q 199 : # Note.where(noteable_type: "Epic").where(discussion_id: discussion_ids).update_all("discussion_id=MD5(discussion_id)||substring(discussion_id from 1 for 8)")
Query(Note)
.where("noteable_type = ?")
.where("discussion_id = ?")
# Q 200 : # NoteDiffFile.joins(:diff_note).merge(notes.or(commit_notes)).includes(diff_note: :project)
Query(NoteDiffFile)
.joins('diff_note')
.where('diff_note.type = ?')
# Q 201 : # NotificationSetting.where(source_type: source_type, source_id: self_and_ancestors_ids)
Query(NotificationSetting)
.where("source_type = ?")
.where("source_id = ?")
# Q 203 : # PagesDomain.where(id: start_id..stop_id).find_each
Query(PagesDomain)
.where("id < ?")
.where("id > ?")
# Q 204 : # PagesDomainAcmeOrder.find_by_domain_and_token(params[:domain], params[:token])
Query(PagesDomainAcmeOrder)
.where("domain = ?")
.where("token = ?")
# Q 205 : # PersonalAccessToken.find_by_token(token)
Query(PersonalAccessToken)
.where("token = ?")
# Q 206 : # PersonalSnippet.find_by(id: params[:snippet_id])
Query(PersonalSnippet)
.where("id = ?")
# Q 207 : # PersonalSnippet.inc_relations_for_view.find_by(id: params[:id])
Query(PersonalSnippet)
.where("id = ?")
# Q 208 : # PoolRepository.includes(:source_project).find_each
Query(PoolRepository)
.includes('source_project')
# Q 211 : # Project.find(@project_id)
Query(Project)
.where("id = ?")
# Q 212 : # Project.find(data[:project][:id])
Query(Project)
.where("id = ?")
# Q 213 : # Project.find(issue_params[:project_id])
Query(Project)
.where("id = ?")
# Q 214 : # Project.find(note_project_id)
Query(Project)
.where("id = ?")
# Q 215 : # Project.find(params[:confidential_issue_project_id])
Query(Project)
.where("id = ?")
# Q 216 : # Project.find(params[:id])
Query(Project)
.where("id = ?")
# Q 217 : # Project.find(params[:move_to_project_id])
Query(Project)
.where("id = ?")
# Q 218 : # Project.find(params[:project_id])
Query(Project)
.where("id = ?")
# Q 219 : # Project.find(params[:source_project_id])
Query(Project)
.where("id = ?")
# Q 220 : # Project.find(project_id)
Query(Project)
.where("id = ?")
# Q 221 : # Project.find(project_id)
Query(Project)
.where("id = ?")
# Q 222 : # Project.find(project_id)
Query(Project)
.where("id = ?")
# Q 223 : # Project.find(project_id).namespace_id
Query(Project)
.where("id = ?")
.select('namespace_id')
# Q 224 : # Project.find_by(id: params[:project_id])
Query(Project)
.where("id = ?")
# Q 225 : # Project.find_by(id: project_id)
Query(Project)
.where("id = ?")
# Q 226 : # Project.find_by(id: project_id)
Query(Project)
.where("id = ?")
# Q 227 : # Project.find_by_full_path("#{
# namespace}/#{
# id}")
Query(Project)
.where("path = ?")
# Q 228 : # Project.find_by_full_path("#{
# project.namespace.full_path}/#{
# original_path}")
Query(Project)
.where("path = ?")
# Q 229 : # Project.find_by_full_path([params[:namespace_id], "/", params[:id]].join(""))
Query(Project)
.where("path = ?")
# Q 230 : # Project.find_by_full_path([params[:namespace_id], "/", params[:project_id]].join(""))
Query(Project)
.where("path = ?")
# Q 231 : # Project.find_by_full_path(full_path, follow_redirects: request.get?).present?
Query(Project)
.where("path = ?")
# Q 232 : # Project.find_by_path(match[:project_path])
Query(Project)
.where("path = ?")
# Q 233 : # Project.find_by_path(params[:project])
Query(Project)
.where("path = ?")
# Q 234 : # Project.find_by_path(project_path)
Query(Project)
.where("path = ?")
# Q 235 : # Project.find_by_path(project_path)
Query(Project)
.where("path = ?")
# Q 236 : # Project.find_by_path(project_path, follow_redirects: true)
Query(Project)
.where("path = ?")
# Q 237 : # Project.find_by_path(ref)
Query(Project)
.where("path = ?")
# Q 238 : # Project.find_by_id(array[0])
Query(Project)
.where("id = ?")
# Q 239 : # Project.find_by_id(project_id)
Query(Project)
.where("id = ?")
# Q 240 : # Project.find_by_id(project_id)
Query(Project)
.where("id = ?")
# Q 241 : # Project.find_by_id(subject_id)
Query(Project)
.where("id = ?")
# Q 242 : # Project.includes(:parent).where(id: start_id..end_id).each
Query(Project)
.where("id = ?")
# Q 244 : # Project.order_id_desc.without_deleted.with_route.limit(10)
Query(Project)
.where('updated_at = 0')
.return_limit('1')
# Q 245 : # Project.pending_delete.find_by_full_path(full_path)
Query(Project)
.select('pending_delete')
.where("full_path = ?")
# Q 246 : # Project.public_or_visible_to_user(user).where("projects.id IN (?)", @projects_for_nodes.values.map(&:id)).pluck(:id)
Query(Project)
.where('visibility_level = ?')
.select('id')
# Q 247 : # Project.sorted_by_activity.limit(PROJECTS_LIMIT)
Query(Project)
.return_limit('')
# Q 248 : # Project.unscoped.find_by(id: project_id)
Query(Project)
.where("id = ?")
# Q 249 : # Project.unscoped.where(id: project_id).where("last_activity_at <= ?", RESET_PROJECT_ACTIVITY_INTERVAL.ago).update_all(last_activity_at: created_at)
Query(Project)
.where('last_activity_at <= ?')
.where("id = ?")
# Q 250 : # Project.unscoped.where(id: project_id).where("last_repository_updated_at < ? OR last_repository_updated_at IS NULL", REPOSITORY_UPDATED_AT_INTERVAL.ago).update_all(last_repository_updated_at: created_at)
Query(Project)
.where("id = ?")
# Q 251 : # Project.where("EXISTS (SELECT 1 FROM todos WHERE todos.project_id = projects.id)").where(id: start_id..stop_id)
Query(Project)
.where("exists(todos, id = ?)")
.where("id < ?")
.where('id > ?')
# Q 252 : # Project.where(id: @contributed_project_ids).with_feature_available_for_user(feature, user).reorder(nil).select(:id)
Query(Project)
.where("id IN (? ?)")
.select('id')
# Q 253 : # Project.where(id: @project.id)
Query(Project)
.where("id = ?")
# Q 254 : # Project.where(id: events)
Query(Project)
.where("id = ?")
# Q 255 : # Project.where(id: project).select(:id).reorder(nil)
Query(Project)
.where("id = ?")
.select('id')
.order('')
# Q 256 : # Project.where(id: project_ids).ids_with_issuables_available_for(user)
Query(Project)
.where("id = ?")
# Q 257 : # Project.where(id: start_id..stop_id).with_pages_deployed.includes(:project_feature).find_each
Query(Project)
.where("id = ?")
.includes('project_feature')
# Q 258 : # Project.where(namespace_id: group_ids).select(:id)
Query(Project)
.where("namespace_id = ?")
.select('id')
# Q 259 : # Project.where(namespace_id: namespace_id, path: path_to_check).exists?
Query(Project)
.where("namespace_id = ?")
.where("path = ?")
.return_limit('1')
# Q 260 : # Project.where_full_path_in([full_path]).pluck(:id)
Query(Project)
.where("path IN (?, ?)")
.select('id')
# Q 264 : # ProjectAuthorization.select(:user_id).where(project_id: project_id)
Query(ProjectAuthorization)
.select('user_id')
.where("project_id = ?")
# Q 265 : # ProjectFeature.where(id: start_id..stop_id).joins(:project).where(pages_access_level: pages_access_level).where(projects: { visibility_level: project_visibility_level })
Query(ProjectFeature)
.where("id < ?")
.where("id > ?")
.joins('project')
.where("pages_access_level = ?")
.where("project.visibility_level = ?")
# Q 266 : # ProjectFeature.where(project_id: project_id).each
Query(ProjectFeature)
.where("project_id = ?")
# Q 267 : # ProjectMember.where(source_id: project_ids)
Query(ProjectMember)
.where("source_id = ?")
# Q 268 : # PrometheusMetric.find_by_identifier(:system_metrics_knative_function_invocation_count).to_query_metric.tap
Query(PrometheusMetric)
.where("identifier = ?")
# Q 269 : # Service.services_to_update.where(id: start_id..stop_id).update_all(confidential_note_events: true)
Query(Service)
.where("id < ?")
.where('id > ?')
# Q 270 : # Service.unscoped.where(type: :JiraService, active: true).includes(:jira_tracker_data).find_in_batches(batch_size: BATCH_SIZE)
Query(Service)
.where("type = ?")
.where("active = true")
# Q 271 : # Service.where(id: params[:id], template: true).first
Query(Service)
.where("id = ?")
.where("template = true")
.return_limit('1')
# Q 272 : # Service.where(template: true)
Query(Service)
.where("template = true")
# Q 273 : # SpamLog.find(params[:id])
Query(SpamLog)
.where("id = ?")
# Q 274 : # SpamLog.find(params[:id])
Query(SpamLog)
.where("id = ?")
# Q 275 : # SpamLog.order(id: :desc).page(params[:page])
Query(SpamLog)
.order('id')
# Q 276 : # Stage.find_by(name: self.stage || "test", pipeline_id: self.commit_id, project_id: self.project_id)
Query(Stage)
.where("name = ?")
.where("pipeline_id = ?")
.where("project_id = ?")
# Q 277 : # SystemHook.find(params[:hook_id])
Query(SystemHook)
.where("id = ?")
# Q 278 : # SystemHook.find(params[:id])
Query(SystemHook)
.where("id = ?")
# Q 279 : # Todo.where(project_id: project_id).where("user_id NOT IN (?)", authorized_users(project_id))
Query(Todo)
.where("project_id = ?")
.where("!(user_id IN (?, ?))")
# Q 280 : # Todo.where(target_type: "Issue", target_id: issue.id).where("user_id NOT IN (?)", min_reporters).where("user_id NOT IN (?)", assigned_users)
Query(Todo)
.where("target_type = ?")
.where("target_id = ?")
.where("!(user_id IN (?, ?))")
# Q 281 : # Upload.all.preload(:model)
Query(Upload)
.includes('model')
# Q 282 : # Upload.find_by(model: model, uploader: uploader_class.to_s, path: upload_paths)
Query(Upload)
.where("model = ?")
.where("uploader = ?")
.where("path = ?")
# Q 283 : # Upload.find_by(model: self, path: paths)
Query(Upload)
.where("model = ?")
.where("path = ?")
# Q 284 : # Upload.find_by(model: self, path: paths)
Query(Upload)
.where("model = ?")
.where("path = ?")
# Q 285 : # Upload.find_by(uploader: "FileUploader", path: upload_path)
Query(Upload)
.where("uploader = ?")
.where("path = ?")
# Q 286 : # Upload.joins("          JOIN projects
#   ON (uploads.model_type='Project' AND uploads.model_id=projects.id)
# ").where("projects.storage_version < :version OR projects.storage_version IS NULL", version: Project::HASHED_STORAGE_FEATURES[:attachments])
Query(Upload)
.joins('project')
.where('project.storage_version < ?')
# Q 287 : # Upload.where("lower(path) like ? or lower(path) like ? or lower(path) like ?", "%.jpg", "%.jpeg", "%.tiff")
Query(Upload)
.where("path = ?")
# Q 288 : # Upload.where(id: start_id..end_id, uploader: "AttachmentUploader", model_type: "Note").find_each
Query(Upload)
.where("id = ?")
.where("uploader = ?")
.where("model_type = ?")
# Q 289 : # Upload.where(store: ObjectStorage::Store::REMOTE, path: file_paths).pluck(:path)
Query(Upload)
.where("store = ?")
.where("path = ?")
.select('path')
# Q 290 : # Upload.where(store: store_type, uploader: @uploader_class.to_s, model_type: @model_class.base_class.sti_name)
Query(Upload)
.where("store = ?")
.where("uploader = ?")
.where("model_type = ?")
# Q 291 : # Upload.where(uploader: AvatarUploader.name, path: paths).find_each
Query(Upload)
.where("uploader = ?")
.where("path = ?")
# Q 292 : # User.admins.last
Query(User)
.where('admin = true')
.return_limit('1')
# Q 293 : # User.admins.order_id_asc.first
Query(User)
.where('admin = true')
.return_limit('1')
# Q 294 : # User.by_any_email(email).pluck(:id).first
Query(User)
.where('email = param[email]')
.pred_or('exists(emails, email = param[email])')
.select('id')
.return_limit('1')
# Q 295 : # User.by_any_email(emails).includes(:emails)
Query(User)
.where('email = param[email]')
.pred_or('exists(emails, email = param[email])')
.includes('emails')
# Q 296 : # User.find(@author_id)
Query(User)
.where("id = ?")
# Q 297 : # User.find(options[:user_id])
Query(User)
.where("id = ?")
# Q 298 : # User.find(session[:impersonator_id])
Query(User)
.where("id = ?")
# Q 299 : # User.find(session[:otp_user_id])
Query(User)
.where("id = ?")
# Q 300 : # User.find_by!(username: params[:user_id])
Query(User)
.where("username = ?")
# Q 301 : # User.find_by!(username: params[:user_id])
Query(User)
.where("username = ?")
# Q 302 : # User.find_by!(username: params[:user_id])
Query(User)
.where("username = ?")
# Q 303 : # User.find_by(email: user)
Query(User)
.where("email = ?")
# Q 304 : # User.find_by(id: created_by_id)
Query(User)
.where("id = ?")
# Q 305 : # User.find_by(id: user_id)
Query(User)
.where("id = ?")
# Q 306 : # User.find_by(id: id)
Query(User)
.where("id = ?")
# Q 307 : # User.find_by(id: params[:user_id])
Query(User)
.where("id = ?")
# Q 308 : # User.find_by(id: token.resource_owner_id)
Query(User)
.where("id = ?")
# Q 309 : # User.find_by(id: user)
Query(User)
.where("id = ?")
# Q 310 : # User.find_by(id: user_hash["gitlab_user"])
Query(User)
.where("id = ?")
# Q 311 : # User.find_by(id: user_id)
Query(User)
.where("id = ?")
# Q 312 : # User.find_by(id: user_id)
Query(User)
.where("id = ?")
# Q 313 : # User.find_by(incoming_email_token: incoming_email_token)
Query(User)
.where("incoming_email_token = ?")
# Q 314 : # User.find_by(incoming_email_token: incoming_email_token)
Query(User)
.where("incoming_email_token = ?")
# Q 315 : # User.find_by_any_email(committer_email)
Query(User)
.where("any_email = ?")
# Q 316 : # User.find_by_any_email(email)
Query(User)
.where('email = param[email]')
.pred_or('exists(emails, email = param[email])')
# Q 317 : # User.find_by_any_email(email)
Query(User)
.where('email = param[email]')
.pred_or('exists(emails, email = param[email])')
# Q 318 : # User.find_by_any_email(email)
Query(User)
.where('email = param[email]')
.pred_or('exists(emails, email = param[email])')
# Q 319 : # User.find_by_any_email(email).try(:id)
Query(User)
.where('email = param[email]')
.pred_or('exists(emails, email = param[email])')
.select('id')
# Q 320 : # User.find_by_any_email(email, confirmed: true)
Query(User)
.where('email = param[email]')
.pred_or('exists(emails, email = param[email])')
# Q 321 : # User.find_by_email(s)
Query(User)
.where("email = ?")
# Q 322 : # User.find_by_feed_token(token)
Query(User)
.where("feed_token = ?")
# Q 323 : # User.find_by_full_path(full_path, follow_redirects: request.get?).present?
Query(User)
.where("path = ?")
# Q 324 : # User.find_by_id(params[:assignee_id])
Query(User)
.where("id = ?")
# Q 325 : # User.find_by_id(params[:author_id])
Query(User)
.where("id = ?")
# Q 326 : # User.find_by_ssh_key_id(key_id)
Query(User)
.where("ssh_key_id = ?")
# Q 327 : # User.find_by_static_object_token(token)
Query(User)
.where("static_object_token = ?")
# Q 328 : # User.find_by_username(s)
Query(User)
.where("username = ?")
# Q 329 : # User.for_github_id(id).pluck(:id).first
Query(User)
.select('id')
.return_limit('1')
# Q 330 : # User.joins(:group_members).where(members: { source_id: ids }).to_a
Query(User)
.joins('group_members')
.where("source_id = ?")
# Q 331 : # User.joins(:identities).find_by("identities.extern_uid = ? AND identities.provider = 'gitlab'", gitlab_id.to_s)
Query(User)
.joins('identities')
# Q 332 : # User.joins(:issue_assignees).where("issue_assignees.issue_id" => issues_visible_to_user(user).select(:id)).distinct
Query(User)
.joins('issue_assignees')
.where("issue_id" = ?")
.distinct('')
# Q 333 : # User.joins(assigned_issues: :milestone).where("milestones.id = ?", id).distinct
Query(User)
.distinct('')
# Q 334 : # User.joins(projects: :group).where(namespaces: { id: self_and_descendants.select(:id) })
Query(User)
.joins('projects => group')
.where("projects.namespace_id IN (?, ?)")
.where("id = ?")
# Q 335 : # User.select(:id).joins(:identities).find_by("identities.extern_uid = ? AND identities.provider = 'bitbucket'", username).try(:id)
Query(User)
.joins('identities')
.where("identities.extern_uid = ?")
.where("identities.provider = 'bitbucket'")
.select('id')
# Q 336 : # User.select(:id).joins(:identities).where(identities[:provider].eq(:github).and(identities[:extern_uid].eq(id))).first.try(:id)
Query(User)
.joins('identities')
.where("identities.extern_uid = ?")
.where("identities.provider = 'bitbucket'")
.return_limit('1')
.select('id')
# Q 337 : # User.where(id: deprecated_assignee_id)
Query(User)
.where("id = ?")
# Q 338 : # User.where(id: members_with_descendants.select(:user_id)).reorder(nil)
Query(User)
.where("id = ?")
# Q 339 : # User.where(id: members_with_parents.select(:user_id)).reorder(nil)
Query(User)
.where("id = ?")
# Q 340 : # User.where(id: relation)
Query(User)
# Q 341 : # User.where(id: row["user_id"]).update_all(encrypted_otp_secret: row["old_value"])
Query(User)
.where("id = ?")
# Q 342 : # User.where(id: user[:id]).update_all(encrypted_otp_secret: new_value)
Query(User)
.where("id = ?")
# Q 343 : # User.where(private_profile: nil, id: start_id..stop_id).update_all(private_profile: false)
Query(User)
.where("private_profile = ?")
.where("id = ?")
# Q 344 : # User.where(reset_password_token: reset_password_token).first_or_initialize
Query(User)
.where("reset_password_token = ?")
# Q 345 : # WebHook.hooks_to_update.where(id: start_id..stop_id).update_all(confidential_note_events: true)
Query(WebHook)
.where("id = ?")
# Q 346 : # active.where("access_level > 0")
Query(Member)
.where("state = 'active'")
.where('access_level > 0')
# Q 347 : # active.where("milestones.start_date <= CURRENT_DATE")
Query(Milestone)
.where("state = 'active'")
.where('start_date < ?')
# Q 348 : # active.where("next_run_at < ?", Time.now)
Query(CiPipelineSchedule)
.where('active = true')
.where('next_run_at < ?')
# Q 349 : # active.where(access_level: DEVELOPER)
Query(Member)
.where("state = 'active'")
.where("access_level = ?")
# Q 350 : # active.where(access_level: GUEST)
Query(Member)
.where("state = 'active'")
.where("access_level = ?")
# Q 351 : # active.where(access_level: MAINTAINER)
Query(Member)
.where("state = 'active'")
.where("access_level = ?")
# Q 352 : # active.where(access_level: OWNER)
Query(Member)
.where("state = 'active'")
.where("access_level = ?")
# Q 353 : # active.where(access_level: REPORTER)
Query(Member)
.where("state = 'active'")
.where("access_level = ?")
# Q 354 : # active.where(access_level: [OWNER, MAINTAINER])
Query(Member)
.where("state = 'active'")
.where("access_level = ?")
# Q 355 : # authorized_projects(Gitlab::Access::REPORTER).where(id: projects)
Query(User)
.where("user_id = ?")
.where("id = ?")
# Q 356 : # authorized_users(project_id).select(:user_id).where("access_level >= ?", 20)
Query(Issue)
.select('user_id')
# Q 357 : # award_emoji.group_by(&:name)
Query(AwardEmoji)
.groupby('name')
# Q 358 : # base.pluck(:id)
# Q 359 : # board.lists.destroyable.find(params[:id])
Query(List)
.where("board_id = ?")
.where("id = ?")
# Q 360 : # board.lists.find(params[:id])
Query(List)
.where("board_id = ?")
.where("id = ?")
# Q 361 : # board.lists.movable.preload_associations
Query(List)
.where("type IN (?, ?)")
.where("board_id = ?")
# Q 362 : # boards.find(params[:id])
Query(Board)
.where("id = ?")
# Q 363 : # build_ports(image).select(&:valid?)
# Q 365 : # builds.where(status: available_statuses && scope)
Query(Build)
.where("status = ?")
# Q 366 : # by_user_group(user, group).order(updated_at: :desc)
Query(BoardGroupRecentVisit)
.order('updated_at')
# Q 367 : # by_user_project(user, project).order(updated_at: :desc)
Query(BoardProjectRecentVisit)
.order('updated_at')
# Q 368 : # by_username(username).take
Query(User)
.where('username = ?')
.return_limit('1')
# Q 369 : # by_username(username).take!
Query(User)
.where('username = ?')
# Q 370 : # canonical(issue).take
# Q 372 : # ci_services.reorder(nil).find_by(active: true)
Query(CiService)
.where("active = ?")
# Q 373 : # closing_merge_requests(ids, user).group(:issue_id).pluck("issue_id", "COUNT(*) as count")
Query(MergeRequestsClosingIssues)
.group('issue_id')
.select('issue_idCOUNT(*) as count')
# Q 374 : # commits.group_by(&:author_email).map
Query(Commit)
.groupby('author_email')
# Q 375 : # commits.without_merge_commits.reverse.find(&:description?).safe_message
Query(Commit)
.where("id = ?")
# Q 376 : # user.callouts.find_by(feature_name: UserCallout.feature_names[feature_name])
Query(UserCallout)
.where("user_id = ?")
.where("feature_name = ?")
# Q 377 : # user.created_projects.where(import_type: import_type).includes(:import_state)
Query(Project)
.where("user_id = ?")
.where("import_type = ?")
.includes('import_state')
# Q 378 : # user.created_projects.where(import_type: import_type, import_source: import_sources).includes(:import_state)
Query(Project)
.where("user_id = ?")
.where("import_type = ?")
.where("import_source = ?")
.includes('import_state')
# Q 379 : # user.emails.find(params[:id])
Query(Email)
.where("user_id = ?")
.where("id = ?")
# Q 380 : # user.expanded_groups_requiring_two_factor_authentication.reorder(name: :asc)
Query(user)
.order('name')
# Q 381 : # user.gpg_keys.find(params[:id])
Query(GpgKey)
.where("user_id = ?")
.where("id = ?")
# Q 382 : # user.gpg_keys.select(&:persisted?)
Query(GpgKey)
.where("user_id = ?")
# Q 383 : # user.identities.find_by(provider: provider)
Query(Identity)
.where("user_id = ?")
.where("provider = ?")
# Q 384 : # user.keys.find(params[:id])
Query(Key)
.where("user_id = ?")
.where("id = ?")
# Q 385 : # user.keys.find(params[:id])
Query(Key)
.where("user_id = ?")
.where("id = ?")
# Q 386 : # user.keys.select(&:persisted?)
Query(Key)
.where("user_id = ?")
.select('persisted?')
# Q 387 : # user.notification_settings.find(params[:id])
Query(NotificationSetting)
.where("user_id = ?")
.where("id = ?")
# Q 388 : # user.notification_settings.for_groups.order(:id)
Query(NotificationSetting)
.where("user_id = ?")
.order('id')
# Q 389 : # user.notification_settings.for_projects.order(:id)
Query(NotificationSetting)
.where("user_id = ?")
.order('id')
# Q 390 : # user.oauth_applications.find(params[:id])
# Q 391 : # user.u2f_registrations.find(params[:id])
Query(U2fRegistration)
.where("user_id = ?")
.where("id = ?")
# Q 392 : # deploy_key.projects.find
Query(Project)
.joins("deploy_keys")
.where("deploy_keys.id = ?")
.where("id = ?")
# Q 393 : # deploy_keys.find(params[:id])
Query(DeployKey)
.where("id = ?")
# Q 394 : # deploy_keys_projects.find_by(project: project)
Query(DeployKeysProject)
.where("project = ?")
# Q 395 : # deployment.try(:last?)
Query(Deployment)
.select('last?')
# Q 396 : # deployments.find_by(iid: deployment_iid)
Query(Deployment)
.where("iid = ?")
# Q 397 : # deployments.where("created_at > ?", params[:after].to_time)
Query(Deployment)
.where('created_at > ?')
# Q 398 : # deployments.where("deployments.created_at > ?", from)
Query(Deployment)
.where('created_at > ?')
# Q 399 : # deployments.where(projects: { id: options[:projects] })
Query(Deployment)
.where("id = ?")
# Q 400 : # emails.confirmed.where(email: self.email).any?
Query(Email)
.where("email = ?")
# Q 401 : # emails.find
Query(Email)
.where("id = ?")
# Q 402 : # emails.find_by(email: email)
Query(Email)
.where("email = ?")
# Q 403 : # emails.map { |email|
#   
#   user_id_for_email(email)
# }.compact.uniq
Query(Email)
.joins('user')
.where('user.id = ?')
.distinct('')
# Q 404 : # environment.deployments.find_successful_deployment!(params[:id])
Query(Deployment)
.where("environment_id = ?")
# Q 405 : # environment.deployments.order(id: :desc).page(params[:page])
Query(Deployment)
.where("environment_id = ?")
.order('id')
# Q 406 : # environment.deployments.reorder(created_at: :desc)
Query(Deployment)
.where("environment_id = ?")
.order('created_at')
# Q 407 : # environment.last_deployment
Query(Deployment)
.where("id = ?")
# Q 408 : # environment.terminals.try(:first)
Query(Environment)
.select('first')
# Q 409 : # environments.with_state(:available).reorder(production_first).first
Query(Environment)
.where("state = 2")
.return_limit('1')
# Q 410 : # events.find
Query(Event)
.where("id = ?")
# Q 411 : # events.where(action: Event::COMMENTED)
Query(Event)
.where("action = ?")
# Q 412 : # events.where(action: Event::MERGED)
Query(Event)
.where("action = ?")
# Q 413 : # events.where(action: Event::PUSHED)
Query(Event)
.where("action = ?")
# Q 414 : # events.where(action: [Event::CREATED, Event::UPDATED, Event::CLOSED, Event::REOPENED], target_type: "Issue")
Query(Event)
.where("action = ?")
.where("target_type = ?")
# Q 415 : # events.where(action: [Event::JOINED, Event::LEFT, Event::EXPIRED])
Query(Event)
.where("action = ?")
# Q 416 : # find(ids)
Query(Deployment)
.where("id = ?")
# Q 417 : # find(repo)
Query(Commit)
.where("id = ?")
# Q 418 : # find_by(id: user_id)
Query(User)
.where("id = ?")
# Q 419 : # find_by(invite_token: invite_token)
Query(Member)
.where("invite_token = ?")
# Q 420 : # find_by(reply_key: reply_key)
Query(SentNotification)
.where("reply_key = ?")
# Q 421 : # find_by(start_commit_sha: diff_refs.start_sha, head_commit_sha: diff_refs.head_sha, base_commit_sha: diff_refs.base_sha)
Query(MergeRequestDiff)
.where("start_commit_sha = ?")
.where("head_commit_sha = ?")
.where("base_commit_sha = ?")
# Q 422 : # find_by(template: true)
Query(Service)
.where("template = ?")
# Q 423 : # finished.where("finished_at < ?", date)
Query(Build)
.where("finished_at < ?")
# Q 424 : # for_sha(shas).group(:sha).select("max(id)")
Query(Pipeline)
.where("sha IN (?, ?)")
.group('sha')
.select('max(id)')
# Q 425 : # from_union([with_issues_enabled, with_merge_requests_enabled]).select(:id)
Query(Project)
.select('id')
# Q 427 : # gpg_key.subkeys.pluck(:id)
Query(GpgKeySubkey)
.where("gpg_key_id = ?")
.select('id')
# Q 428 : # group(:target_branch).select(:target_branch).reorder("MAX(merge_requests.updated_at) DESC").limit(limit).pluck(:target_branch)
Query(MergeRequest)
.group('target_branch')
.order('updated_at')
.return_limit('10')
.select('target_branch')
# Q 429 : # group.all_projects.where(import_type: "manifest").where(creator_id: user).includes(:import_state)
Query(Group)
.where("import_type = ?")
.where("creator_id = ?")
# Q 430 : # group.ancestors.find
Query(Group)
.where('parent_id = ?')
.where("id = ?")
# Q 431 : # group.members.collect(&:user)
Query(Member)
.joins('source')
.where('source.id = ?')
.select('user_id')
# Q 432 : # group.members.find_by(user_id: user_id)
Query(Group)
.joins('source')
.where('source.id = ?')
.where("user_id = ?")
# Q 433 : # group.milestones.find_by_iid(params[:id])
Query(Milestones)
.where("iid = ?")
# Q 434 : # group.projects.reject(&:lfs_enabled?).size
Query(Project)
.joins("group")
.where("group.id = ?")
.where('lfs_enabled = true')
# Q 435 : # group.projects.select(&:lfs_enabled?).size
Query(Project)
.joins("group")
.where('lfs_enabled = true')
# Q 436 : # group.try(:avatar_url)
Query(Group)
.select('avatar_url')
# Q 437 : # group.try(:avatar_url)
Query(Group)
.select('avatar_url')
# Q 438 : # group.variables.find_by(key: "AUTO_DEVOPS_DOMAIN").value.presence
Query(Group)
.where("key = ?")
# Q 439 : # group_members.find
Query(GroupMember)
.where("id = ?")
# Q 440 : # group_members.find_by(user_id: user)
Query(GroupMember)
.where("user_id = ?")
# Q 441 : # group_members.where(source: group_ids).group(:source_id).maximum(:access_level)
Query(Group)
.where("source = ?")
.where("id = ?")
# Q 443 : # groups.pluck(:id)
Query(Group)
.select('id')
# Q 445 : # groups.where(parent_id: params[:parent_id]).page(params[:page])
Query(Group)
.where("parent_id = ?")
# Q 446 : # identities.find
Query(Identity)
.where("id = ?")
# Q 447 : # identities.find
Query(Identity)
.where("id = ?")
# Q 448 : # includes(:author)
Query(Snippet)
.includes('author')
# Q 449 : # includes(:author, :project, project: [:project_feature, :import_data, :namespace]).preload(:target, :push_event_payload)
Query(Event)
.includes('author')
.includes('project')
.includes('target')
.includes('push_event_payload')
# Q 450 : # includes(:label, :user)
Query(ResourceLabelEvent)
.includes('label')
.includes('user')
# Q 451 : # includes(:project).references(:projects).where(source_type: "Project").where.not(projects: { id: nil, pending_delete: true })
Query(NotificationSetting)
.includes('project')
.where("source_type = ?")
.where("id = ?")
# Q 452 : # includes(:statistics)
Query(Project)
.includes('statistics')
# Q 453 : # includes(:subkeys)
Query(GpgKey)
.includes('subkeys')
# Q 457 : # issues.preload(:milestone, :assignees, project: [:route, { namespace: [:route] }], labels: [:priorities], notes: [:award_emoji, :author])
Query(Issue)
.includes('assignees')
# Q 458 : # issues.where(project_id: project_ids_relation)
Query(Issue)
.where("project_id = ?")
# Q 459 : # issues.where(projects: { id: options[:projects] })
Query(Issue)
.where("project_id IN (?, ?)")
# Q 461 : # joins("INNER JOIN namespaces project_namespace ON project_namespace.id = projects.namespace_id").where("project_namespace.share_with_group_lock = ?", false).select("projects.id AS project_id, LEAST(project_group_links.group_access, members.access_level) AS access_level")
# Q 462 : # joins("INNER JOIN project_mirror_data import_state ON import_state.project_id = projects.id")
Query(Project)
.joins('project => namespace')
.where("project.namespace.share_with_group_lock = false")
# Q 463 : # joins("INNER JOIN projects ON projects.id = members.source_id").where("projects.namespace_id in (?)", groups.select(:id))
Query(ProjectMember)
.joins('project')
.where("project.namespace_id IN (?, ?)")
# Q 464 : # joins("INNER JOIN routes ON routes.source_id = projects.id AND routes.source_type = 'Project'").where(where)
Query(Project)
.joins('project')
# Q 465 : # joins("INNER JOIN routes rs ON rs.source_id = projects.id AND rs.source_type = 'Project'").where("rs.path LIKE ?", "#{
# sanitize_sql_like(path)}/%")
# Q 468 : # joins("LEFT JOIN project_features ON projects.id = project_features.project_id")
Query(Project)
.left_outer_joins('project_feature')
# Q 469 : # joins("LEFT JOIN project_statistics ps ON ps.namespace_id = namespaces.id").group("namespaces.id").select("namespaces.*", "COALESCE(SUM(ps.storage_size), 0) AS storage_size", "COALESCE(SUM(ps.repository_size), 0) AS repository_size", "COALESCE(SUM(ps.wiki_size), 0) AS wiki_size", "COALESCE(SUM(ps.lfs_objects_size), 0) AS lfs_objects_size", "COALESCE(SUM(ps.build_artifacts_size), 0) AS build_artifacts_size", "COALESCE(SUM(ps.packages_size), 0) AS packages_size")
Query(Namespace)
.left_outer_joins('project_statistics => project')
.select("project_statistics.type, project_statistics.project.id")
# Q 471 : # joins(:ci_cd_settings).where(project_ci_cd_settings: { group_runners_enabled: true })
Query(Project)
.joins('ci_cd_settings')
.where("group_runners_enabled = ?")
# Q 472 : # joins(:deploy_keys_projects).where("deploy_keys_projects.project_id in (?)", projects)
Query(DeployKey)
.joins('deploy_keys_projects')
.where('deploy_keys_projects.id IN (?, ?)')
# Q 473 : # joins(:diff_note).where(notes: { project_id: project_id, commit_id: oids })
Query(NoteDiffFile)
.joins('diff_note')
.where("project_id = ?")
# Q 474 : # joins(:emails).where(emails: { email: emails })
Query(User)
.joins('emails')
.where("exists(emails, email = ?)")
# Q 475 : # joins(:environment).where(environments: { name: name })
Query(KubernetesNamespace)
.joins('environment')
.where("name = ?")
# Q 476 : # joins(:events).where("events.action = ?", Event::PUSHED)
Query(Project)
.joins('events')
.where("events.action = ?")
# Q 477 : # joins(:groups).where(namespaces: { id: hierarchy_groups })
Query(Runner)
.joins('groups')
.where("id = ?")
# Q 478 : # joins(:issues, :notes, :merge_requests).order("issues.created_at, notes.created_at, merge_requests.created_at DESC")
Query(Project)
.joins('issues')
.joins('notes')
.joins('merge_requests')
.order('id, created_at')
# Q 479 : # joins(:merge_request).joins("INNER JOIN project_features ON merge_requests.target_project_id = project_features.project_id").where("project_features.merge_requests_access_level >= :access OR EXISTS(:authorizations)", access: ProjectFeature::ENABLED, authorizations: user.authorizations_for_projects(min_access_level: Gitlab::Access::REPORTER, related_project_column: "merge_requests.target_project_id"))
Query(MergeRequestsClosingIssues)
.joins('merge_request => target_project')
.where("merge_request.target_project.archived = false")
# Q 480 : # joins(:merge_request).joins("INNER JOIN project_features ON merge_requests.target_project_id = project_features.project_id").where("project_features.merge_requests_access_level >= :access", access: ProjectFeature::ENABLED)
Query(MergeRequestsClosingIssues)
.joins('merge_request => target_project')
.where("merge_request.target_project.archived = false")
# Q 481 : # joins(:merge_request).where(merge_requests: { target_project_id: project_id })
Query(MergeRequestDiff)
.joins('merge_request')
.where("merge_request.target_project_id = ?")
# Q 482 : # joins(:merge_request_diff_commits).where(merge_request_diff_commits: { sha: sha }).reorder(nil)
Query(MergeRequestDiff)
.joins('merge_request_diff_commits')
.where("merge_request_diff_commits.sha = ?")
# Q 484 : # joins(:milestones).where("milestones.id" => ids).distinct
Query(Project)
.joins('milestones')
.where("milestones.id IN (?, ?)")
.distinct('')
# Q 485 : # joins(:namespace).where(namespaces: { type: "Group" }).select(:namespace_id)
Query(Project)
.joins('namespace')
.where("namespaces.type = ?")
.select('namespace_id')
# Q 486 : # joins(:pages_domain).find_by(pages_domains: { domain: domain_name }, challenge_token: challenge_token)
Query(PagesDomainAcmeOrder)
.joins('pages_domain')
.where("domain = ?")
.where("challenge_token = ?")
# Q 487 : # joins(:pages_metadatum).merge(ProjectPagesMetadatum.deployed)
Query(Project)
.joins('pages_metadatum')
.where("pages_metadatum.id = ?")
# Q 488 : # joins(:pages_metadatum).merge(ProjectPagesMetadatum.deployed)
Query(Project)
.joins('pages_metadatum')
.where("pages_metadatum.id = ?")
# Q 489 : # joins(:priorities).where(label_priorities: { project_id: project }).reorder("label_priorities.priority ASC, labels.title ASC")
Query(Label)
.joins('priorities')
.where("priorities.project_id = ?")
.order('id, priority, title')
# Q 490 : # joins(:project).where("projects.visibility_level IN (?)", levels)
Query(Snippet)
.joins('project')
.where('project.visibility_level IN (?, ?)')
# Q 491 : # joins(:project).where(projects: { pending_delete: false })
Query(DeployKeysProject)
.joins('project')
.where("project.pending_delete = false")
# Q 492 : # joins(:projects).where(projects: { namespace_id: namespace_id })
Query(Cluster)
.joins('projects')
.where("projects.namespace_id = false")
# Q 493 : # joins(:push_event_payload).where(push_event_payloads: { action: actions })
Query(PushEvent)
.joins('push_event_payload')
.where("push_event_payload.action = ?")
# Q 494 : # joins(:push_event_payload).where(push_event_payloads: { ref_type: ref_type })
Query(PushEvent)
.joins('push_event_payload')
.where("push_event_payload.ref_type = ?")
# Q 495 : # joins(:remote_mirrors).where(remote_mirrors: { enabled: true }).distinct
Query(Project)
.joins('remote_mirrors')
.where("remote_mirrors.enabled = true")
.distinct('')
# Q 496 : # joins(:repository_languages).where(repository_languages: { programming_language_id: lang_id_query })
Query(Project)
.joins('repository_languages')
.where("repository_languagesprogramming_language_id = ?")
# Q 497 : # joins(:runner_projects).where(ci_runner_projects: { project_id: project_id })
Query(CiRunner)
.joins('runner_projects')
.where("runner_projects.project_id = ?")
# Q 498 : # joins(:subscriptions).where(subscriptions: { user_id: user_id, subscribed: true })
# Q 499 : # joins(:target_project)
Query(MergeRequest)
.joins('target_project')
# Q 500 : # joins(:user).group(:source_id).count
Query(Group)
.joins('users')
# Q 501 : # joins(:user).merge(User.order_name_asc)
Query(UsersStarProject)
.joins('user')
.where("user.name = ?")
# Q 502 : # joins(:user).merge(User.order_name_desc)
Query(UsersStarProject)
.joins('user')
.where("user.name = ?")
# Q 503 : # joins(:user).merge(User.with_public_profile)
Query(UsersStarProject)
.joins('user')
.where('user.private_profile = false')
# Q 504 : # joins(:user).merge(User.with_visible_profile(user))
Query(UsersStarProject)
.joins('user')
.where('user.private_profile = false')
# Q 505 : # joins(project: :project_feature).where(project_features: { column => levels })
Query(Snippet)
.joins("project => project_feature")
.where("project.project_feature.column = ?")
# Q 508 : # labels.find
Query(Label)
.where("id = ?")
# Q 509 : # labels.find_by_id(id_or_title)
Query(Label)
.where("id = ?")
# Q 510 : # labels.find_by_title(id_or_title)
Query(Label)
.where("title = ?")
# Q 511 : # labels.group_by(&:title)
# Q 512 : # labels.order("title ASC").pluck(:title)
Query(Label)
.order('title')
.select('title')
# Q 514 : # left_join_users.reorder(Gitlab::Database.nulls_last_order("users.last_sign_in_at", "ASC"))
Query(Member)
.order('')
# Q 515 : # left_join_users.reorder(Gitlab::Database.nulls_last_order("users.last_sign_in_at", "DESC"))
Query(Member)
.order('')
# Q 516 : # left_join_users.reorder(Gitlab::Database.nulls_last_order("users.name", "ASC"))
Query(Member)
.order('')
# Q 517 : # left_join_users.reorder(Gitlab::Database.nulls_last_order("users.name", "DESC"))
Query(Member)
.order('')
# Q 518 : # left_join_users.where(user_ok).where(requested_at: nil).reorder(nil)
Query(Member)
.where("requested_at = ?")
.order('')
# Q 519 : # left_join_users.where(users: { state: "active" }).non_request.reorder(nil)
Query(Member)
.where("state = ?")
.order('')
# Q 520 : # left_joins(issue: :assignees)
Query(Todo)

# Q 521 : # left_outer_joins(:pages_metadatum).where(project_pages_metadata: { project_id: nil })
Query(Project)
.left_outer_joins('pages_metadatum')
.where("project_id = ?")
# Q 522 : # lfs_objects_projects.where(project_id: project.id).exists?
Query(LfsObjectsProject)
.where("project_id = ?")
.return_limit('1')
# Q 523 : # links.find
Query(Link)
.where("id = ?")
# Q 524 : # list.find
Query(List)
.where("id = ?")
# Q 525 : # manageable_groups(include_groups_with_developer_maintainer_access: include_groups_with_developer_maintainer_access).eager_load(:route).order("routes.path")
Query(User)
.order('id, path')
# Q 526 : # members.maintainers.order_recent_sign_in.limit(ACCESS_REQUEST_APPROVERS_TO_BE_NOTIFIED_LIMIT)
Query(Member)
.return_limit('')
# Q 527 : # members.owners.order_recent_sign_in.limit(ACCESS_REQUEST_APPROVERS_TO_BE_NOTIFIED_LIMIT)
Query(Member)
.return_limit('')
# Q 528 : # members.where(id: member_user_ids)
Query(Member)
.where("id = ?")
# Q 529 : # members.where(project_authorizations: { access_level: level })
Query(Member)
.where("access_level = ?")
# Q 530 : # merge_request.merge_request_diff.merge_request_diff_files.where(deleted_file: false)
Query(MergeRequestDiffFile)
.where("id = ?")
.where("merge_request_diff_id = ?")
.where("deleted_file = ?")
# Q 531 : # merge_request_diff_commits.where(sha: shas)
Query(MergeRequestDiffCommit)
.where("sha = ?")
# Q 532 : # merge_request_diff_files.pluck(:new_path, :old_path).flatten.uniq
Query(MergeRequestDiffFile)
.select('new_path')
.select('old_path')
.distinct('')
# Q 533 : # merge_requests.find
Query(MergeRequest)
.where("id = ?")
# Q 534 : # merge_requests.where("merge_request_metrics.merged_at >= ?", previous_deployment.finished_at)
Query(MergeRequest)

# Q 535 : # merge_requests.where(source_project_id: self.id)
Query(MergeRequest)
.where("source_project_id = ?")
# Q 536 : # metrics.find
Query(Metric)
.where("id = ?")
# Q 537 : # milestone.group.full_name
Query(Group)
.where("id = ?")
# Q 538 : # milestones.find
Query(Milestone)
.where("id = ?")
# Q 539 : # milestones.reorder("updated_at DESC")
Query(Milestone)
.order('id, updated_at')
# Q 540 : # milestones.reorder(nil).group(:state).count
Query(Group)
.order('')
.where("id = ?")
# Q 541 : # milestones.where(project_id: authorized_project_ids_relation)
Query(Milestone)
.where("project_id = ?")
# Q 542 : # milestones.where(project_id: project.id)
Query(Milestone)
.where("project_id = ?")
# Q 543 : # milestones.where(project_id: project_ids_relation).select(:project_id).distinct.pluck(:project_id)
Query(Milestone)
.where("project_id = ?")
.select('project_id')
.distinct('')
.select('project_id')
# Q 544 : # monitoring_services.reorder(nil).find_by(active: true)
Query(MonitoringService)
.order('')
.where("active = ?")
# Q 545 : # namespace.projects.find_by(path: project.path)
Query(Project)
.where("namespace_id = ?")
.where("path = ?")
# Q 546 : # namespace.share_with_group_lock
Query(Namespace)
.select('share_with_group_lock')
# Q 547 : # newest_first(ref: ref).pluck(:status).first
Query(Pipeline)
.select('status')
.return_limit('1')
# Q 548 : # notes.find(&:to_be_resolved?)
Query(Note)
.where("id = ?")
# Q 549 : # notes.inc_relations_for_view.includes(:noteable).fresh
Query(Note)
.includes('noteable')
# Q 550 : # notes.includes(:author)
Query(Note)
.includes('author')
# Q 551 : # notes.includes(:author, :award_emoji)
Query(Note)
.includes('author')
# Q 552 : # notes.new_diff_notes.joins(:note_diff_file).where("note_diff_files.old_path IN (?) OR note_diff_files.new_path IN (?)", paths, paths).positions
Query(Note)
.joins('note_diff_file')
# Q 553 : # notes.select(&:resolved?)
Query(Note)
.select('resolved?')
# Q 554 : # notes.system.reorder(nil).find_by(note: "merged").created_at
Query(Note)
.select('system')
.order('')
.where("note = ?")
.select('created_at')
# Q 555 : # notes.where(discussion_id: discussion_id)
Query(Note)
.where("discussion_id = ?")
# Q 556 : # notification_settings(hierarchy_order: hierarchy_order).where(user: user)
Query(Group)
.where("user = ?")
# Q 557 : # notification_settings.find
Query(NotificationSetting)
.where("id = ?")
# Q 558 : # notification_settings.find { |n|
#   
#   n.notification_email.present?
# }.notification_email
Query(NotificationSetting)
.where("id = ?")
.select('notification_email')
# Q 559 : # order("created_at DESC")
Query(ProjectSnippet)
.order('id, created_at')
# Q 560 : # order("created_at DESC")
Query(Snippet)
.order('id, created_at')
# Q 561 : # order("environment_id, deployments.id DESC").select("DISTINCT ON (environment_id) deployments.*")
Query(Deployment)
.order('id, environment_id')
.select('DISTINCT ON (environment_id) deployments.*')
# Q 562 : # order(:id).last
Query(Term)
.order('id')
.return_limit('1')
# Q 563 : # order(:list_type, :position)
Query(List)
.order('list_type, position')
# Q 564 : # order(:name)
Query(CommitStatus)
.order('name')
# Q 565 : # order(:name)
Query(ContainerRepository)
.order('name')
# Q 566 : # order(:relative_position, :id)
Query(Stage)
.order('relative_position, id')
# Q 567 : # order(Arel.sql(query))
Query(Pipeline)
.order('')
# Q 568 : # order(Arel::Nodes::Ascending.new(arel_table[:title].lower))
Query(Milestone)
.order('')
# Q 569 : # order(Gitlab::Database.nulls_first_order("(#{
# max_deployment_id_sql})", "ASC"))
Query(Environment)
.order('')
# Q 570 : # order(contacted_at: :asc)
Query(Runner)
.order('contacted_at')
# Q 571 : # order(created_at: :desc)
Query(Runner)
.order('created_at')
# Q 572 : # order(created_at: :desc)
Query(Link)
.order('created_at')
# Q 573 : # order(id: :desc)
Query(Pipeline)
.order('id')
# Q 574 : # order(id: :desc)
Query(Runner)
.order('id')
# Q 575 : # order(id: :desc).limit(100)
Query(MergeRequestDiff)
.order('id')
.return_limit('')
# Q 576 : # order(project_id: :desc, date: :desc)
Query(ProjectDailyStatistic)
.order('project_id, date')
# Q 577 : # order(released_at: :desc)
Query(Release)
.order('released_at')
# Q 578 : # pipeline.builds.latest.where(status: status).where.not(started_at: nil).order(:started_at)
Query(Build)
.where("pipeline_id = ?")
.where("status = ?")
.where("started_at = ?")
.order('started_at')
# Q 579 : # pipeline.builds.take
Query(Build)
.where("pipeline_id = ?")
.return_limit('1')
# Q 580 : # pipeline.builds.where(stage: name)
Query(Build)
.where("pipeline_id = ?")
.where("stage = ?")
# Q 581 : # pipeline.statuses.where(stage: name)
Query(CommitStatus)
.where("pipeline_id = ?")
.where("stage = ?")
# Q 582 : # pipelines_for(ref, sha).find_by(id: id)
Query(Project)
.where("id = ?")
# Q 583 : # pluck(:name)
Query(Environment)
.select('name')
# Q 584 : # preload(:assignees, :author, :notes, :labels, :milestone, :timelogs, latest_merge_request_diff: [:merge_request_diff_commits], metrics: [:latest_closed_by, :merged_by], target_project: [:route, { namespace: :route }], source_project: [:route, { namespace: :route }])
Query(MergeRequest)
.includes('assignees')
# Q 585 : # preload(:board, label: :priorities)
Query(List)
.includes('board')
# Q 586 : # preload(:destroyable_lists)
Query(Board)
.includes('destroyable_lists')
# Q 587 : # preload(:emails)
Query(User)
.includes('emails')
# Q 588 : # preload(:owner, :project)
Query(PipelineSchedule)
.includes('owner')
.includes('project')
# Q 589 : # preload(:project, :user)
Query(CommitStatus)
.includes('project')
.includes('user')
# Q 590 : # preload(:source_project)
Query(MergeRequest)
.includes('source_project')
# Q 591 : # preload(:target, :author, :note, group: :route, project: [:route, { namespace: :route }])
Query(Todo)
.includes('target')
.includes('author')
.includes('note')
# Q 592 : # preload(:timelogs, :assignees, :author, :notes, :labels, project: [:route, { namespace: :route }])
Query(Issue)
.includes('assignees')
# Q 593 : # preload(:user)
Query(UsersStarProject)
.includes('user')
# Q 594 : # project.all_lfs_objects.where(oid: objects.map { |o|
#   
#   o["oid"].to_s
# }).pluck(:oid)
Query(Project)
.where("oid = ?")
.select('oid')
# Q 595 : # project.all_pipelines.includes(builds: :tags, user: :status).find_by!(id: params[:id]).present(user: user)
Query(Ci::Pipeline)
.where("project_id = ?")
.where("id = ?")
# Q 596 : # project.ancestors_upto.compact.include?(milestone.group)
Query(Project)
.where("id != 0")
# Q 597 : # project.authorized_users.find_by_username(phabricator_user.username)
Query(User)
.where("project_id = ?")
.where("username = ?")
# Q 598 : # project.builds.find(params[:id])
Query(Ci::Build)
.where("project_id = ?")
.where("id = ?")
# Q 599 : # project.builds.find(params[:id]).present(user: user)
Query(Ci::Build)
.where("project_id = ?")
.where("id = ?")
# Q 600 : # project.builds.find_by_id(params[:build_id])
Query(Ci::Build)
.where("project_id = ?")
.where("id = ?")
# Q 601 : # project.builds.find_by_id(params[:job_id])
Query(Ci::Build)
.where("project_id = ?")
.where("id = ?")
# Q 602 : # project.ci_pipelines.order(id: :desc).find_by(sha: diff_base_sha, ref: target_branch)
Query(Ci::Pipeline)
.where("project_id = ?")
.order('id')
.where("sha = ?")
.where("ref = ?")
# Q 603 : # project.ci_pipelines.where(sha: sha)
Query(Ci::Pipeline)
.where("project_id = ?")
.where("sha = ?")
# Q 604 : # project.container_repositories.find(params[:id])
Query(ContainerRepository)
.where("project_id = ?")
.where("id = ?")
# Q 605 : # project.container_repositories.find(params[:repository_id])
Query(ContainerRepository)
.where("project_id = ?")
.where("id = ?")
# Q 606 : # project.deploy_keys_projects.find_by!(deploy_key: key_id)
Query(DeployKeysProject)
.where("project_id = ?")
.where("deploy_key = ?")
# Q 607 : # project.deploy_tokens.find_by(name: DeployToken::GITLAB_DEPLOY_TOKEN_NAME).present?
Query(DeployToken)
.where("project_id = ?")
.where("name = ?")
# Q 608 : # project.deployments.joins(:environment).where(environments: { name: self.environment.name }, ref: self.ref).where.not(id: self.id).take
Query(Deployment)
.where("project_id = ?")
.joins('environment')
.where("name = ?")
.where("ref = ?")
.where("id = ?")
.return_limit('1')
# Q 609 : # project.environments.find(params[:environment_id])
Query(Environment)
.where("project_id = ?")
.where("id = ?")
# Q 610 : # project.environments.find(params[:id])
Query(Environment)
.where("project_id = ?")
.where("id = ?")
# Q 611 : # project.environments.find(params[:id])
Query(Environment)
.where("project_id = ?")
.where("id = ?")
# Q 612 : # project.environments.find_by(name: build.expanded_environment_name)
Query(Environment)
.where("project_id = ?")
.where("name = ?")
# Q 613 : # project.environments.find_by(name: from)
Query(Environment)
.where("project_id = ?")
.where("name = ?")
# Q 614 : # project.environments.for_name_like(params[:query]).pluck_names
Query(Environment)
.where("project_id = ?")
# Q 615 : # project.environments.where(environment_type: params[:id])
Query(Environment)
.where("project_id = ?")
.where("environment_type = ?")
# Q 616 : # project.execute_hooks(build_data.dup, :job_hooks)
Query(Project)

# Q 617 : # project.execute_hooks(data, :pipeline_hooks)
Query(Project)

# Q 618 : # project.execute_services(build_data.dup, :job_hooks)
Query(Project)

# Q 619 : # project.execute_services(data, :pipeline_hooks)
Query(Project)

# Q 620 : # project.execute_services(deployment_data, :deployment_hooks)
Query(Project)

# Q 621 : # project.find_or_initialize_service("prometheus")
Query(Project)

# Q 622 : # project.fork_network.find_forks_in(projects).first
Query(ForkNetwork)
.where("id = ?")
.return_limit('1')
# Q 623 : # project.fork_network.find_forks_in(projects).first
Query(ForkNetwork)
.where("id = ?")
.return_limit('1')
# Q 624 : # project.group
Query(Group)
.where("id = ?")
# Q 625 : # project.group
Query(Group)
.where("id = ?")
# Q 626 : # project.group
Query(Group)
.where("id = ?")
# Q 627 : # project.group
Query(Group)
.where("id = ?")
# Q 628 : # project.group
Query(Group)
.where("id = ?")
# Q 629 : # project.group
Query(Group)
.where("id = ?")
# Q 630 : # project.group.ci_variables_for(git_ref, project)
Query(Group)
.where("id = ?")
# Q 631 : # project.group.emails_disabled?
Query(Group)
.where("id = ?")
# Q 632 : # project.group.variables.find_by(key: "AUTO_DEVOPS_DOMAIN").value.presence
Query(Group)
.where("id = ?")
.where("key = ?")
# Q 633 : # project.import_state.update_column(:last_error, { message: "The remote data could not be fully imported.", errors: errors }.to_json)
Query(ProjectImportState)
.where("id = ?")
# Q 634 : # project.import_state.update_column(:last_error, { message: "The remote data could not be fully imported.", errors: errors }.to_json)
Query(ProjectImportState)
.where("id = ?")
# Q 635 : # project.import_state.update_column(:last_error, { message: "The remote data could not be fully imported.", errors: errors }.to_json)
Query(ProjectImportState)
.where("id = ?")
# Q 636 : # project.job_artifacts.find(params[:id])
Query(Ci::JobArtifact)
.where("project_id = ?")
.where("id = ?")
# Q 637 : # project.labels.limit(rand(3)).pluck(:title).tap
Query(ProjectLabel)
.where("project_id = ?")
.return_limit('')
.select('title')
# Q 638 : # project.labels.pluck(:title).to_set
Query(ProjectLabel)
.where("project_id = ?")
.select('title')
# Q 639 : # project.labels.select(:id, :title).find_each
Query(ProjectLabel)
.where("project_id = ?")
.select('id')
.select('title')
# Q 640 : # project.last_activity_at
Query(Project)
.select('last_activity_at')
# Q 641 : # project.last_activity_at
Query(Project)
.select('last_activity_at')
# Q 642 : # project.last_repository_updated_at
Query(Project)
.select('last_repository_updated_at')
# Q 643 : # project.lfs_file_locks.where(path: paths).where.not(user_id: user_access.user.id).take
Query(LfsFileLock)
.where("project_id = ?")
.where("path = ?")
.where("user_id = ?")
.return_limit('1')
# Q 644 : # project.members.find_by(user_id: user_id)
Query(Project)
.where("user_id = ?")
# Q 645 : # project.merge_requests.find_by(iid: iid)
Query(MergeRequest)
.where("project_id = ?")
.where("iid = ?")
# Q 646 : # project.merge_requests.joins(:metrics).where(target_branch: self.ref, merge_request_metrics: { first_deployed_to_production_at: nil }).where("merge_request_metrics.merged_at <= ?", finished_at)
Query(MergeRequest)
.where("project_id = ?")
.where("target_branch = ?")
.where("first_deployed_to_production_at = ?")
# Q 647 : # project.merge_requests.merged.where(author_id: author_id).empty?
Query(MergeRequest)
.where("project_id = ?")
.where("author_id = ?")
# Q 648 : # project.merge_requests.opened.from_project(project).from_source_branches(Gitlab::Git.ref_name(data[:ref])).exists?
Query(MergeRequest)
.where("project_id = ?")
.return_limit('1')
# Q 649 : # project.merge_requests.reset.find(merge_request_id)
Query(MergeRequest)
.where("project_id = ?")
.where("id = ?")
# Q 650 : # project.merge_requests.where(source_branch: event.branch_name).opened.any?
Query(MergeRequest)
.where("project_id = ?")
.where("source_branch = ?")
# Q 651 : # project.milestones.find_by(iid: attributes["iid"])
Query(Milestone)
.where("project_id = ?")
.where("iid = ?")
# Q 652 : # project.milestones.find_or_create_by(title: issue.milestone)
Query(Milestone)
.where("project_id = ?")
# Q 653 : # project.milestones.pluck(:iid).to_set
Query(Milestone)
.where("project_id = ?")
.select('iid')
# Q 654 : # project.pipeline_schedules.find(params[:id])
Query(Ci::PipelineSchedule)
.where("project_id = ?")
.where("id = ?")
# Q 655 : # project.project_authorizations.where(user: user_ids).group(:user_id).maximum(:access_level)
Query(ProjectAuthorization)
.where("project_id = ?")
.where("user = ?")
.group('user_id')
# Q 656 : # project.project_group_links.find(params[:id])
Query(ProjectGroupLink)
.where("project_id = ?")
.where("id = ?")
# Q 657 : # project.protected_branches.select(:name)
Query(ProtectedBranch)
.where("project_id = ?")
.select('name')
# Q 658 : # project.protected_tags.select(:name)
Query(ProtectedTag)
.where("project_id = ?")
.select('name')
# Q 659 : # project.releases.find_by_tag!(sanitized_tag_name)
Query(Release)
.where("project_id = ?")
.where("tag! = ?")
# Q 660 : # project.releases.pluck(:tag).to_set
Query(Release)
.where("project_id = ?")
.select('tag')
# Q 661 : # project.releases.where(tag: tag_names)
Query(Release)
.where("project_id = ?")
.where("tag = ?")
# Q 662 : # project.remote_mirrors.first_or_initialize
Query(RemoteMirror)
.where("project_id = ?")
# Q 663 : # project.remote_mirrors.first_or_initialize
Query(RemoteMirror)
.where("project_id = ?")
# Q 664 : # project.runner_projects.find(params[:id])
Query(Ci::RunnerProject)
.where("project_id = ?")
.where("id = ?")
# Q 665 : # project.runners.find(params[:id])
Query(Ci::Runner)
.where("project_id = ?")
.where("id = ?")
# Q 666 : # project.services.active.where(template: false).find
Query(Service)
.where("project_id = ?")
.select('active')
.where("template = ?")
.where("id = ?")
# Q 667 : # project.services.external_issue_trackers.where.not(id: id).any?
Query(Service)
.where("project_id = ?")
.where("id = ?")
# Q 668 : # project.snippets.find_by(id: id)
Query(ProjectSnippet)
.where("project_id = ?")
.where("id = ?")
# Q 669 : # project.toggle_ci_cd_settings!(:group_runners_enabled)
Query(Project)

# Q 670 : # project.triggers.find(params[:id]).present(user: user)
Query(Ci::Trigger)
.where("project_id = ?")
.where("id = ?")
# Q 671 : # project.update_column(:last_repository_updated_at, Time.zone.now)
Query(Project)

# Q 672 : # project.update_column(:last_repository_updated_at, Time.zone.now)
Query(Project)

# Q 673 : # project.variables.find_by(key: "AUTO_DEVOPS_DOMAIN").value.presence
Query(Ci::Variable)
.where("project_id = ?")
.where("key = ?")
# Q 674 : # project_authorizations.select(1).where("project_authorizations.project_id = #{
# related_project_column}")
Query(ProjectAuthorization)

# Q 675 : # project_authorizations.where(project: project_ids).group(:project_id).maximum(:access_level)
Query(ProjectAuthorization)
.where("project = ?")
.group('project_id')
# Q 676 : # project_authorizations.where(project_id: project_ids).delete_all
Query(ProjectAuthorization)
.where("project_id = ?")
# Q 677 : # project_members.find
Query(ProjectMember)
.where("id = ?")
# Q 678 : # project_members.find_by(user_id: user)
Query(ProjectMember)
.where("user_id = ?")
# Q 679 : # projects.distinct.pluck(:id)
Query(Project)
.distinct('')
.select('id')
# Q 680 : # projects.except(:offset).any?
Query(Project)

# Q 681 : # projects.find_by(id: id)
Query(Project)
.where("id = ?")
# Q 682 : # projects.find_by_full_path(id)
Query(Project)
.where("full_path = ?")
# Q 683 : # projects.reorder(order_options_with_tie_breaker)
Query(Project)
.order('')
# Q 684 : # projects.select(:id)
Query(Project)
.select('id')
# Q 685 : # projects.where("project_authorizations.access_level >= ?", min_access_level)
Query(Project)

# Q 686 : # projects.where("visibility_level > ?", level).exists?
Query(Project)
.return_limit('1')
# Q 687 : # projects.where(id: options[:projects])
Query(Project)
.where("id = ?")
# Q 688 : # projects.where(id: other_projects)
Query(Project)
.where("id = ?")
# Q 689 : # projects.without_project_repository.includes(:route, parent: [:route]).references(:routes).includes(:parent).references(:namespaces).where(id: start_id..stop_id).map { |project|
#   
#   build_attributes_for_project(project)
# }.compact
Query(Project)
.where("id = ?")
.where("id != 0")
# Q 690 : # release.links.find(params[:link_id])
Query(Releases::Link)
.where("release_id = ?")
.where("id = ?")
# Q 691 : # release.milestones.includes(:issues)
Query(Milestone)
.where("release_id = ?")
.includes('issues')
# Q 692 : # remote_mirrors.stuck.update_all(update_status: :failed, last_error: _("The remote mirror took to long to complete."), last_update_at: Time.now)
Query(RemoteMirror)

# Q 693 : # reorder("CASE WHEN issues.due_date >= CURRENT_DATE THEN 0 ELSE 1 END ASC, ABS(CURRENT_DATE - issues.due_date) ASC")
Query(Issue)
.order('id, due_date')
# Q 694 : # reorder("issues.due_date IS NULL, issues.due_date ASC")
Query(Issue)
.order('id, due_date')
# Q 695 : # reorder("issues.due_date IS NULL, issues.due_date DESC")
Query(Issue)
.order('id, due_date')
# Q 696 : # reorder("project_statistics.storage_size DESC, projects.id DESC")
Query(Project)
.order('id, storage_size')
# Q 697 : # reorder("storage_size DESC, namespaces.id DESC")
Query(Group)
.order('id, storage_size')
# Q 698 : # reorder(:name)
Query(User)
.order('name')
# Q 699 : # reorder("GREATEST(COALESCE(last_activity_at, '1970-01-01'), COALESCE(last_repository_updated_at, '1970-01-01')) DESC")
Query(Project)
.order('id, last_activity_at, last_repository_updated_at')
# Q 700 : # reorder(Arel::Nodes::Ascending.new(arel_table[:title].lower))
Query(Milestone)
.order('')
# Q 701 : # reorder(Arel::Nodes::Descending.new(arel_table[:title].lower))
Query(Milestone)
.order('')
# Q 702 : # reorder(Gitlab::Database.nulls_first_order("last_activity_on", "ASC"))
Query(User)
.order('')
# Q 703 : # reorder(Gitlab::Database.nulls_last_order("current_sign_in_at", "ASC"))
Query(User)
.order('')
# Q 704 : # reorder(Gitlab::Database.nulls_last_order("current_sign_in_at", "DESC"))
Query(User)
.order('')
# Q 705 : # reorder(Gitlab::Database.nulls_last_order("due_date", "ASC"))
Query(Milestone)
.order('')
# Q 706 : # reorder(Gitlab::Database.nulls_last_order("due_date", "DESC"))
Query(Milestone)
.order('')
# Q 707 : # reorder(Gitlab::Database.nulls_last_order("last_activity_on", "DESC"))
Query(User)
.order('')
# Q 708 : # reorder(Gitlab::Database.nulls_last_order("start_date", "ASC"))
Query(Milestone)
.order('')
# Q 709 : # reorder(Gitlab::Database.nulls_last_order("start_date", "DESC"))
Query(Milestone)
.order('')
# Q 710 : # reorder(access_level: :asc)
Query(Member)
.order('access_level')
# Q 711 : # reorder(access_level: :desc)
Query(Member)
.order('access_level')
# Q 712 : # reorder(created_at: :asc)
Query(Badge)
.order('created_at')
# Q 713 : # reorder(id: :desc)
Query(Event)
.order('id')
# Q 714 : # reorder(last_activity_at: :asc)
Query(Project)
.order('last_activity_at')
# Q 715 : # reorder(last_activity_at: :desc)
Query(Project)
.order('last_activity_at')
# Q 716 : # reorder(name: :asc).limit(limit)
Query(Project)
.order('name')
.return_limit('')
# Q 717 : # reorder(star_count: :asc)
Query(Project)
.order('star_count')
# Q 718 : # reorder(star_count: :desc)
Query(Project)
.order('star_count')
# Q 719 : # reorder(title: :asc)
Query(Label)
.order('title')
# Q 720 : # reorder(title: :desc)
Query(Label)
.order('title')
# Q 721 : # repositories.find
Query(Repository)
.where("id = ?")
# Q 722 : # retried.ordered.includes(project: :namespace)
Query(CommitStatus)

# Q 723 : # rooms(auth).find
Query(CampfireService)
.where("id = ?")
# Q 724 : # route.name.sub(name_before_last_save, name)
Query(Route)
.select('name')
# Q 725 : # route.path.sub(path_before_last_save, path)
Query(Route)
.select('path')
# Q 726 : # runner.builds.order("id DESC").first(30)
Query(Build)
.where("runner_id = ?")
.order('id')
.return_limit('1')
# Q 727 : # select("#{
# table_name}.*, (#{
# highest_priority}) AS highest_priority").order(Gitlab::Database.nulls_last_order("highest_priority", "ASC")).order("todos.created_at")
Query(Todo)
.select('Todo.*, (? ) AS highest_priority')
.order('')
.order('id, created_at')
# Q 728 : # select("name", "awardable_id", "COUNT(*) as count").where("name IN (?) AND awardable_type = ? AND awardable_id IN (?)", [DOWNVOTE_NAME, UPVOTE_NAME], type, ids).group("name", "awardable_id")
Query(AwardEmoji)
.select('nameawardable_idCOUNT(*) as count')
.group('name, id, awardable_id')
# Q 729 : # select(:name)
Query(CommitStatus)
.select('name')
# Q 730 : # self.class.find_by_uid_and_provider(auth_hash.uid, auth_hash.provider)
Query(User)
.where("uid = ?")
.where("provider = ?")
# Q 731 : # self.class.inside_path(path_before_last_save)
Query(Route)

# Q 732 : # self.class.where(attributes).last.try(:diff)
Query(LegacyDiffNote)
.return_limit('1')
.select('diff')
# Q 733 : # self.class.where(id: id)
Query(Namespace)
.where("id = ?")
# Q 734 : # self.errors.add(:limit_reached, error % { limit: limit })
Query(Project)

# Q 735 : # self.errors.add(:visibility_level, _("%{level_name} is not allowed in a %{group_level_name} group.") % { level_name: level_name, group_level_name: group_level_name })
Query(Project)

# Q 736 : # self.find_by!(project: path.repository_project, name: path.repository_name)
Query(ContainerRepository)
.where("project = ?")
.where("name = ?")
# Q 737 : # self.for_environment(environment).select("MAX(id) AS id").group(:environment_id).map(&:id)
Query(Deployment)
.select('MAX(id) AS id')
.group('environment_id')
# Q 738 : # self.group
Query(Group)
.where("id = ?")
# Q 739 : # self.last_update_started_at
Query(RemoteMirror)
.select('last_update_started_at')
# Q 740 : # self.last_update_started_at
Query(RemoteMirror)
.select('last_update_started_at')
# Q 741 : # self.project.group
Query(Group)
.where("id = ?")
.where("id = ?")
# Q 742 : # service.execute(:chat)
Query(Service)

# Q 743 : # services.external_wikis.first
Query(Service)
.return_limit('1')
# Q 744 : # services.select(&:valid?).compact
Query(Service)
.select('valid?')
.where("id != 0")
# Q 745 : # services.where(category: :ci)
Query(Service)
.where("category = ?")
# Q 746 : # services.where(category: :monitoring)
Query(Service)
.where("category = ?")
# Q 747 : # snippet.notes.inc_relations_for_view.find(params[:id])
Query(Note)
.where("snippet_id = ?")
.where("id = ?")
# Q 748 : # source.badges.find(params[:badge_id])
Query(Source)
.where("id = ?")
# Q 749 : # source.notification_settings(hierarchy_order: :asc).where(user: self).find_by("level != ? OR notification_email IS NOT NULL", NotificationSetting.levels[:global])
Query(Source)
.where("user = ?")
# Q 750 : # stages.find_by!(name: name)
Query(Stage)
.where("name = ?")
# Q 751 : # started.where("(last_update_started_at < ? AND last_update_at IS NOT NULL)", MAX_INCREMENTAL_RUNTIME.ago).or(where("(last_update_started_at < ? AND last_update_at IS NULL)", MAX_FIRST_RUNTIME.ago))
Query(RemoteMirror)

# Q 752 : # subscriptions.find_by(user: user, project: project)
Query(Subscription)
.where("user = ?")
.where("project = ?")
# Q 753 : # subscriptions.where(user: user)
Query(Subscription)
.where("user = ?")
# Q 754 : # term_agreements.accepted.where(user: user).exists?
Query(TermAgreement)
.select('accepted')
.where("user = ?")
.return_limit('1')
# Q 755 : # todos.find_by(target: target, state: :pending)
Query(Todo)
.where("target = ?")
.where("state = ?")
# Q 756 : # todos.group_by(&:target_type)
Query(Todo)

# Q 757 : # todos.where("user_id != ?", issue.author_id)
Query(Todo)

# Q 758 : # todos.where(id: ids)
Query(Todo)
.where("id = ?")
# Q 759 : # uploads.find_by(path: paths)
Query(Upload)
.where("path = ?")
# Q 760 : # user.authorized_groups.as("authorized")
Query(User)

# Q 761 : # user.emails.find(params[:email_id])
Query(Email)
.where("user_id = ?")
.where("id = ?")
# Q 762 : # user.groups.select([namespaces[:id], members[:access_level]]).except(:order)
Query(Group)
.where("user_id = ?")
# Q 763 : # user.identities.find(params[:id])
Query(Identity)
.where("user_id = ?")
.where("id = ?")
# Q 764 : # user.keys.find(params[:id])
Query(Key)
.where("user_id = ?")
.where("id = ?")
# Q 765 : # user.keys.find(params[:id])
Query(Key)
.where("user_id = ?")
.where("id = ?")
# Q 766 : # user.keys.order_id_desc
Query(Key)
.where("user_id = ?")
# Q 767 : # user.notification_settings.find_or_create_for(source)
Query(NotificationSetting)
.where("user_id = ?")
# Q 768 : # user.personal_projects.select_as_maintainer_for_project_authorization
Query(User)
.where("user_id = ?")
# Q 769 : # user.project_authorizations.where("access_level >= ? ", Gitlab::Access::DEVELOPER).where("project_authorizations.project_id = merge_requests.target_project_id").limit(1).select(1)
Query(ProjectAuthorization)
.where("user_id = ?")
.return_limit('')
# Q 770 : # user.projects.select_for_project_authorization
Query(Project)
.where("user_id = ?")
# Q 771 : # user.projects_with_reporter_access_limited_to(project_ids).pluck(:id)
Query(User)
.select('id')
# Q 772 : # user.select("noteable_id", "COUNT(*) as count").group(:noteable_id).where(noteable_type: type, noteable_id: ids)
Query(User)
.select('noteable_idCOUNT(*) as count')
.group('noteable_id')
.where("noteable_type = ?")
.where("noteable_id = ?")
# Q 773 : # user.u2f_registrations.find_by_key_handle(response.key_handle)
Query(U2fRegistration)
.where("user_id = ?")
.where("key_handle = ?")
# Q 774 : # user.u2f_registrations.pluck(:key_handle)
Query(U2fRegistration)
.where("user_id = ?")
.select('key_handle')
# Q 775 : # users.find
Query(User)
.where("id = ?")
# Q 776 : # users.reorder(order_options_with_tie_breaker)
Query(User)
.order('')
# Q 777 : # users.where(id: group_users.select("id")).where(id: groups.select("members.user_id"))
Query(User)
.where("id = ?")
.where("id = ?")
# Q 778 : # users_star_projects.where(project: project, user: self).lock(true).first
Query(UsersStarProject)
.where("project = ?")
.where("user = ?")
.return_limit('1')
# Q 779 : # where("action = ? OR (target_type IN (?) AND action IN (?)) OR (target_type = ? AND action = ?)", Event::PUSHED, %w{MergeRequest Issue}, [Event::CREATED, Event::CLOSED, Event::MERGED], "Note", Event::COMMENTED)
Query(Event)

# Q 780 : # where("allow_failure = ? OR status IN (?)", false, %w{created pending running success skipped})
Query(Build)

# Q 781 : # where("allow_failure = ? OR status IN (?)", false, all_state_names - [:failed, :canceled, :manual])
Query(CommitStatus)

# Q 782 : # where("ci_builds.id=ci_build_needs.build_id")
Query(BuildNeed)

# Q 783 : # where("ci_builds_metadata.build_id = ci_builds.id")
Query(BuildMetadata)

# Q 784 : # where("ci_job_artifacts.project_id = projects.id")
Query(JobArtifact)

# Q 785 : # where("ci_pipelines.created_at > ?", time)
Query(Pipeline)

# Q 786 : # where("contacted_at > ?", online_contact_time_deadline)
Query(Runner)

# Q 787 : # where("contacted_at > ?", recent_queue_deadline)
Query(Runner)

# Q 788 : # where("created_at > ?", Date.today - 1.month)
Query(Build)

# Q 789 : # where("created_at > ?", time)
Query(ResourceLabelEvent)

# Q 790 : # where("created_at >= ?", 2.days.ago.beginning_of_day).order(created_at: :desc)
Query(WebHookLog)
.order('created_at')
# Q 791 : # where("date >= ?", 29.days.ago.utc.to_date)
Query(ProjectDailyStatistic)

# Q 792 : # where("enabled_until >= ?", Time.now)
Query(PagesDomain)

# Q 793 : # where("expire_at < ?", Time.now).limit(limit)
Query(JobArtifact)
.return_limit('')
# Q 794 : # where("expires_at < ?", Time.now)
Query(PagesDomainAcmeOrder)

# Q 795 : # where("ghost IS NOT TRUE")
Query(User)

# Q 796 : # where("issues.due_date < ?", date)
Query(Issue)

# Q 797 : # where("issues.due_date >= ?", from_date).where("issues.due_date <= ?", to_date)
Query(Issue)

# Q 798 : # where("namespace_id != ?", user.namespace_id)
Query(Project)

# Q 799 : # where("projects.last_activity_at < ?", 6.months.ago)
Query(Project)

# Q 800 : # where("remove_at < ?", Time.now)
Query(PagesDomain)

# Q 801 : # where("revoked = false AND (expires_at >= NOW() OR expires_at IS NULL)")
Query(PersonalAccessToken)

# Q 802 : # where("revoked = false AND expires_at >= NOW()")
Query(DeployToken)

# Q 803 : # where("revoked = true OR expires_at < NOW()")
Query(PersonalAccessToken)

# Q 804 : # where("routes.path LIKE ?", "#{
# sanitize_sql_like(path)}/%")
Query(Route)

# Q 805 : # where("snippets.visibility_level IN (?) OR snippets.author_id = ?", Gitlab::VisibilityLevel.levels_for_user(user), user.id)
Query(Snippet)

# Q 806 : # where("stage_idx < ?", index)
Query(CommitStatus)

# Q 807 : # where("stage_idx > ?", index)
Query(CommitStatus)

# Q 808 : # where("storage_version < :version OR storage_version IS NULL", version: HASHED_STORAGE_FEATURES[feature])
Query(Project)

# Q 809 : # where("storage_version < :version OR storage_version IS NULL", version: LATEST_STORAGE_VERSION)
Query(Project)

# Q 810 : # where("target_branch LIKE ?", ApplicationRecord.sanitize_sql_like(wildcard_branch_name).tr("*", "%"))
Query(MergeRequest)

# Q 811 : # where("type IS NULL")
Query(Namespace)

# Q 812 : # where(accepted: true)
Query(TermAgreement)
.where("accepted = ?")
# Q 813 : # where(action: PUSHED)
Query(Event)
.where("action = ?")
# Q 814 : # where(action: action)
Query(Todo)
.where("action = ?")
# Q 815 : # where(active: false)
Query(Runner)
.where("active = ?")
# Q 816 : # where(active: false)
Query(PipelineSchedule)
.where("active = ?")
# Q 817 : # where(active: true)
Query(PipelineSchedule)
.where("active = ?")
# Q 818 : # where(active: true)
Query(Runner)
.where("active = ?")
# Q 819 : # where(active: true)
Query(Service)
.where("active = ?")
# Q 820 : # where(admin: true)
Query(User)
.where("admin = ?")
# Q 821 : # where(allow_failure: false)
Query(Build)
.where("allow_failure = ?")
# Q 822 : # where(allow_failure: true, status: [:failed, :canceled])
Query(Build)
.where("allow_failure = ?")
.where("status = ?")
# Q 823 : # where(allow_failure: true, status: [:failed, :canceled])
Query(CommitStatus)
.where("allow_failure = ?")
.where("status = ?")
# Q 824 : # where(application: applications).distinct.group(:application_id).count(:resource_owner_id)
Query(OauthAccessToken)
.where("application = ?")
.distinct('')
.group('application_id')
# Q 825 : # where(archived: false)
Query(Project)
.where("archived = ?")
# Q 826 : # where(archived: true)
Query(Project)
.where("archived = ?")
# Q 827 : # where(author: author)
Query(Todo)
.where("author = ?")
# Q 828 : # where(auto_ssl_enabled: true).merge(user_provided_or_expiring)
Query(PagesDomain)
.where("auto_ssl_enabled = ?")
# Q 829 : # where(can_push: true)
Query(DeployKeysProject)
.where("can_push = ?")
# Q 830 : # where(category: "deployment")
Query(Service)
.where("category = ?")
# Q 831 : # where(category: "issue_tracker")
Query(Service)
.where("category = ?")
# Q 832 : # where(cloud_run: true)
Query(Gcp)
.where("cloud_run = ?")
# Q 833 : # where(cluster: cluster)
Query(Knative)
.where("cluster = ?")
# Q 834 : # where(code_owner_approval_required: true)
Query(ProtectedBranch)
.where("code_owner_approval_required = ?")
# Q 835 : # where(commit_id: id)
Query(Todo)
.where("commit_id = ?")
# Q 836 : # where(commit_sha: shas)
Query(GpgSignature)
.where("commit_sha = ?")
# Q 837 : # where(common: true)
Query(PrometheusMetric)
.where("common = ?")
# Q 838 : # where(common: true)
Query(PrometheusMetric)
.where("common = ?")
# Q 839 : # where(confidential: false)
Query(Issue)
.where("confidential = ?")
# Q 840 : # where(confidential: true)
Query(Issue)
.where("confidential = ?")
# Q 841 : # where(confidential_issues_events: true, active: true)
Query(Service)
.where("confidential_issues_events = ?")
.where("active = ?")
# Q 842 : # where(confidential_note_events: nil, note_events: true)
Query(Service)
.where("confidential_note_events = ?")
.where("note_events = ?")
# Q 843 : # where(confidential_note_events: true, active: true)
Query(Service)
.where("confidential_note_events = ?")
.where("active = ?")
# Q 844 : # where(config_source: ci_sources_values)
Query(Pipeline)
.where("config_source = ?")
# Q 845 : # where(custom: false)
Query(Stage)
.where("custom = ?")
# Q 846 : # where(dashboard: dashboard)
Query(User)
.where("dashboard = ?")
# Q 847 : # where(default: false)
Query(Service)
.where("default = ?")
# Q 848 : # where(deployed: true)
Query(ProjectPagesMetadatum)
.where("deployed = ?")
# Q 849 : # where(deployed: true)
Query(ProjectPagesMetadatum)
.where("deployed = ?")
# Q 850 : # where(deployment_events: true, active: true)
Query(Service)
.where("deployment_events = ?")
.where("active = ?")
# Q 851 : # where(due_date: Date.tomorrow)
Query(Issue)
.where("due_date = ?")
# Q 852 : # where(due_date: nil)
Query(Issue)
.where("due_date = ?")
# Q 853 : # where(email: emails)
Query(User)
.where("email = ?")
# Q 854 : # where(enabled: false)
Query(Cluster)
.where("enabled = ?")
# Q 855 : # where(enabled: false)
Query(ProjectAutoDevops)
.where("enabled = ?")
# Q 856 : # where(enabled: true)
Query(ProjectAutoDevops)
.where("enabled = ?")
# Q 857 : # where(enabled: true)
Query(Cluster)
.where("enabled = ?")
# Q 858 : # where(enabled: true)
Query(RemoteMirror)
.where("enabled = ?")
# Q 859 : # where(entity_id: entity_id)
Query(AuditEvent)
.where("entity_id = ?")
# Q 860 : # where(entity_type: entity_type)
Query(AuditEvent)
.where("entity_type = ?")
# Q 861 : # where(environment_id: environment)
Query(Deployment)
.where("environment_id = ?")
# Q 862 : # where(environment_scope: DEFAULT_ENVIRONMENT)
Query(Cluster)
.where("environment_scope = ?")
# Q 863 : # where(environment_type: "review")
Query(Environment)
.where("environment_type = ?")
# Q 864 : # where(external: true)
Query(User)
.where("external = ?")
# Q 865 : # where(file_store: LfsObjectUploader::Store::LOCAL)
Query(LfsObject)
.where("file_store = ?")
# Q 866 : # where(file_store: LfsObjectUploader::Store::REMOTE)
Query(LfsObject)
.where("file_store = ?")
# Q 867 : # where(file_type: types)
Query(JobArtifact)
.where("file_type = ?")
# Q 868 : # where(file_type: types)
Query(JobArtifact)
.where("file_type = ?")
# Q 869 : # where(fuzzy_arel_match(:name, query, lower_exact_match: true).or(fuzzy_arel_match(:username, query, lower_exact_match: true)).or(arel_table[:email].eq(query))).reorder(sanitized_order_sql, :name)
Query(User)
.order('name')
# Q 870 : # where(ghost: true)
Query(User)
.where("ghost = ?")
# Q 871 : # where(group: group)
Query(Todo)
.where("group = ?")
# Q 872 : # where(group: group)
Query(Project)
.where("group = ?")
# Q 873 : # where(group: nil).includes(:project)
Query(Milestone)
.where("group = ?")
.includes('project')
# Q 874 : # where(group_id: ids)
Query(Milestone)
.where("group_id = ?")
# Q 875 : # where(has_exposed_artifacts: true)
Query(BuildMetadata)
.where("has_exposed_artifacts = ?")
# Q 876 : # where(id: Todo.where(user: user, state: todo_state).select(:author_id))
Query(User)
.where("id = ?")
# Q 877 : # where(id: id)
Query(Pipeline)
.where("id = ?")
# Q 878 : # where(id: ids)
Query(CommitStatus)
.where("id = ?")
# Q 879 : # where(id: ids)
Query(ApplicationRecord)
.where("id = ?")
# Q 880 : # where(id: ids)
Query(Label)
.where("id = ?")
# Q 881 : # where(id: max_id_per_sha)
Query(Pipeline)
.where("id = ?")
# Q 882 : # where(id: todos.select(:user_id))
Query(User)
.where("id = ?")
# Q 883 : # where(id: user.authorized_projects.select(:id).reorder(nil))
Query(Project)
.where("id = ?")
# Q 884 : # where(id: user.authorized_projects.where("project_authorizations.access_level >= ?", access_level).select(:id).reorder(nil))
Query(Project)
.where("id = ?")
# Q 885 : # where(id: user_ids)
Query(User)
.where("id = ?")
# Q 886 : # where(impersonation: false)
Query(PersonalAccessToken)
.where("impersonation = ?")
# Q 887 : # where(impersonation: true)
Query(PersonalAccessToken)
.where("impersonation = ?")
# Q 888 : # where(interruptible: true)
Query(BuildMetadata)
.where("interruptible = ?")
# Q 889 : # where(invite_token: nil)
Query(Member)
.where("invite_token = ?")
# Q 890 : # where(issue: issue).added_to_issue
Query(ZoomMeeting)
.where("issue = ?")
# Q 891 : # where(issue_id: ids)
Query(MergeRequestsClosingIssues)
.where("issue_id = ?")
# Q 892 : # where(issue_status: :added)
Query(ZoomMeeting)
.where("issue_status = ?")
# Q 893 : # where(issue_status: :removed)
Query(ZoomMeeting)
.where("issue_status = ?")
# Q 894 : # where(issues_events: true, active: true)
Query(Service)
.where("issues_events = ?")
.where("active = ?")
# Q 895 : # where(job_events: true, active: true)
Query(Service)
.where("job_events = ?")
.where("active = ?")
# Q 896 : # where(ldap: true)
Query(GroupMember)
.where("ldap = ?")
# Q 897 : # where(list_type: list_types.slice(*destroyable_types).values)
Query(List)
.where("list_type = ?")
# Q 898 : # where(list_type: list_types.slice(*movable_types).values)
Query(List)
.where("list_type = ?")
# Q 899 : # where(locked: false).where.not("ci_runners.id IN (#{
# exclude_runners})").project_type
Query(Runner)
.where("locked = ?")
# Q 900 : # where(managed: true)
Query(Cluster)
.where("managed = ?")
# Q 901 : # where(merge_requests_events: true, active: true)
Query(Service)
.where("merge_requests_events = ?")
.where("active = ?")
# Q 902 : # where(milestone_id: milestone)
Query(MergeRequest)
.where("milestone_id = ?")
# Q 903 : # where(name: name)
Query(Environment)
.where("name = ?")
# Q 904 : # where(name: names)
Query(AwardEmoji)
.where("name = ?")
# Q 905 : # where(namespace_id: group.self_and_descendants.select(:id))
Query(Project)
.where("namespace_id = ?")
# Q 906 : # where(namespace_id: namespace_ids)
Query(Project)
.where("namespace_id = ?")
# Q 907 : # where(namespace_id: user.namespace_id)
Query(Project)
.where("namespace_id = ?")
# Q 908 : # where(note_events: true, active: true)
Query(Service)
.where("note_events = ?")
.where("active = ?")
# Q 909 : # where(outdated: false)
Query(Suggestion)
.where("outdated = ?")
# Q 910 : # where(pending_delete: false)
Query(Project)
.where("pending_delete = ?")
# Q 911 : # where(pending_delete: true)
Query(Project)
.where("pending_delete = ?")
# Q 912 : # where(pipeline_events: true, active: true)
Query(Service)
.where("pipeline_events = ?")
.where("active = ?")
# Q 913 : # where(private_profile: false)
Query(User)
.where("private_profile = ?")
# Q 914 : # where(project: project)
Query(Todo)
.where("project = ?")
# Q 915 : # where(project: project)
Query(DeployKeysProject)
.where("project = ?")
# Q 916 : # where(project: project)
Query(ProjectDailyStatistic)
.where("project = ?")
# Q 917 : # where(project_id: ids)
Query(Milestone)
.where("project_id = ?")
# Q 918 : # where(project_id: nil)
Query(Snippet)
.where("project_id = ?")
# Q 919 : # where(project_id: project)
Query(Environment)
.where("project_id = ?")
# Q 920 : # where(project_id: project.id)
Query(UsersStarProject)
.where("project_id = ?")
# Q 921 : # where(project_id: project_ids)
Query(Issue)
.where("project_id = ?")
# Q 922 : # where(project_id: project_ids)
Query(ProjectStatistics)
.where("project_id = ?")
# Q 923 : # where(project_id: projects).or(where(group_id: groups))
Query(Milestone)
.where("project_id = ?")
# Q 924 : # where(project_id: stage.project_id)
Query(ProjectStage)
.where("project_id = ?")
# Q 925 : # where(protected: false)
Query(Variable)
.where("protected = ?")
# Q 926 : # where(protected: false)
Query(GroupVariable)
.where("protected = ?")
# Q 927 : # where(protected: true)
Query(Build)
.where("protected = ?")
# Q 928 : # where(provider: provider)
Query(Identity)
.where("provider = ?")
# Q 929 : # where(provider_type: :aws)
Query(Cluster)
.where("provider_type = ?")
# Q 930 : # where(provider_type: :gcp)
Query(Cluster)
.where("provider_type = ?")
# Q 931 : # where(provider_type: :user)
Query(Cluster)
.where("provider_type = ?")
# Q 932 : # where(public: true)
Query(DeployKey)
.where("public = ?")
# Q 933 : # where(push_events: true, active: true)
Query(Service)
.where("push_events = ?")
.where("active = ?")
# Q 934 : # where(ref: ref)
Query(Pipeline)
.where("ref = ?")
# Q 935 : # where(repo: repo, ref: ref, path: path, limit: 1).first
Query(Commit)
.where("repo = ?")
.where("ref = ?")
.where("path = ?")
.where("limit = ?")
.return_limit('1')
# Q 936 : # where(requested_at: nil)
Query(Member)
.where("requested_at = ?")
# Q 937 : # where(retried: [false, nil])
Query(Build)
.where("retried = ?")
# Q 938 : # where(retried: [false, nil])
Query(CommitStatus)
.where("retried = ?")
# Q 939 : # where(retried: true)
Query(CommitStatus)
.where("retried = ?")
# Q 940 : # where(runner_id: nil)
Query(Build)
.where("runner_id = ?")
# Q 941 : # where(sha: sha)
Query(Pipeline)
.where("sha = ?")
# Q 942 : # where(shared_runners_enabled: true)
Query(Project)
.where("shared_runners_enabled = ?")
# Q 943 : # where(source: :merge_request_event, merge_request: merge_request)
Query(Pipeline)
.where("source = ?")
.where("merge_request = ?")
# Q 944 : # where(source: [project] + project.ancestors)
Query(Member)
.where("source = ?")
# Q 945 : # where(source: branch_pipeline_sources).where(ref: ref, tag: false)
Query(Pipeline)
.where("source = ?")
.where("ref = ?")
.where("tag = ?")
# Q 946 : # where(source: internal_sources)
Query(Pipeline)
.where("source = ?")
# Q 947 : # where(source_branch: branch)
Query(ExternalPullRequest)
.where("source_branch = ?")
# Q 948 : # where(source_branch: branches)
Query(MergeRequest)
.where("source_branch = ?")
# Q 949 : # where(source_id: groups.select(:id))
Query(GroupMember)
.where("source_id = ?")
# Q 950 : # where(source_id: project.id)
Query(ProjectMember)
.where("source_id = ?")
# Q 951 : # where(source_id: source_id)
Query(Member)
.where("source_id = ?")
# Q 952 : # where(source_project_id: project.id)
Query(MergeRequest)
.where("source_project_id = ?")
# Q 953 : # where(source_repository: repository)
Query(ExternalPullRequest)
.where("source_repository = ?")
# Q 954 : # where(source_sha: source_sha)
Query(Pipeline)
.where("source_sha = ?")
# Q 955 : # where(source_type: "Namespace")
Query(NotificationSetting)
.where("source_type = ?")
# Q 956 : # where(stage_idx: index)
Query(CommitStatus)
.where("stage_idx = ?")
# Q 957 : # where(status: "canceled")
Query(Build)
.where("status = ?")
# Q 958 : # where(status: "created")
Query(Build)
.where("status = ?")
# Q 959 : # where(status: "failed")
Query(Build)
.where("status = ?")
# Q 960 : # where(status: "manual")
Query(Build)
.where("status = ?")
# Q 961 : # where(status: "pending")
Query(Build)
.where("status = ?")
# Q 962 : # where(status: "running")
Query(Build)
.where("status = ?")
# Q 963 : # where(status: "skipped")
Query(Build)
.where("status = ?")
# Q 964 : # where(status: "success")
Query(Build)
.where("status = ?")
# Q 965 : # where(status: %i{running success failed canceled})
Query(Deployment)
.where("status = ?")
# Q 966 : # where(store: ObjectStorage::Store::LOCAL)
Query(Upload)
.where("store = ?")
# Q 967 : # where(store: ObjectStorage::Store::REMOTE)
Query(Upload)
.where("store = ?")
# Q 968 : # where(stored_externally: [false, nil])
Query(MergeRequestDiff)
.where("stored_externally = ?")
# Q 969 : # where(tag_push_events: true, active: true)
Query(Service)
.where("tag_push_events = ?")
.where("active = ?")
# Q 970 : # where(target_branch: branch_name)
Query(MergeRequest)
.where("target_branch = ?")
# Q 971 : # where(target_id: id)
Query(Todo)
.where("target_id = ?")
# Q 972 : # where(target_project_id: ids)
Query(MergeRequest)
.where("target_project_id = ?")
# Q 973 : # where(target_type: "Milestone", target_id: milestone_id)
Query(Event)
.where("target_type = ?")
.where("target_id = ?")
# Q 974 : # where(target_type: type)
Query(Todo)
.where("target_type = ?")
# Q 975 : # where(template: true, type: [Label.name, nil])
Query(Label)
.where("template = ?")
.where("type = ?")
# Q 976 : # where(title: title)
Query(Label)
.where("title = ?")
# Q 977 : # where(type: "ExternalWikiService").active
Query(Service)
.where("type = ?")
.select('active')
# Q 978 : # where(type: %w{Ci::Build Ci::Bridge})
Query(CommitStatus)
.where("type = ?")
# Q 979 : # where(type: ["Key", nil])
Query(Key)
.where("type = ?")
# Q 980 : # where(user: user)
Query(Pipeline)
.where("user = ?")
# Q 981 : # where(user: user)
Query(Identity)
.where("user = ?")
# Q 982 : # where(user: user)
Query(Member)
.where("user = ?")
# Q 983 : # where(user: user, group: group)
Query(BoardGroupRecentVisit)
.where("user = ?")
.where("group = ?")
# Q 984 : # where(user: user, project: project)
Query(BoardProjectRecentVisit)
.where("user = ?")
.where("project = ?")
# Q 985 : # where(user: users)
Query(AwardEmoji)
.where("user = ?")
# Q 986 : # where(visibility_level: Snippet::INTERNAL)
Query(Snippet)
.where("visibility_level = ?")
# Q 987 : # where(visibility_level: Snippet::PRIVATE)
Query(Snippet)
.where("visibility_level = ?")
# Q 988 : # where(visibility_level: Snippet::PUBLIC)
Query(Snippet)
.where("visibility_level = ?")
# Q 989 : # where(visibility_level: [Snippet::PUBLIC, Snippet::INTERNAL])
Query(Snippet)
.where("visibility_level = ?")
# Q 990 : # where(visibility_level: value)
Query(Snippet)
.where("visibility_level = ?")
# Q 991 : # where(when: :delayed, status: COMPLETED_STATUSES + %i{scheduled})
Query(Build)
.where("when = ?")
.where("status = ?")
# Q 992 : # where(when: :manual, status: COMPLETED_STATUSES + %i{manual})
Query(Build)
.where("when = ?")
.where("status = ?")
# Q 993 : # where(wiki_page_events: true, active: true)
Query(Service)
.where("wiki_page_events = ?")
.where("active = ?")
# Q 994 : # where.not(confirmed_at: nil)
Query(Email)
.where("confirmed_at = ?")
# Q 995 : # where.not(confirmed_at: nil)
Query(User)
.where("confirmed_at = ?")
# Q 996 : # where.not(due_date: nil)
Query(Issue)
.where("due_date = ?")
# Q 997 : # where.not(encrypted_service_account_token: nil)
Query(KubernetesNamespace)
.where("encrypted_service_account_token = ?")
# Q 998 : # where.not(id: online)
Query(Runner)
.where("id = ?")
# Q 999 : # where.not(id: project)
Query(Project)
.where("id = ?")
# Q 1000 : # where.not(invite_token: nil)
Query(Member)
.where("invite_token = ?")
# Q 1001 : # where.not(requested_at: nil)
Query(Member)
.where("requested_at = ?")
# Q 1002 : # where.not(type: "GitlabIssueTrackerService")
Query(Service)
.where("type = ?")
# Q 1003 : # where_full_path_in(path).reorder(order_sql).take
Query(Project)
.order('')
.return_limit('1')
# Q 1004 : # with_artifacts_archive.where("artifacts_expire_at < ?", Time.now)
Query(Build)

# Q 1005 : # with_artifacts_archive.where("artifacts_expire_at IS NULL OR artifacts_expire_at > ?", Time.now)
Query(Build)

# Q 1006 : # with_issues_available_for_user(user).select(:id)
Query(Project)
.select('id')
# Q 1007 : # with_lists_and_board.where(boards: { id: board_id })
Query(Label)
.where("id = ?")
# Q 1008 : # with_lists_and_board.where(boards: { project_id: project_id })
Query(Label)
.where("project_id = ?")
# Q 1009 : # with_merge_requests_available_for_user(user).select(:id)
Query(Project)
.select('id')
# Q 1010 : # with_project_feature.where(project_features: { access_level_attribute => level })
Query(Project)
.where("project_features = ?")
# Q 1011 : # with_state(:opened).where(auto_merge_enabled: true)
Query(MergeRequest)
.where("auto_merge_enabled = ?")
