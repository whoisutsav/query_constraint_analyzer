# Q 0 : # @article.collection.articles.published.order("COALESCE(crossposted_at, published_at) ASC")
Query(Article)
.where("id = ?")
.where("collection_id = ?")
.select('published')
.order('id, crossposted_at, published_at')
# Q 1 : # @article.page_views.where(referrer: "https://www.google.com/")
Query(PageView)
.where("article_id = ?")
.where("referrer = ?")
# Q 2 : # @article.tags.where("tags.social_preview_template IS NOT NULL AND tags.social_preview_template != ?", "article").select(:social_preview_template).first.social_preview_template
Query(Article)
.select('social_preview_template')
.return_limit('1')
# Q 3 : # @articles.includes(:organization).select(ME_ATTRIBUTES_FOR_SERIALIZATION).order(published_at: :desc, created_at: :desc).page(params[:page]).per(num).decorate
Query(Article)
.includes('organization')
.order('published_at, created_at')
# Q 4 : # @articles.where("nth_published_by_author > 0 AND nth_published_by_author < 4 AND published_at > ?", 7.days.ago)
Query(Article)

# Q 5 : # @articles.where(featured: true).includes(:user)
Query(Article)
.where("featured = ?")
.includes('user')
# Q 6 : # @articles.where(organization_id: @user.id).includes(:user)
Query(Article)
.where("organization_id = ?")
.includes('user')
# Q 7 : # @articles.where(user_id: @user.id)
Query(Article)
.where("user_id = ?")
# Q 8 : # @chat_channel.chat_channel_memberships.find(params[:membership_id])
Query(ChatChannelMembership)
.where("chat_channel_id = ?")
.where("id = ?")
# Q 9 : # @chat_channel.chat_channel_memberships.find_by!(user: user)
Query(ChatChannelMembership)
.where("chat_channel_id = ?")
.where("user = ?")
# Q 10 : # @chat_channel.chat_channel_memberships.where(user_id: user.id).first
Query(ChatChannelMembership)
.where("chat_channel_id = ?")
.where("user_id = ?")
.return_limit('1')
# Q 11 : # @chat_channel.messages.includes(:user).order("created_at DESC").offset(params[:message_offset]).limit(150)
Query(Message)
.where("chat_channel_id = ?")
.includes('user')
.order('id, created_at')
.return_limit('')
# Q 12 : # @chat_channel.mod_memberships.find_by!(user: user)
Query(ChatChannelMembership)
.where("chat_channel_id = ?")
.where("user = ?")
# Q 13 : # @classified_listings.order(bumped_at: :desc)
Query(ClassifiedListing)
.order('bumped_at')
# Q 14 : # @classified_listings.where(category: params[:category])
Query(ClassifiedListing)
.where("category = ?")
# Q 15 : # @classified_listings.where(category: params[:filter])
Query(ClassifiedListing)
.where("category = ?")
# Q 16 : # @user.organizations.order("name ASC")
Query(Organization)
.where("user_id = ?")
.order('id, name')
# Q 17 : # @display_ad.display_ad_events.where(category: "click").size
Query(DisplayAdEvent)
.where("display_ad_id = ?")
.where("category = ?")
# Q 18 : # @display_ad.display_ad_events.where(category: "impression").size
Query(DisplayAdEvent)
.where("display_ad_id = ?")
.where("category = ?")
# Q 19 : # @notifications.order(notified_at: :desc)
Query(Notification)
.order('notified_at')
# Q 20 : # @notifications.where("notified_at < ?", notified_at_offset)
Query(Notification)

# Q 21 : # @organization.organization_memberships.includes(:user)
Query(OrganizationMembership)
.where("organization_id = ?")
.includes('user')
# Q 22 : # @organization.users.pluck(:name, :id)
Query(User)
.where("organization_id = ?")
.select('name')
.select('id')
# Q 23 : # @organizations.find_by(id: params[:org_id])
Query(Organization)
.where("id = ?")
# Q 24 : # @organizations.where("name ILIKE ?", "%#{
# params[:search].strip}%")
Query(Organization)

# Q 25 : # @podcast.podcast_episodes.reachable.order("published_at DESC").limit(30).decorate
Query(PodcastEpisode)
.where("podcast_id = ?")
.select('reachable')
.order('id, published_at')
.return_limit('')
# Q 26 : # @poll.poll_skips.where(user_id: user).first
Query(PollSkip)
.where("poll_id = ?")
.where("user_id = ?")
.return_limit('1')
# Q 27 : # @poll.poll_votes.where(user_id: user).first
Query(PollVote)
.where("poll_id = ?")
.where("user_id = ?")
.return_limit('1')
# Q 28 : # @user.all_blocking.pluck(:blocked_id)
Query(User)
.select('blocked_id')
# Q 29 : # @user.articles.find_by(slug: params[:slug])
Query(Article)
.where("user_id = ?")
.where("slug = ?")
# Q 30 : # @user.articles.find_by(slug: params[:slug])
Query(Article)
.where("user_id = ?")
.where("slug = ?")
# Q 31 : # @user.comments.last.id
Query(Comment)
.where("user_id = ?")
.return_limit('1')
# Q 32 : # @user.comments.where(deleted: false).order("created_at DESC").includes(:commentable).limit(comment_count)
Query(Comment)
.where("user_id = ?")
.where("deleted = ?")
.order('id, created_at')
.includes('commentable')
.return_limit('')
# Q 33 : # @user.follows_by_type("ActsAsTaggableOn::Tag").order("points DESC").includes(:followable).limit(@follows_limit)
Query(User)
.order('id, points')
.return_limit('')
# Q 34 : # @user.follows_by_type("Organization").order("created_at DESC").includes(:followable).limit(@follows_limit)
Query(User)
.order('id, created_at')
.return_limit('')
# Q 35 : # @user.follows_by_type("Podcast").order("created_at DESC").includes(:followable).limit(@follows_limit)
Query(User)
.order('id, created_at')
.return_limit('')
# Q 36 : # @user.follows_by_type("User").order("created_at DESC").includes(:followable).limit(@follows_limit)
Query(User)
.order('id, created_at')
.return_limit('')
# Q 37 : # @user.identities.find_by(provider: provider)
Query(Identity)
.where("user_id = ?")
.where("provider = ?")
# Q 38 : # @user.notes.order(created_at: :desc).limit(10)
Query(Note)
.where("user_id = ?")
.order('created_at')
.return_limit('')
# Q 39 : # @user.notes.order(created_at: :desc).limit(10).load
Query(Note)
.where("user_id = ?")
.order('created_at')
.return_limit('')
# Q 40 : # @user.organization_memberships.joins(:organization).order("organizations.name ASC").includes(:organization)
Query(OrganizationMembership)
.where("user_id = ?")
.joins('organization')
.order('id, name')
.includes('organization')
# Q 41 : # @user.organizations.order(:name)
Query(Organization)
.where("user_id = ?")
.order('name')
# Q 42 : # @user.podcast_episodes.find_by(slug: params[:slug])
Query(User)
.where("slug = ?")
# Q 43 : # @user.reactions.last.id
Query(Reaction)
.where("user_id = ?")
.return_limit('1')
# Q 44 : # ApiSecret.find(destroy_params[:id])
Query(ApiSecret)
.where("id = ?")
# Q 45 : # ApiSecret.includes(:user).find_by(secret: api_key)
Query(ApiSecret)
.includes('user')
.where("secret = ?")
# Q 46 : # Article.admin_published_with("challenge").first
Query(Article)
.return_limit('1')
# Q 47 : # Article.admin_published_with("welcome").first
Query(Article)
.return_limit('1')
# Q 48 : # Article.boosted_via_additional_articles.includes(:user, :buffer_updates).limited_columns_internal_select.order("published_at DESC").page(params[:page]).per(100)
Query(Article)
.includes('user')
.includes('buffer_updates')
.order('id, published_at')
# Q 49 : # Article.feed.order(published_at: :desc).page(params[:page].to_i).per(12)
Query(Article)
.order('published_at')
# Q 50 : # Article.find(article_id)
Query(Article)
.where("id = ?")
# Q 51 : # Article.find(article_ids[0])
Query(Article)
.where("id = ?")
# Q 52 : # Article.find(page_view_params[:article_id])
Query(Article)
.where("id = ?")
# Q 53 : # Article.find(params[:a_id])
Query(Article)
.where("id = ?")
# Q 54 : # Article.find(params[:buffer_update][:article_id])
Query(Article)
.where("id = ?")
# Q 55 : # Article.find(params[:bust_article].to_i)
Query(Article)
.where("id = ?")
# Q 56 : # Article.find(params[:id])
Query(Article)
.where("id = ?")
# Q 57 : # Article.find(params[:id])
Query(Article)
.where("id = ?")
# Q 58 : # Article.find(params[:id])
Query(Article)
.where("id = ?")
# Q 59 : # Article.find(params[:id])
Query(Article)
.where("id = ?")
# Q 60 : # Article.find(tag_adjustment.article_id)
Query(Article)
.where("id = ?")
# Q 61 : # Article.find_by(path: "/#{
# params[:username].downcase}/#{
# params[:slug]}").decorate
Query(Article)
.where("path = ?")
# Q 62 : # Article.find_by(path: "/#{
# params[:username].downcase}/#{
# params[:slug]}").decorate
Query(Article)
.where("path = ?")
# Q 63 : # Article.find_by(slug: link["href"].split("/")[4].split("?")[0])
Query(Article)
.where("slug = ?")
# Q 64 : # Article.find_by(slug: params[:slug])
Query(Article)
.where("slug = ?")
# Q 65 : # Article.find_by(slug: params[:slug]).decorate
Query(Article)
.where("slug = ?")
# Q 66 : # Article.find_by(video_code: message_json[:input][:key])
Query(Article)
.where("video_code = ?")
# Q 67 : # Article.includes(:user).find(params[:id])
Query(Article)
.includes('user')
.where("id = ?")
# Q 68 : # Article.published.cached_tagged_with(@tag).where("score > 2").size
Query(Article)
.select('published')
# Q 69 : # Article.published.find_each
Query(Article)
.select('published')
# Q 70 : # Article.published.includes(:user).order(created_at: :desc).where("score > ? AND score < ?", -10, 8).limit(120)
Query(Article)
.select('published')
.includes('user')
.order('created_at')
.return_limit('')
# Q 71 : # Article.published.includes(:user).select(SHOW_ATTRIBUTES_FOR_SERIALIZATION).find(params[:id]).decorate
Query(Article)
.select('published')
.includes('user')
.where("id = ?")
# Q 72 : # Article.published.includes(user: [:notes]).limited_columns_internal_select.order("hotness_score DESC").page(params[:page]).per(30)
Query(Article)
.select('published')
.order('id, hotness_score')
# Q 73 : # Article.published.includes(user: [:notes]).limited_columns_internal_select.order("published_at DESC").page(params[:page]).per(50)
Query(Article)
.select('published')
.order('id, published_at')
# Q 74 : # Article.published.or(Article.where(published_from_feed: true)).where(featured: true).where("featured_number > ?", Time.current.to_i).includes(:user, :buffer_updates).limited_columns_internal_select.order("featured_number DESC")
Query(Article)
.select('published')
.where("featured = ?")
.includes('user')
.includes('buffer_updates')
.order('id, featured_number')
# Q 75 : # Article.published.order(organic_page_views_past_month_count: :desc).where("score > ?", 8).where("published_at > ?", time_ago).limit(25)
Query(Article)
.select('published')
.order('organic_page_views_past_month_count')
.return_limit('')
# Q 76 : # Article.published.where("published_at > ? AND published_at < ? AND score > ?", date, date.end_of_month, 3).pluck(:path, :last_comment_at)
Query(Article)
.select('published')
.select('path')
.select('last_comment_at')
# Q 77 : # Article.published.where("published_at > ?", months_ago).includes(user: [:notes]).limited_columns_internal_select.order("positive_reactions_count DESC").page(params[:page]).per(50)
Query(Article)
.select('published')
.order('id, positive_reactions_count')
# Q 78 : # Article.published.where("score > -5 AND score < 5").order("published_at DESC").limit(70)
Query(Article)
.select('published')
.order('id, published_at')
.return_limit('')
# Q 79 : # Article.published.where(id: @user.profile_pins.select(:pinnable_id)).limited_column_select.order("published_at DESC").decorate
Query(Article)
.select('published')
.where("id = ?")
.order('id, published_at')
# Q 80 : # Article.published.where(last_buffered: nil).includes(:user, :buffer_updates).tagged_with(Tag.bufferized_tags, any: true).limited_columns_internal_select.order("hotness_score DESC").page(params[:page]).per(60)
Query(Article)
.select('published')
.where("last_buffered = ?")
.includes('user')
.includes('buffer_updates')
.order('id, hotness_score')
# Q 81 : # Article.published.where(last_buffered: nil).where("published_at > ? OR crossposted_at > ?", days_ago.days.ago, days_ago.days.ago).includes(:user).limited_columns_internal_select.order("positive_reactions_count DESC").page(params[:page]).per(50)
Query(Article)
.select('published')
.where("last_buffered = ?")
.includes('user')
.order('id, positive_reactions_count')
# Q 82 : # Article.select(:id).find_each
Query(Article)
.select('id')
# Q 83 : # Article.tagged_with(SiteConfig.campaign_featured_tags, any: true).where("published_at > ?", 2.weeks.ago).where(approved: true).order("hotness_score DESC")
Query(Article)
.where("approved = ?")
.order('id, hotness_score')
# Q 84 : # Article.tagged_with(cached_followed_tag_names, any: true).union(Article.where(user_id: cached_following_users_ids)).where(language: preferred_languages_array, published: true)
Query(Article)
.where("language = ?")
.where("published = ?")
# Q 85 : # Article.tagged_with(name).where("articles.featured_number > ?", 7.days.ago.to_i).map do |article|
#   
#   (
#   article.comments_count * 14) + article.score + rand(6) + (
#   (
#   taggings_count + 1) / 2)
#   
# end.sum
Query(Article)

# Q 86 : # Article.where("last_buffered > ?", 24.hours.ago).or(Article.where("published_at > ?", 20.minutes.ago))
Query(Article)

# Q 87 : # Article.where("title LIKE 'Welcome Thread - %'")
Query(Article)

# Q 88 : # Article.where(live_now: true).order("featured_number DESC").first
Query(Article)
.where("live_now = ?")
.order('id, featured_number')
.return_limit('1')
# Q 89 : # Article.where.not(id: article.id).where(live_now: true).update_all(live_now: false)
Query(Article)
.where("id = ?")
.where("live_now = ?")
# Q 90 : # Article.with_video.includes([:user]).select(:id, :video, :path, :title, :video_thumbnail_url, :user_id, :video_duration_in_seconds).order("hotness_score DESC").page(params[:page].to_i).per(24)
Query(Article)
.select('id')
.select('video')
.select('path')
.select('title')
.select('video_thumbnail_url')
.select('user_id')
.select('video_duration_in_seconds')
.order('id, hotness_score')
# Q 91 : # Article.with_video.includes([:user]).select(INDEX_ATTRIBUTES_FOR_SERIALIZATION).order(hotness_score: :desc).page(page).per(num)
Query(Article)
.order('hotness_score')
# Q 92 : # AuditLog.includes(:user).where(category: "moderator.audit.log").order(created_at: :desc).ransack(params[:q])
Query(AuditLog)
.includes('user')
.where("category = ?")
.order('created_at')
# Q 93 : # BackupData.find(user_params[:backup_data_id])
Query(BackupData)
.where("id = ?")
# Q 94 : # Badge.find_by(slug: params[:slug])
Query(Badge)
.where("slug = ?")
# Q 95 : # Badge.order(:created_at)
Query(Badge)
.order('created_at')
# Q 96 : # Badge.where(id: @user.badge_achievements.pluck(:badge_id))
Query(Badge)
.where("id = ?")
# Q 97 : # Badge.where(id: Tag.where(name: @article.decorate.cached_tag_list_array).pluck(:badge_id))
Query(Badge)
.where("id = ?")
# Q 98 : # Badge.where(id: Tag.where(name: @comment.commentable.decorate.cached_tag_list_array).pluck(:badge_id))
Query(Badge)
.where("id = ?")
# Q 99 : # Block.find(params[:id])
Query(Block)
.where("id = ?")
# Q 100 : # Block.order("index_position ASC")
Query(Block)
.order('id, index_position')
# Q 101 : # Broadcast.active.find_by(title: "Welcome Notification: set_up_profile")
Query(Broadcast)
.select('active')
.where("title = ?")
# Q 102 : # Broadcast.find_by!(id: params[:id])
Query(Broadcast)
.where("id = ?")
# Q 103 : # Broadcast.find_by!(id: params[:id])
Query(Broadcast)
.where("id = ?")
# Q 104 : # BufferUpdate.find(buffer_update_id)
Query(BufferUpdate)
.where("id = ?")
# Q 105 : # BufferUpdate.where(body_text: body_text, article_id: article_id, tag_id: tag_id, social_service_name: social_service_name).where("created_at > ?", 2.minutes.ago).any?
Query(BufferUpdate)
.where("body_text = ?")
.where("article_id = ?")
.where("tag_id = ?")
.where("social_service_name = ?")
# Q 106 : # BufferUpdate.where(composer_user_id: @user.id, article_id: @article.id)
Query(BufferUpdate)
.where("composer_user_id = ?")
.where("article_id = ?")
# Q 107 : # BufferUpdate.where(status: "pending").includes(:article)
Query(BufferUpdate)
.where("status = ?")
.includes('article')
# Q 108 : # ChatChannel.find(chat_channel_id)
Query(ChatChannel)
.where("id = ?")
# Q 109 : # ChatChannel.find(id)
Query(ChatChannel)
.where("id = ?")
# Q 110 : # ChatChannel.find(membership_params[:chat_channel_id])
Query(ChatChannel)
.where("id = ?")
# Q 111 : # ChatChannel.find(mod_chat_channel_id)
Query(ChatChannel)
.where("id = ?")
# Q 112 : # ChatChannel.find(params[:chat_channel_id])
Query(ChatChannel)
.where("id = ?")
# Q 113 : # ChatChannel.find(params[:chat_id])
Query(ChatChannel)
.where("id = ?")
# Q 114 : # ChatChannel.find(params[:id])
Query(ChatChannel)
.where("id = ?")
# Q 115 : # ChatChannel.find(video_channel.to_i)
Query(ChatChannel)
.where("id = ?")
# Q 116 : # ChatChannel.find_by(channel_name: "Workshop")
Query(ChatChannel)
.where("channel_name = ?")
# Q 117 : # ChatChannel.find_by(id: params[:id])
Query(ChatChannel)
.where("id = ?")
# Q 118 : # ChatChannel.find_by(slug: slug)
Query(ChatChannel)
.where("slug = ?")
# Q 119 : # ChatChannel.find_by(slug: slug)
Query(ChatChannel)
.where("slug = ?")
# Q 120 : # ChatChannel.select(CHANNEL_ATTRIBUTES_FOR_SERIALIZATION).find_by(id: params[:id])
Query(ChatChannel)
.where("id = ?")
# Q 121 : # ChatChannel.where(channel_type: "invite_only").includes(:users).page(params[:page]).per(50)
Query(ChatChannel)
.where("channel_type = ?")
.includes('users')
# Q 122 : # ChatChannelMembership.find(params[:id])
Query(ChatChannelMembership)
.where("id = ?")
# Q 123 : # ChatChannelMembership.find(params[:id])
Query(ChatChannelMembership)
.where("id = ?")
# Q 124 : # ChatChannelMembership.find(params[:id])
Query(ChatChannelMembership)
.where("id = ?")
# Q 125 : # ChatChannelMembership.find_by!(chat_channel_id: params[:chat_channel_id], user: user)
Query(ChatChannelMembership)
.where("chat_channel_id = ?")
.where("user = ?")
# Q 126 : # ChatChannelMembership.find_by(user_id: user.id, chat_channel_id: id)
Query(ChatChannelMembership)
.where("user_id = ?")
.where("chat_channel_id = ?")
# Q 127 : # ChatChannelMembership.find_each(&:index_to_elasticsearch_inline)
Query(ChatChannelMembership)

# Q 128 : # ChatChannelMembership.where(chat_channel_id: params[:chat_channel_id], user_id: user.id).first!
Query(ChatChannelMembership)
.where("chat_channel_id = ?")
.where("user_id = ?")
.return_limit('1')
# Q 129 : # ChatChannelMembership.where(user_id: session_user_id).includes(:chat_channel).where("has_unopened_messages = ? OR status = ?", true, "pending").where(show_global_badge_notification: true).order("chat_channel_memberships.updated_at DESC")
Query(ChatChannelMembership)
.where("user_id = ?")
.includes('chat_channel')
.where("show_global_badge_notification = ?")
.order('id, updated_at')
# Q 130 : # ChatChannelMembership.where(user_id: session_user_id).includes(:chat_channel).where(has_unopened_messages: true).pluck(:chat_channel_id)
Query(ChatChannelMembership)
.where("user_id = ?")
.includes('chat_channel')
.where("has_unopened_messages = ?")
.select('chat_channel_id')
# Q 131 : # ClassifiedListing.find(params[:id])
Query(ClassifiedListing)
.where("id = ?")
# Q 132 : # ClassifiedListing.find(params[:id])
Query(ClassifiedListing)
.where("id = ?")
# Q 133 : # ClassifiedListing.find(params[:id])
Query(ClassifiedListing)
.where("id = ?")
# Q 134 : # ClassifiedListing.find(params[:id])
Query(ClassifiedListing)
.where("id = ?")
# Q 135 : # ClassifiedListing.find(params[:id])
Query(ClassifiedListing)
.where("id = ?")
# Q 136 : # ClassifiedListing.find(params[:listing_id])
Query(ClassifiedListing)
.where("id = ?")
# Q 137 : # ClassifiedListing.find_by(slug: params[:slug])
Query(ClassifiedListing)
.where("slug = ?")
# Q 138 : # ClassifiedListing.find_each(&:index_to_elasticsearch_inline)
Query(ClassifiedListing)

# Q 139 : # ClassifiedListing.includes(%i{user organization}).page(params[:page]).order("bumped_at DESC").per(50)
Query(ClassifiedListing)
.order('id, bumped_at')
# Q 140 : # ClassifiedListing.published.select(ATTRIBUTES_FOR_SERIALIZATION).includes(:user, :organization, :taggings)
Query(ClassifiedListing)
.select('published')
.includes('user')
.includes('organization')
# Q 141 : # ClassifiedListing.where(organization_id: organizations_ids)
Query(ClassifiedListing)
.where("organization_id = ?")
# Q 142 : # ClassifiedListing.where(published: true)
Query(ClassifiedListing)
.where("published = ?")
# Q 143 : # ClassifiedListing.where(published: true).select(:title, :category, :slug, :bumped_at)
Query(ClassifiedListing)
.where("published = ?")
.select('title')
.select('category')
.select('slug')
.select('bumped_at')
# Q 144 : # ClassifiedListing.where(user_id: params[:user_id], contact_via_connect: true).limit(1)
Query(ClassifiedListing)
.where("user_id = ?")
.where("contact_via_connect = ?")
.return_limit('')
# Q 145 : # Comment.find(params[:comment_id])
Query(Comment)
.where("id = ?")
# Q 146 : # Comment.find(params[:comment_id])
Query(Comment)
.where("id = ?")
# Q 147 : # Comment.find(params[:id])
Query(Comment)
.where("id = ?")
# Q 148 : # Comment.find(params[:id])
Query(Comment)
.where("id = ?")
# Q 149 : # Comment.find(params[:id])
Query(Comment)
.where("id = ?")
# Q 150 : # Comment.find(params[:id_code].to_i(26))
Query(Comment)
.where("id = ?")
# Q 151 : # Comment.find(params[:id_code].to_i(26))
Query(Comment)
.where("id = ?")
# Q 152 : # Comment.find(params[:id_code].to_i(26))
Query(Comment)
.where("id = ?")
# Q 153 : # Comment.find(params[:id_code].to_i(26))
Query(Comment)
.where("id = ?")
# Q 154 : # Comment.find(params[:id_code].to_i(26))
Query(Comment)
.where("id = ?")
# Q 155 : # Comment.includes(:user).includes(:commentable).order("created_at DESC").page(params[:page] || 1).per(50)
Query(Comment)
.includes('user')
.includes('commentable')
.order('id, created_at')
# Q 156 : # Comment.includes(:user).includes(:commentable).order("positive_reactions_count DESC").where("created_at > ?", params[:state].split("-").last.to_i.days.ago).page(params[:page] || 1).per(50)
Query(Comment)
.includes('user')
.includes('commentable')
.order('id, positive_reactions_count')
# Q 157 : # Comment.subtree_of(params[:id].to_i(26)).includes(:user).select(ATTRIBUTES_FOR_SERIALIZATION).arrange
Query(Comment)
.includes('user')
# Q 158 : # Comment.where(body_markdown: @comment.body_markdown, commentable_id: @comment.commentable.id, ancestry: @comment.ancestry)
Query(Comment)
.where("body_markdown = ?")
.where("commentable_id = ?")
.where("ancestry = ?")
# Q 159 : # Comment.where(commentable_id: params[:commentable_id], commentable_type: params[:commentable_type]).select(%i{id positive_reactions_count})
Query(Comment)
.where("commentable_id = ?")
.where("commentable_type = ?")
.select('id
positive_reactions_count
')
# Q 160 : # Comment.where(id: descendant_ids).find_each
Query(Comment)
.where("id = ?")
# Q 161 : # DataUpdateScript.pluck(:file_name, :status).to_h
Query(DataUpdateScript)
.select('file_name')
.select('status')
# Q 162 : # DataUpdateScript.where(id: load_script_ids).select(&:enqueued?)
Query(DataUpdateScript)
.where("id = ?")
.select('enqueued?')
# Q 163 : # DisplayAd.find(display_ad_event_params[:display_ad_id])
Query(DisplayAd)
.where("id = ?")
# Q 164 : # Event.find(params[:id])
Query(Event)
.where("id = ?")
# Q 165 : # Event.find_by!(slug: params[:id])
Query(Event)
.where("slug = ?")
# Q 166 : # Event.find_by(live_now: true)
Query(Event)
.where("live_now = ?")
# Q 167 : # Event.order("starts_at DESC")
Query(Event)
.order('id, starts_at')
# Q 168 : # Event.order("starts_at DESC")
Query(Event)
.order('id, starts_at')
# Q 169 : # Event.order("starts_at DESC")
Query(Event)
.order('id, starts_at')
# Q 170 : # FeedbackMessage.find(params[:id])
Query(FeedbackMessage)
.where("id = ?")
# Q 171 : # FeedbackMessage.find_by(id: params[:id])
Query(FeedbackMessage)
.where("id = ?")
# Q 172 : # FeedbackMessage.includes(:reporter, :offender, :affected).order(created_at: :desc).ransack(params[:q])
Query(FeedbackMessage)
.includes('reporter')
.includes('offender')
.includes('affected')
.order('created_at')
# Q 173 : # Follow.find(params[:id])
Query(Follow)
.where("id = ?")
# Q 174 : # Follow.followable_user(@user.id).includes(:follower).order("created_at DESC").limit(@follows_limit)
Query(Follow)
.includes('follower')
.order('id, created_at')
.return_limit('')
# Q 175 : # Follow.followable_user(@user.id).includes(:follower).select(USERS_ATTRIBUTES_FOR_SERIALIZATION).order(created_at: :desc).page(params[:page]).per(@follows_limit)
Query(Follow)
.includes('follower')
.order('created_at')
# Q 176 : # Follow.follower_organization(id).limit(150).pluck(:followable_id)
Query(Follow)
.return_limit('')
.select('followable_id')
# Q 177 : # Follow.follower_podcast(id).pluck(:followable_id)
Query(Follow)
.select('followable_id')
# Q 178 : # Follow.follower_user(id).limit(150).pluck(:followable_id)
Query(Follow)
.return_limit('')
.select('followable_id')
# Q 179 : # GithubRepo.find(params[:id])
Query(GithubRepo)
.where("id = ?")
# Q 180 : # HtmlVariant.find(params[:fork_id])
Query(HtmlVariant)
.where("id = ?")
# Q 181 : # HtmlVariant.find(params[:id])
Query(HtmlVariant)
.where("id = ?")
# Q 182 : # HtmlVariant.find(params[:id])
Query(HtmlVariant)
.where("id = ?")
# Q 183 : # HtmlVariant.find(params[:id])
Query(HtmlVariant)
.where("id = ?")
# Q 184 : # HtmlVariant.find_for_test([], "badge_landing_page")
Query(HtmlVariant)

# Q 185 : # HtmlVariant.relevant.select(:name, :html).find_by(group: "campaign", name: SiteConfig.campaign_hero_html_variant_name)
Query(HtmlVariant)
.select('name')
.select('html')
.where("group = ?")
.where("name = ?")
# Q 186 : # HtmlVariant.where(published: true, approved: false).order("created_at DESC").includes(:user).page(params[:page]).per(30)
Query(HtmlVariant)
.where("published = ?")
.where("approved = ?")
.order('id, created_at')
.includes('user')
# Q 187 : # HtmlVariant.where(published: true, approved: true).order("success_rate DESC").includes(:user).page(params[:page]).per(30)
Query(HtmlVariant)
.where("published = ?")
.where("approved = ?")
.order('id, success_rate')
.includes('user')
# Q 188 : # HtmlVariant.where(published: true, approved: true, group: params[:state]).order("success_rate DESC").includes(:user).page(params[:page]).per(30)
Query(HtmlVariant)
.where("published = ?")
.where("approved = ?")
.where("group = ?")
.order('id, success_rate')
.includes('user')
# Q 189 : # Identity.find(user_params[:identity_id])
Query(Identity)
.where("id = ?")
# Q 190 : # Identity.where(provider: "github").last
Query(Identity)
.where("provider = ?")
.return_limit('1')
# Q 191 : # Identity.where(provider: "github").last(250).sample
Query(Identity)
.where("provider = ?")
.return_limit('1')
# Q 192 : # Identity.where(provider: "twitter").last(250).sample
Query(Identity)
.where("provider = ?")
.return_limit('1')
# Q 193 : # Identity.where(user_id: user.id, provider: "github").first.token
Query(Identity)
.where("user_id = ?")
.where("provider = ?")
.return_limit('1')
.select('token')
# Q 194 : # Message.find(params[:id])
Query(Message)
.where("id = ?")
# Q 195 : # Notification.find(params[:offset]).notified_at
Query(Notification)
.where("id = ?")
.select('notified_at')
# Q 196 : # NotificationSubscription.where(user_id: user.id, notifiable_id: params[:notifiable_id], notifiable_type: params[:notifiable_type]).first.to_json(only: %i{config})
Query(NotificationSubscription)
.where("user_id = ?")
.where("notifiable_id = ?")
.where("notifiable_type = ?")
.return_limit('1')
# Q 197 : # Organization.find(params[:followable_id])
Query(Organization)
.where("id = ?")
# Q 198 : # Organization.find(params[:id])
Query(Organization)
.where("id = ?")
# Q 199 : # Organization.find(params[:id])
Query(Organization)
.where("id = ?")
# Q 200 : # Organization.find(params[:organization_id])
Query(Organization)
.where("id = ?")
# Q 201 : # Organization.find(sponsorship_params[:organization_id])
Query(Organization)
.where("id = ?")
# Q 202 : # Organization.find(user_params[:organization_id])
Query(Organization)
.where("id = ?")
# Q 203 : # Organization.find(user_params[:organization_id])
Query(Organization)
.where("id = ?")
# Q 204 : # Organization.find_by("old_slug = ? OR old_old_slug = ?", potential_username, potential_username)
Query(Organization)

# Q 205 : # Organization.find_by(id: @classified_listing.organization_id)
Query(Organization)
.where("id = ?")
# Q 206 : # Organization.find_by(id: @classified_listing.organization_id)
Query(Organization)
.where("id = ?")
# Q 207 : # Organization.find_by(id: analytics_params[:organization_id])
Query(Organization)
.where("id = ?")
# Q 208 : # Organization.find_by(id: organization_membership_params[:organization_id])
Query(Organization)
.where("id = ?")
# Q 209 : # Organization.find_by(id: organization_params[:id])
Query(Organization)
.where("id = ?")
# Q 210 : # Organization.find_by(id: params[:org_id])
Query(Organization)
.where("id = ?")
# Q 211 : # Organization.find_by(id: params[:org_id])
Query(Organization)
.where("id = ?")
# Q 212 : # Organization.find_by(id: params[:org_id])
Query(Organization)
.where("id = ?")
# Q 213 : # Organization.find_by(id: params[:organization_id])
Query(Organization)
.where("id = ?")
# Q 214 : # Organization.find_by(id: params[:organization_id])
Query(Organization)
.where("id = ?")
# Q 215 : # Organization.find_by(id: params[:organization_id])
Query(Organization)
.where("id = ?")
# Q 216 : # Organization.find_by(id: params[:organization_id])
Query(Organization)
.where("id = ?")
# Q 217 : # Organization.find_by(id: params[:organization_id])
Query(Organization)
.where("id = ?")
# Q 218 : # Organization.find_by(secret: params[:org_secret].strip)
Query(Organization)
.where("secret = ?")
# Q 219 : # Organization.find_by(slug: params[:username])
Query(Organization)
.where("slug = ?")
# Q 220 : # Organization.find_by(slug: params[:username])
Query(Organization)
.where("slug = ?")
# Q 221 : # Organization.find_by(slug: params[:username])
Query(Organization)
.where("slug = ?")
# Q 222 : # Organization.find_by(slug: params[:username].downcase)
Query(Organization)
.where("slug = ?")
# Q 223 : # Organization.find_by(slug: temp_username)
Query(Organization)
.where("slug = ?")
# Q 224 : # Organization.find_by(slug: username)
Query(Organization)
.where("slug = ?")
# Q 225 : # Organization.order("name DESC").page(params[:page]).per(50)
Query(Organization)
.order('id, name')
# Q 226 : # Organization.where(id: organizations_ids)
Query(Organization)
.where("id = ?")
# Q 227 : # OrganizationMembership.find_by(id: params[:id])
Query(OrganizationMembership)
.where("id = ?")
# Q 228 : # OrganizationMembership.find_by(id: params[:id])
Query(OrganizationMembership)
.where("id = ?")
# Q 229 : # OrganizationMembership.find_by(organization_id: org.id, user_id: user.id).delete
Query(OrganizationMembership)
.where("organization_id = ?")
.where("user_id = ?")
# Q 230 : # OrganizationMembership.find_by(user_id: adminable.id, organization_id: org.id).update(type_of_user: "admin")
Query(OrganizationMembership)
.where("user_id = ?")
.where("organization_id = ?")
# Q 231 : # OrganizationMembership.find_by(user_id: user.id, organization_id: @organization.id)
Query(OrganizationMembership)
.where("user_id = ?")
.where("organization_id = ?")
# Q 232 : # OrganizationMembership.find_by(user_id: removable.id, organization_id: org.id)
Query(OrganizationMembership)
.where("user_id = ?")
.where("organization_id = ?")
# Q 233 : # OrganizationMembership.find_by(user_id: unadminable.id, organization_id: org.id).update(type_of_user: "member")
Query(OrganizationMembership)
.where("user_id = ?")
.where("organization_id = ?")
# Q 234 : # Page.find(params[:id])
Query(Page)
.where("id = ?")
# Q 235 : # Page.find(params[:id])
Query(Page)
.where("id = ?")
# Q 236 : # Page.find(params[:id])
Query(Page)
.where("id = ?")
# Q 237 : # Page.find_by!(slug: params[:slug])
Query(Page)
.where("slug = ?")
# Q 238 : # Page.find_by(slug: "about")
Query(Page)
.where("slug = ?")
# Q 239 : # Page.find_by(slug: "crayons")
Query(Page)
.where("slug = ?")
# Q 240 : # Page.find_by(slug: "faq")
Query(Page)
.where("slug = ?")
# Q 241 : # Page.find_by(slug: "security")
Query(Page)
.where("slug = ?")
# Q 242 : # Page.find_by(slug: params[:username].downcase, is_top_level_path: true)
Query(Page)
.where("slug = ?")
.where("is_top_level_path = ?")
# Q 243 : # Page.find_by(slug: slug)
Query(Page)
.where("slug = ?")
# Q 244 : # Page.find_by(slug: username)
Query(Page)
.where("slug = ?")
# Q 245 : # PageView.order("created_at DESC").find_or_create_by(article_id: params[:id], user_id: session_user_id)
Query(PageView)
.order('id, created_at')
# Q 246 : # Podcast.available.find_by!(slug: params[:username])
Query(Podcast)
.where("slug = ?")
# Q 247 : # Podcast.available.find_by!(slug: params[:username])
Query(Podcast)
.where("slug = ?")
# Q 248 : # Podcast.available.find_by(slug: params[:username].downcase)
Query(Podcast)
.where("slug = ?")
# Q 249 : # Podcast.available.order("title asc")
Query(Podcast)
.order('id, title')
# Q 250 : # Podcast.available.order("title asc")
Query(Podcast)
.order('id, title')
# Q 251 : # Podcast.available.order(title: :asc)
Query(Podcast)
.order('title')
# Q 252 : # Podcast.find(params[:followable_id])
Query(Podcast)
.where("id = ?")
# Q 253 : # Podcast.find(params[:id])
Query(Podcast)
.where("id = ?")
# Q 254 : # Podcast.find_by(slug: params[:username])
Query(Podcast)
.where("slug = ?")
# Q 255 : # Podcast.find_by(slug: slug)
Query(Podcast)
.where("slug = ?")
# Q 256 : # Podcast.find_by(slug: username)
Query(Podcast)
.where("slug = ?")
# Q 257 : # Podcast.left_outer_joins(:podcast_episodes).select("podcasts.*, count(podcast_episodes) as episodes_count").group("podcasts.id").order("podcasts.created_at DESC").page(params[:page]).per(50)
Query(Podcast)
.left_outer_joins('podcast_episodes')
.select('podcasts.*, count(podcast_episodes) as episodes_count')
.group('id')
.order('id, created_at')
# Q 258 : # PodcastEpisode.available.find_by!(slug: params[:slug])
Query(PodcastEpisode)
.where("slug = ?")
# Q 259 : # PodcastEpisode.includes(:podcast).order("published_at desc").where("published_at > ?", num_hours.hours.ago).select(:slug, :title, :podcast_id, :image)
Query(PodcastEpisode)
.includes('podcast')
.order('id, published_at')
.select('slug')
.select('title')
.select('podcast_id')
.select('image')
# Q 260 : # PodcastEpisode.includes(:podcast).reachable
Query(PodcastEpisode)
.includes('podcast')
.select('reachable')
# Q 261 : # PodcastEpisode.select(:id).find_each
Query(PodcastEpisode)
.select('id')
# Q 262 : # PodcastEpisode.where(media_url: item.enclosure_url).or(PodcastEpisode.where(title: item.title)).or(PodcastEpisode.where(guid: item.guid.to_s)).presence
Query(PodcastEpisode)
.where("media_url = ?")
# Q 263 : # PodcastEpisode.where(website_url: item.link).presence
Query(PodcastEpisode)
.where("website_url = ?")
# Q 264 : # Poll.find(params[:id])
Query(Poll)
.where("id = ?")
# Q 265 : # Poll.find(poll_skips_params[:poll_id])
Query(Poll)
.where("id = ?")
# Q 266 : # PollOption.find(poll_vote_params[:poll_option_id])
Query(PollOption)
.where("id = ?")
# Q 267 : # RatingVote.where(article_id: @article.id, user_id: @user.id).first
Query(RatingVote)
.where("article_id = ?")
.where("user_id = ?")
.return_limit('1')
# Q 268 : # RatingVote.where(user_id: user.id, article_id: rating_vote_params[:article_id]).first
Query(RatingVote)
.where("user_id = ?")
.where("article_id = ?")
.return_limit('1')
# Q 269 : # Reaction.find(params[:id])
Query(Reaction)
.where("id = ?")
# Q 270 : # Reaction.find(params[:id])
Query(Reaction)
.where("id = ?")
# Q 271 : # Reaction.includes(:user, :reactable).where("category IN (?)", NEGATIVE_REACTION_CATEGORIES).order("reactions.created_at DESC").ransack(params[:q])
Query(Reaction)
.includes('user')
.includes('reactable')
.order('id, created_at')
# Q 272 : # Reaction.positive.where(reactable_id: id, reactable_type: "Article", user_id: session_user_id)
Query(Reaction)
.where("reactable_id = ?")
.where("reactable_type = ?")
.where("user_id = ?")
# Q 273 : # Reaction.where(category: "vomit", status: "confirmed").includes(:user, :reactable).order(updated_at: :desc).limit(10)
Query(Reaction)
.where("category = ?")
.where("status = ?")
.includes('user')
.includes('reactable')
.order('updated_at')
.return_limit('')
# Q 274 : # Reaction.where(category: "vomit", status: "invalid").includes(:user, :reactable).order(updated_at: :desc).limit(10)
Query(Reaction)
.where("category = ?")
.where("status = ?")
.includes('user')
.includes('reactable')
.order('updated_at')
.return_limit('')
# Q 275 : # Reaction.where(category: "vomit", status: "valid").includes(:user, :reactable).order(updated_at: :desc)
Query(Reaction)
.where("category = ?")
.where("status = ?")
.includes('user')
.includes('reactable')
.order('updated_at')
# Q 276 : # Reaction.where(reactable_id: id, reactable_type: "Article")
Query(Reaction)
.where("reactable_id = ?")
.where("reactable_type = ?")
# Q 277 : # Reaction.where(reactable_id: reactable.id, reactable_type: class_name, user: user, category: category).any?
Query(Reaction)
.where("reactable_id = ?")
.where("reactable_type = ?")
.where("user = ?")
.where("category = ?")
# Q 278 : # Reaction.where(reactable_id: user_id, reactable_type: "User").sum(:points)
Query(Reaction)
.where("reactable_id = ?")
.where("reactable_type = ?")
# Q 279 : # Reaction.where(user_id: user.id, reactable_id: params[:reactable_id], reactable_type: params[:reactable_type], category: category).first
Query(Reaction)
.where("user_id = ?")
.where("reactable_id = ?")
.where("reactable_type = ?")
.where("category = ?")
.return_limit('1')
# Q 280 : # ResponseTemplate.find(params[:id])
Query(ResponseTemplate)
.where("id = ?")
# Q 281 : # ResponseTemplate.find(params[:id])
Query(ResponseTemplate)
.where("id = ?")
# Q 282 : # ResponseTemplate.find(params[:id])
Query(ResponseTemplate)
.where("id = ?")
# Q 283 : # ResponseTemplate.find(params[:id])
Query(ResponseTemplate)
.where("id = ?")
# Q 284 : # ResponseTemplate.where(type_of: params[:filter])
Query(ResponseTemplate)
.where("type_of = ?")
# Q 285 : # Sponsorship.find(params[:id])
Query(Sponsorship)
.where("id = ?")
# Q 286 : # Sponsorship.find(params[:id])
Query(Sponsorship)
.where("id = ?")
# Q 287 : # Sponsorship.find(params[:id])
Query(Sponsorship)
.where("id = ?")
# Q 288 : # Sponsorship.includes(:organization, :user).order("created_at desc").page(params[:page]).per(50)
Query(Sponsorship)
.includes('organization')
.includes('user')
.order('id, created_at')
# Q 289 : # Tag.find(params[:followable_id])
Query(Tag)
.where("id = ?")
# Q 290 : # Tag.find(params[:id])
Query(Tag)
.where("id = ?")
# Q 291 : # Tag.find(params[:id])
Query(Tag)
.where("id = ?")
# Q 292 : # Tag.find(params[:id])
Query(Tag)
.where("id = ?")
# Q 293 : # Tag.find(params[:id])
Query(Tag)
.where("id = ?")
# Q 294 : # Tag.find_by!(id: params[:id])
Query(Tag)
.where("id = ?")
# Q 295 : # Tag.find_by!(name: params[:tag])
Query(Tag)
.where("name = ?")
# Q 296 : # Tag.find_by!(name: params[:tag])
Query(Tag)
.where("name = ?")
# Q 297 : # Tag.find_by!(name: sponsorship_params[:tag_name])
Query(Tag)
.where("name = ?")
# Q 298 : # Tag.find_by(name: "hiring")
Query(Tag)
.where("name = ?")
# Q 299 : # Tag.find_by(name: @tag)
Query(Tag)
.where("name = ?")
# Q 300 : # Tag.find_by(name: link["href"].split("/t/")[1].split("/")[0])
Query(Tag)
.where("name = ?")
# Q 301 : # Tag.find_by(name: name)
Query(Tag)
.where("name = ?")
# Q 302 : # Tag.find_by(name: params[:tag])
Query(Tag)
.where("name = ?")
# Q 303 : # Tag.find_by(name: params[:template])
Query(Tag)
.where("name = ?")
# Q 304 : # Tag.find_by(name: tag).alias_for
Query(Tag)
.where("name = ?")
.select('alias_for')
# Q 305 : # Tag.find_each(&:index_to_elasticsearch_inline)
Query(Tag)

# Q 306 : # Tag.find_each(&:save)
Query(Tag)

# Q 307 : # Tag.includes(:sponsorship).order(hotness_score: :desc).limit(100)
Query(Tag)
.includes('sponsorship')
.order('hotness_score')
.return_limit('')
# Q 308 : # Tag.order("taggings_count DESC").page(params[:page]).per(50)
Query(Tag)
.order('id, taggings_count')
# Q 309 : # Tag.select(%i{bg_color_hex text_color_hex}).find_by(name: tag)
Query(Tag)
.select('bg_color_hex
text_color_hex
')
.where("name = ?")
# Q 310 : # Tag.select(ATTRIBUTES_FOR_SERIALIZATION).order(taggings_count: :desc).page(page).per(num)
Query(Tag)
.order('taggings_count')
# Q 311 : # Tag.where(id: Follow.where(follower_id: id, followable_type: "ActsAsTaggableOn::Tag").pluck(:followable_id)).pluck(:name)
Query(Tag)
.where("id = ?")
.select('name')
# Q 312 : # Tag.where(id: tag_ids).pluck(:name)
Query(Tag)
.where("id = ?")
.select('name')
# Q 313 : # Tag.where(name: %w{shecoded theycoded shecodedally}).update_all(social_preview_template: "shecoded")
Query(Tag)
.where("name = ?")
# Q 314 : # Tag.where(name: SiteConfig.suggested_tags).select(ATTRIBUTES_FOR_SERIALIZATION)
Query(Tag)
.where("name = ?")
# Q 315 : # Tag.where(supported: false).order("taggings_count DESC").page(params[:page]).per(50)
Query(Tag)
.where("supported = ?")
.order('id, taggings_count')
# Q 316 : # Tag.where(supported: true).order("taggings_count DESC").page(params[:page]).per(50)
Query(Tag)
.where("supported = ?")
.order('id, taggings_count')
# Q 317 : # TagAdjustment.find(params[:id])
Query(TagAdjustment)
.where("id = ?")
# Q 318 : # TagAdjustment.where(article_id: @moderatable.id)
Query(TagAdjustment)
.where("article_id = ?")
# Q 319 : # TagAdjustment.where(article_id: article.id)
Query(TagAdjustment)
.where("article_id = ?")
# Q 320 : # TagAdjustment.where(article_id: id, adjustment_type: "addition", status: "committed").pluck(:tag_name)
Query(TagAdjustment)
.where("article_id = ?")
.where("adjustment_type = ?")
.where("status = ?")
.select('tag_name')
# Q 321 : # TagAdjustment.where(article_id: id, adjustment_type: "removal", status: "committed").pluck(:tag_name)
Query(TagAdjustment)
.where("article_id = ?")
.where("adjustment_type = ?")
.where("status = ?")
.select('tag_name')
# Q 322 : # Tweet.where(twitter_id_code: tweeted.attrs[:id_str]).first_or_initialize
Query(Tweet)
.where("twitter_id_code = ?")
# Q 323 : # User.find(@add_user_id).update(email_tag_mod_newsletter: true)
Query(User)
.where("id = ?")
# Q 324 : # User.find(@article.second_user_id)
Query(User)
.where("id = ?")
# Q 325 : # User.find(@article.third_user_id)
Query(User)
.where("id = ?")
# Q 326 : # User.find(@remove_user_id)
Query(User)
.where("id = ?")
# Q 327 : # User.find(doorkeeper_token.resource_owner_id)
Query(User)
.where("id = ?")
# Q 328 : # User.find(params[:bust_user].to_i)
Query(User)
.where("id = ?")
# Q 329 : # User.find(params[:followable_id])
Query(User)
.where("id = ?")
# Q 330 : # User.find(params[:id])
Query(User)
.where("id = ?")
# Q 331 : # User.find(params[:id])
Query(User)
.where("id = ?")
# Q 332 : # User.find(params[:id])
Query(User)
.where("id = ?")
# Q 333 : # User.find(params[:id])
Query(User)
.where("id = ?")
# Q 334 : # User.find(params[:id])
Query(User)
.where("id = ?")
# Q 335 : # User.find(params[:id])
Query(User)
.where("id = ?")
# Q 336 : # User.find(params[:id])
Query(User)
.where("id = ?")
# Q 337 : # User.find(params[:id])
Query(User)
.where("id = ?")
# Q 338 : # User.find(params[:id])
Query(User)
.where("id = ?")
# Q 339 : # User.find(params[:user_id])
Query(User)
.where("id = ?")
# Q 340 : # User.find(params[:user_id])
Query(User)
.where("id = ?")
# Q 341 : # User.find(params[:user_id])
Query(User)
.where("id = ?")
# Q 342 : # User.find(params[:user_id])
Query(User)
.where("id = ?")
# Q 343 : # User.find(params[:user_id])
Query(User)
.where("id = ?")
# Q 344 : # User.find(resource_params[:user_id])
Query(User)
.where("id = ?")
# Q 345 : # User.find(user_id)
Query(User)
.where("id = ?")
# Q 346 : # User.find(verified_params[:user_id])
Query(User)
.where("id = ?")
# Q 347 : # User.find_by!(email: params.dig(:data, :email))
Query(User)
.where("email = ?")
# Q 348 : # User.find_by!(username: params[:username].tr("@", "").downcase)
Query(User)
.where("username = ?")
# Q 349 : # User.find_by("old_username = ? OR old_old_username = ?", potential_username, potential_username)
Query(User)

# Q 350 : # User.find_by("old_username = ? OR old_old_username = ?", potential_username, potential_username)
Query(User)

# Q 351 : # User.find_by(id: params[:podcast][:user_id])
Query(User)
.where("id = ?")
# Q 352 : # User.find_by(id: repo.user_id).identities.where(provider: "github").last.token
Query(Identity)
.where("id = ?")
.where("user_id = ?")
.where("provider = ?")
.return_limit('1')
.select('token')
# Q 353 : # User.find_by(secret: params[:key])
Query(User)
.where("secret = ?")
# Q 354 : # User.find_by(twitter_username: tweeted.user.screen_name).id
Query(User)
.where("twitter_username = ?")
# Q 355 : # User.find_by(username: command[1])
Query(User)
.where("username = ?")
# Q 356 : # User.find_by(username: command[1])
Query(User)
.where("username = ?")
# Q 357 : # User.find_by(username: link["href"].split("/")[3].split("/")[0])
Query(User)
.where("username = ?")
# Q 358 : # User.find_by(username: params[:username])
Query(User)
.where("username = ?")
# Q 359 : # User.find_by(username: params[:username])
Query(User)
.where("username = ?")
# Q 360 : # User.find_by(username: params[:username])
Query(User)
.where("username = ?")
# Q 361 : # User.find_by(username: params[:username])
Query(User)
.where("username = ?")
# Q 362 : # User.find_by(username: params[:username])
Query(User)
.where("username = ?")
# Q 363 : # User.find_by(username: params[:username].tr("@", "").downcase)
Query(User)
.where("username = ?")
# Q 364 : # User.find_by(username: slug)
Query(User)
.where("username = ?")
# Q 365 : # User.find_by(username: temp_username)
Query(User)
.where("username = ?")
# Q 366 : # User.find_by(username: username)
Query(User)
.where("username = ?")
# Q 367 : # User.order("created_at DESC").page(params[:page]).per(50)
Query(User)
.order('id, created_at')
# Q 368 : # User.select(:id).find_each
Query(User)
.select('id')
# Q 369 : # User.where("github_created_at > ? OR twitter_created_at > ? OR length(name) > ?", 50.hours.ago, 50.hours.ago, 30).where("created_at > ?", 48.hours.ago).order(created_at: :desc).where.not("username LIKE ?", "%spam_%").limit(150)
Query(User)
.order('created_at')
.return_limit('')
# Q 370 : # User.where(username: DEFAULT_FOLLOW_SUGGESTIONS)
Query(User)
.where("username = ?")
# Q 371 : # User.where(username: chat_channel_params[:usernames_string].downcase.delete(" ").split(","))
Query(User)
.where("username = ?")
# Q 372 : # User.where(username: usernames)
Query(User)
.where("username = ?")
# Q 373 : # User.with_role(:tag_moderator, @tag_model).select(:username, :profile_image, :id)
Query(User)
.select('username')
.select('profile_image')
.select('id')
# Q 374 : # User.with_role(:tag_moderator, self).order("id ASC").pluck(:id)
Query(User)
.order('id')
.select('id')
# Q 375 : # UserBlock.find_by(blocked_id: permitted_attributes(UserBlock)[:blocked_id], blocker: user)
Query(UserBlock)
.where("blocked_id = ?")
.where("blocker = ?")
# Q 376 : # UserBlock.where(blocked_id: id)
Query(UserBlock)
.where("blocked_id = ?")
# Q 377 : # UserBlock.where(blocker_id: id)
Query(UserBlock)
.where("blocker_id = ?")
# Q 378 : # Webhook::Endpoint.includes(:user).page(params[:page]).per(50).order("created_at desc")
Query(Webhook::Endpoint)
.includes('user')
.order('')
# Q 379 : # article.comments.includes(:user).select(ATTRIBUTES_FOR_SERIALIZATION).arrange
Query(Comment)
.where("article_id = ?")
.includes('user')
# Q 380 : # article.published_from_feed
Query(Article)
.select('published_from_feed')
# Q 381 : # article.published_from_feed
Query(Article)
.select('published_from_feed')
# Q 382 : # article.touch(:last_commented_at)
Query(Article)

# Q 383 : # articles.where(featured: true).size
Query(Article)
.where("featured = ?")
# Q 384 : # cached_tagged_with(tag).where(approved: true)
Query(Article)
.where("approved = ?")
# Q 385 : # chat_channel.chat_channel_memberships.each(&:index_to_elasticsearch)
Query(ChatChannelMembership)
.where("chat_channel_id = ?")
# Q 386 : # chat_channel.chat_channel_memberships.map(&:index_to_elasticsearch)
Query(ChatChannelMembership)
.where("chat_channel_id = ?")
# Q 387 : # chat_channel.chat_channel_memberships.where("last_opened_at < ?", 10.seconds.ago).where.not(user_id: user_id).update_all(has_unopened_messages: true)
Query(ChatChannelMembership)
.where("chat_channel_id = ?")
.where("user_id = ?")
# Q 388 : # chat_channel.last_message_at
Query(ChatChannel)
.select('last_message_at')
# Q 389 : # chat_channel.last_message_at
Query(ChatChannel)
.select('last_message_at')
# Q 390 : # chat_channel.touch(:last_message_at)
Query(ChatChannel)

# Q 391 : # chat_channel.users.where.not(id: user.id).first
Query(User)
.where("chat_channel_id = ?")
.where("id = ?")
.return_limit('1')
# Q 392 : # chat_channel.users.where.not(id: user_id).first
Query(User)
.where("chat_channel_id = ?")
.where("id = ?")
.return_limit('1')
# Q 393 : # chat_channel_memberships.pluck(:user_id)
Query(ChatChannelMembership)
.select('user_id')
# Q 394 : # chat_channel_memberships.pluck(:user_id).map
Query(ChatChannelMembership)
.select('user_id')
# Q 395 : # chat_channel_memberships.where(user: user).destroy_all
Query(ChatChannelMembership)
.where("user = ?")
# Q 396 : # chat_channel_memberships.where(user_id: user.id).pluck(:last_opened_at).first
Query(ChatChannelMembership)
.where("user_id = ?")
.select('last_opened_at')
.return_limit('1')
# Q 397 : # chat_channels.where(channel_type: "direct").empty?
Query(ChatChannel)
.where("channel_type = ?")
# Q 398 : # chat_channels.where(channel_type: "direct").select
Query(ChatChannel)
.where("channel_type = ?")
# Q 399 : # comments.pluck(:body_markdown).join(" ")
Query(Comment)
.select('body_markdown')
# Q 400 : # user.articles.find_by(body_markdown: @article.body_markdown)
Query(Article)
.where("user_id = ?")
.where("body_markdown = ?")
# Q 401 : # user.articles.find_by(slug: params[:slug])
Query(Article)
.where("user_id = ?")
.where("slug = ?")
# Q 402 : # user.badge_achievements.pluck(:badge_id)
Query(BadgeAchievement)
.where("user_id = ?")
.select('badge_id')
# Q 403 : # user.chat_channel_memberships.includes(:chat_channel).where(status: "pending")
Query(ChatChannelMembership)
.where("user_id = ?")
.includes('chat_channel')
.where("status = ?")
# Q 404 : # user.chat_channel_memberships.includes(:chat_channel).where(status: "pending").order("chat_channel_memberships.updated_at DESC")
Query(ChatChannelMembership)
.where("user_id = ?")
.includes('chat_channel')
.where("status = ?")
.order('id, updated_at')
# Q 405 : # user.classified_listings.includes(:organization, :taggings)
Query(ClassifiedListing)
.where("user_id = ?")
.includes('organization')
# Q 406 : # user.follows_by_type("ActsAsTaggableOn::Tag").select(TAGS_ATTRIBUTES_FOR_SERIALIZATION).order(points: :desc)
Query(user)
.order('points')
# Q 407 : # user.follows_by_type("Organization").select(ATTRIBUTES_FOR_SERIALIZATION).order(created_at: :desc)
Query(user)
.order('created_at')
# Q 408 : # user.follows_by_type("Podcast").select(ATTRIBUTES_FOR_SERIALIZATION).order(created_at: :desc)
Query(user)
.order('created_at')
# Q 409 : # user.follows_by_type("User").select(ATTRIBUTES_FOR_SERIALIZATION).order(created_at: :desc)
Query(user)
.order('created_at')
# Q 410 : # user.github_repos.where(featured: true).distinct.pluck(:github_id_code)
Query(GithubRepo)
.where("user_id = ?")
.where("featured = ?")
.distinct('')
.select('github_id_code')
# Q 411 : # user.organization_memberships.where(type_of_user: "admin").pluck(:organization_id)
Query(OrganizationMembership)
.where("user_id = ?")
.where("type_of_user = ?")
.select('organization_id')
# Q 412 : # find_by(id: SiteConfig.mascot_user_id)
Query(User)
.where("id = ?")
# Q 413 : # find_by(id: SiteConfig.staff_user_id)
Query(User)
.where("id = ?")
# Q 414 : # find_by(name: word.downcase)
Query(Tag)
.where("name = ?")
# Q 415 : # find_by(twitter_id_code: twitter_id_code)
Query(Tweet)
.where("twitter_id_code = ?")
# Q 416 : # find_by(url: url)
Query(GithubIssue)
.where("url = ?")
# Q 417 : # includes(:counters).joins(:counters).where("(user_counters.data -> 'comments_prior_7_days')::int >= ?", number)
Query(User)
.includes('counters')
.joins('counters')
# Q 418 : # includes(:counters).joins(:counters).where("(user_counters.data -> 'comments_these_7_days')::int >= ?", number)
Query(User)
.includes('counters')
.joins('counters')
# Q 419 : # includes(:counters).order("user_counters.data -> 'comments_these_7_days' DESC").limit(number)
Query(User)
.includes('counters')
.order('id, data')
.return_limit('')
# Q 420 : # joins(:podcast).where(podcasts: { creator_id: user.id })
Query(PodcastEpisode)
.joins('podcast')
.where("creator_id = ?")
# Q 421 : # joins(:podcast).where(podcasts: { published: true })
Query(PodcastEpisode)
.joins('podcast')
.where("published = ?")
# Q 422 : # order(column => dir.to_sym)
Query(Article)
.order('')
# Q 423 : # organization.touch(:last_article_at)
Query(Organization)

# Q 424 : # organization.touch(:last_article_at)
Query(Organization)

# Q 425 : # organization_memberships.where(type_of_user: "admin").pluck(:organization_id)
Query(OrganizationMembership)
.where("type_of_user = ?")
.select('organization_id')
# Q 426 : # organization_memberships.where(type_of_user: %w{admin member}).pluck(:organization_id)
Query(OrganizationMembership)
.where("type_of_user = ?")
.select('organization_id')
# Q 427 : # organizations.where(id: org_ids)
Query(Organization)
.where("id = ?")
# Q 428 : # organizations.where(id: org_ids)
Query(Organization)
.where("id = ?")
# Q 429 : # poll.poll_skips.where(user_id: user_id).any?
Query(PollSkip)
.where("poll_id = ?")
.where("user_id = ?")
# Q 430 : # poll.poll_skips.where(user_id: user_id).any?
Query(PollSkip)
.where("poll_id = ?")
.where("user_id = ?")
# Q 431 : # poll.poll_votes.where(user_id: user_id).any?
Query(PollVote)
.where("poll_id = ?")
.where("user_id = ?")
# Q 432 : # poll.poll_votes.where(user_id: user_id).any?
Query(PollVote)
.where("poll_id = ?")
.where("user_id = ?")
# Q 433 : # poll_options.pluck(:id, :poll_votes_count)
Query(PollOption)
.select('id')
.select('poll_votes_count')
# Q 434 : # published.cached_tagged_with("help").order(created_at: :desc).where("published_at > ? AND comments_count < ? AND score > ?", 12.hours.ago, 6, -4)
Query(Article)
.order('created_at')
# Q 435 : # published.select(:id, :published_at, :processed_html, :user_id, :organization_id, :title, :path)
Query(Article)
.select('id')
.select('published_at')
.select('processed_html')
.select('user_id')
.select('organization_id')
.select('title')
.select('path')
# Q 436 : # published.where(user_id: SiteConfig.staff_user_id).order(published_at: :desc).tagged_with(tag_name)
Query(Article)
.where("user_id = ?")
.order('published_at')
# Q 437 : # published.where(user_id: user_id).order(published_at: :desc).tagged_with(tag_name)
Query(Article)
.where("user_id = ?")
.order('published_at')
# Q 438 : # published.where.not(video: [nil, ""], video_thumbnail_url: [nil, ""]).where("score > ?", -4)
Query(Article)
.where("video = ?")
.where("video_thumbnail_url = ?")
# Q 439 : # reactions.group(:category).count
Query(Reaction)
.group('category')
# Q 440 : # reactions.readinglist.find_each(&:index_to_elasticsearch)
Query(Reaction)

# Q 441 : # reactions.readinglist.find_each(&:remove_from_elasticsearch)
Query(Reaction)

# Q 442 : # roles.where(name: "tag_moderator").any?
Query(Role)
.where("name = ?")
# Q 443 : # roles.where(name: "tag_moderator").pluck(:resource_id)
Query(Role)
.where("name = ?")
.select('resource_id')
# Q 444 : # select(:path, :title, :id, :featured, :approved, :published, :comments_count, :positive_reactions_count, :cached_tag_list, :main_image, :main_image_background_hex_color, :updated_at, :boost_states, :video, :user_id, :organization_id, :video_source_url, :video_code, :video_thumbnail_url, :video_closed_caption_track_url, :social_image, :published_from_feed, :crossposted_at, :published_at, :featured_number, :live_now, :last_buffered, :facebook_last_buffered, :created_at, :body_markdown, :email_digest_eligible, :processed_html)
Query(Article)
.select('path')
.select('title')
.select('id')
.select('featured')
.select('approved')
.select('published')
.select('comments_count')
.select('positive_reactions_count')
.select('cached_tag_list')
.select('main_image')
.select('main_image_background_hex_color')
.select('updated_at')
.select('boost_states')
.select('video')
.select('user_id')
.select('organization_id')
.select('video_source_url')
.select('video_code')
.select('video_thumbnail_url')
.select('video_closed_caption_track_url')
.select('social_image')
.select('published_from_feed')
.select('crossposted_at')
.select('published_at')
.select('featured_number')
.select('live_now')
.select('last_buffered')
.select('facebook_last_buffered')
.select('created_at')
.select('body_markdown')
.select('email_digest_eligible')
.select('processed_html')
# Q 445 : # select(:path, :title, :id, :published, :comments_count, :positive_reactions_count, :cached_tag_list, :main_image, :main_image_background_hex_color, :updated_at, :slug, :video, :user_id, :organization_id, :video_source_url, :video_code, :video_thumbnail_url, :video_closed_caption_track_url, :language, :experience_level_rating, :experience_level_rating_distribution, :cached_user, :cached_organization, :published_at, :crossposted_at, :boost_states, :description, :reading_time, :video_duration_in_seconds)
Query(Article)
.select('path')
.select('title')
.select('id')
.select('published')
.select('comments_count')
.select('positive_reactions_count')
.select('cached_tag_list')
.select('main_image')
.select('main_image_background_hex_color')
.select('updated_at')
.select('slug')
.select('video')
.select('user_id')
.select('organization_id')
.select('video_source_url')
.select('video_code')
.select('video_thumbnail_url')
.select('video_closed_caption_track_url')
.select('language')
.select('experience_level_rating')
.select('experience_level_rating_distribution')
.select('cached_user')
.select('cached_organization')
.select('published_at')
.select('crossposted_at')
.select('boost_states')
.select('description')
.select('reading_time')
.select('video_duration_in_seconds')
# Q 446 : # select(:to, :subject, :content, :utm_campaign, :feedback_message_id).where(feedback_message_id: feedback_message_ids)
Query(EmailMessage)
.select('to')
.select('subject')
.select('content')
.select('utm_campaign')
.select('feedback_message_id')
.where("feedback_message_id = ?")
# Q 447 : # self.class.where(organization: organization).where("level IN (?) AND expires_at > ? AND id != ?", LEVELS_WITH_EXPIRATION, Time.current, id.to_i).exists?
Query(Sponsorship)
.where("organization = ?")
.return_limit('1')
# Q 448 : # self.class.where(sponsorable: sponsorable, level: :tag).where("expires_at > ? AND id != ?", Time.current, id.to_i).exists?
Query(Sponsorship)
.where("sponsorable = ?")
.where("level = ?")
.return_limit('1')
# Q 449 : # tags.pluck(:keywords_for_search).join
Query(Tag)
.select('keywords_for_search')
# Q 450 : # tags.pluck(:keywords_for_search).join
Query(Tag)
.select('keywords_for_search')
# Q 451 : # tags.pluck(:requires_approval).include?(true)
Query(Tag)
.select('requires_approval')
# Q 452 : # user.articles.published.order("published_at ASC").pluck(:id)
Query(Article)
.where("user_id = ?")
.select('published')
.order('id, published_at')
.select('id')
# Q 453 : # user.collections.pluck(:slug)
Query(Collection)
.where("user_id = ?")
.select('slug')
# Q 454 : # user.credits.where(spent: false).limit(amount).delete_all
Query(Credit)
.where("user_id = ?")
.where("spent = ?")
.return_limit('')
# Q 455 : # user.touch(:last_article_at)
Query(User)

# Q 456 : # user.touch(:last_comment_at)
Query(User)

# Q 457 : # user.touch(:last_comment_at)
Query(User)

# Q 458 : # user.touch(:profile_updated_at, :last_followed_at, :last_comment_at)
Query(User)

# Q 459 : # user.touch(:updated_at, :last_comment_at)
Query(User)

# Q 460 : # where("boost_states ->> 'boosted_additional_articles' = 'true'")
Query(Article)

# Q 461 : # where("boost_states ->> 'boosted_dev_digest_email' = 'true'")
Query(Article)

# Q 462 : # where("cached_tag_list ~* ?", "^#{
# tag},| #{
# tag},|, #{
# tag}$|^#{
# tag}$")
Query(Article)

# Q 463 : # where("events @> ARRAY[?]::varchar[]", Array(events))
Query(Endpoint)

# Q 464 : # where("expires_at > ?", Time.current)
Query(Sponsorship)

# Q 465 : # where("points > ?", 0)
Query(Reaction)

# Q 466 : # where("starts_at < ?", Time.current).where(published: true)
Query(Event)
.where("published = ?")
# Q 467 : # where("starts_at > ?", Time.current).where(published: true)
Query(Event)
.where("published = ?")
# Q 468 : # where("updated_at < ?", 1.day.ago).find_each
Query(GithubRepo)

# Q 469 : # where(active: true)
Query(Broadcast)
.where("active = ?")
# Q 470 : # where(approved: true, published: true)
Query(HtmlVariant)
.where("approved = ?")
.where("published = ?")
# Q 471 : # where(approved: true, published: true)
Query(DisplayAd)
.where("approved = ?")
.where("published = ?")
# Q 472 : # where(category: "readinglist")
Query(Reaction)
.where("category = ?")
# Q 473 : # where(followable_id: id, followable_type: "ActsAsTaggableOn::Tag")
Query(Follow)
.where("followable_id = ?")
.where("followable_type = ?")
# Q 474 : # where(followable_id: id, followable_type: "User")
Query(Follow)
.where("followable_id = ?")
.where("followable_type = ?")
# Q 475 : # where(follower_id: id, followable_type: "ActsAsTaggableOn::Tag")
Query(Follow)
.where("follower_id = ?")
.where("followable_type = ?")
# Q 476 : # where(follower_id: id, followable_type: "Organization")
Query(Follow)
.where("follower_id = ?")
.where("followable_type = ?")
# Q 477 : # where(follower_id: id, followable_type: "Podcast")
Query(Follow)
.where("follower_id = ?")
.where("followable_type = ?")
# Q 478 : # where(follower_id: id, followable_type: "User")
Query(Follow)
.where("follower_id = ?")
.where("followable_type = ?")
# Q 479 : # where(group: group, approved: true, published: true, target_tag: tags_array).order("RANDOM()").first
Query(HtmlVariant)
.where("group = ?")
.where("approved = ?")
.where("published = ?")
.where("target_tag = ?")
.order('id')
.return_limit('1')
# Q 480 : # where(id: PodcastEpisode.reachable.select(:podcast_id))
Query(Podcast)
.where("id = ?")
# Q 481 : # where(level: :bronze)
Query(Sponsorship)
.where("level = ?")
# Q 482 : # where(level: :devrel)
Query(Sponsorship)
.where("level = ?")
# Q 483 : # where(level: :gold)
Query(Sponsorship)
.where("level = ?")
# Q 484 : # where(level: :media)
Query(Sponsorship)
.where("level = ?")
# Q 485 : # where(level: :silver)
Query(Sponsorship)
.where("level = ?")
# Q 486 : # where(level: :tag)
Query(Sponsorship)
.where("level = ?")
# Q 487 : # where(notifiable_type: "Article", action: "Published")
Query(Notification)
.where("notifiable_type = ?")
.where("action = ?")
# Q 488 : # where(notifiable_type: "Comment", action: nil)
Query(Notification)
.where("notifiable_type = ?")
.where("action = ?")
# Q 489 : # where(notifiable_type: "Mention")
Query(Notification)
.where("notifiable_type = ?")
# Q 490 : # where(oauth_application_id: app_id)
Query(Endpoint)
.where("oauth_application_id = ?")
# Q 491 : # where(organization_id: org_id, notifiable_type: "Comment", action: nil, user_id: nil)
Query(Notification)
.where("organization_id = ?")
.where("notifiable_type = ?")
.where("action = ?")
.where("user_id = ?")
# Q 492 : # where(organization_id: org_id, notifiable_type: "Mention", user_id: nil)
Query(Notification)
.where("organization_id = ?")
.where("notifiable_type = ?")
.where("user_id = ?")
# Q 493 : # where(organization_id: org_id, user_id: nil)
Query(Notification)
.where("organization_id = ?")
.where("user_id = ?")
# Q 494 : # where(published: false)
Query(Article)
.where("published = ?")
# Q 495 : # where(published: true)
Query(ClassifiedListing)
.where("published = ?")
# Q 496 : # where(published: true)
Query(Article)
.where("published = ?")
# Q 497 : # where(published: true)
Query(Podcast)
.where("published = ?")
# Q 498 : # where(reachable: true)
Query(PodcastEpisode)
.where("reachable = ?")
# Q 499 : # where(spent: false)
Query(Credit)
.where("spent = ?")
# Q 500 : # where(spent: true)
Query(Credit)
.where("spent = ?")
# Q 501 : # where(status: :active)
Query(ProMembership)
.where("status = ?")
# Q 502 : # where(status: :expired)
Query(ProMembership)
.where("status = ?")
# Q 503 : # where(status: :live)
Query(Sponsorship)
.where("status = ?")
# Q 504 : # where(status: :pending)
Query(Sponsorship)
.where("status = ?")
